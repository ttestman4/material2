{"version":3,"file":"table-simple-column-example.js","sourceRoot":"","sources":["../../../../src/material-examples/table-simple-column/table-simple-column-example.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, OnDestroy, OnInit, Optional, ViewChild} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n    MatColumnDef,\n    MatSort,\n    MatSortHeader,\n    MatTable,\n    MatTableDataSource\n} from '@angular/material';\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n];\n\n/**\n * @title Table with a custom column component for easy column definition reuse.\n */\n@Component({\n  selector: 'table-simple-column-example',\n  styleUrls: ['table-simple-column-example.css'],\n  templateUrl: 'table-simple-column-example.html',\n})\nexport class TableSimpleColumnExample implements OnInit {\n  displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\n  dataSource = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA);\n  getWeight = (data: PeriodicElement) => '~' + data.weight;\n\n  @ViewChild('sort') sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n}\n\n/**\n * Column that shows simply shows text content for the header and row\n * cells. By default, the name of this column will be assumed to be both the header\n * text and data property used to access the data value to show in cells. To override\n * the header text, provide a label text. To override the data cell values,\n * provide a dataAccessor function that provides the string to display for each row's cell.\n *\n * Note that this component sets itself as visually hidden since it will show up in the `mat-table`\n * DOM because it is an empty element with an ng-container (nothing rendered). It should not\n * interfere with screen readers.\n */\n@Component({\n  selector: 'simple-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> {{label || name}} </th>\n      <td mat-cell *matCellDef=\"let data\"> {{getData(data)}}</td>\n    </ng-container>\n  `,\n  host: {\n    'class': 'simple-column cdk-visually-hidden',\n    '[attr.ariaHidden]': 'true',\n  }\n})\nexport class SimpleColumn<T> implements OnDestroy, OnInit {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(name: string) {\n    this._name = name;\n    this.columnDef.name = name;\n  }\n  _name: string;\n\n  /**\n   * Text label that should be used for the column header. If this property is not\n   * set, the header text will default to the column name.\n   */\n  @Input() label: string;\n\n  /**\n   * Accessor function to retrieve the data should be provided to the cell. If this\n   * property is not set, the data cells will assume that the column name is the same\n   * as the data property the cells should display.\n   */\n  @Input() dataAccessor: ((data: T, name: string) => string);\n\n  /** Alignment of the cell values. */\n  @Input() align: 'before' | 'after' = 'before';\n\n  /** Whether the column is sortable */\n  @Input()\n  get sortable(): boolean { return this._sortable; }\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  _sortable: boolean;\n\n  @ViewChild(MatColumnDef) columnDef: MatColumnDef;\n\n  @ViewChild(MatSortHeader) sortHeader: MatSortHeader;\n\n  constructor(@Optional() public table: MatTable<any>) { }\n\n  ngOnInit() {\n    if (this.table) {\n      this.table.addColumnDef(this.columnDef);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.table) {\n      this.table.removeColumnDef(this.columnDef);\n    }\n  }\n\n  getData(data: T): any {\n    return this.dataAccessor ? this.dataAccessor(data, this.name) : (data as any)[this.name];\n  }\n}\n"]}