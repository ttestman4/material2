{"version":3,"file":"tree-nested-overview-example.js","sourceRoot":"","sources":["../../../../src/material-examples/tree-nested-overview/tree-nested-overview-example.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,0CAAoD;AACpD,sCAAwC;AACxC,+CAA+D;AAW/D,IAAM,SAAS,GAAe;IAC5B;QACE,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACR,EAAC,IAAI,EAAE,OAAO,EAAC;YACf,EAAC,IAAI,EAAE,QAAQ,EAAC;YAChB,EAAC,IAAI,EAAE,aAAa,EAAC;SACtB;KACF,EAAE;QACD,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,EAAC,IAAI,EAAE,UAAU,EAAC;oBAClB,EAAC,IAAI,EAAE,iBAAiB,EAAC;iBAC1B;aACF,EAAE;gBACD,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACR,EAAC,IAAI,EAAE,UAAU,EAAC;oBAClB,EAAC,IAAI,EAAE,SAAS,EAAC;iBAClB;aACF;SACF;KACF;CACF,CAAC;AAEF;;GAEG;AAMH;IAIE;QAHA,gBAAW,GAAG,IAAI,wBAAiB,CAAW,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC,CAAC;QACrE,eAAU,GAAG,IAAI,8BAAuB,EAAY,CAAC;QAMrD,aAAQ,GAAG,UAAC,CAAS,EAAE,IAAc,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAA3C,CAA2C,CAAC;QAHpF,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;IACnC,CAAC;IANU,yBAAyB;QALrC,gBAAS,CAAC;YACT,QAAQ,EAAE,8BAA8B;YACxC,WAAW,EAAE,mCAAmC;YAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;SAChD,CAAC;;OACW,yBAAyB,CASrC;IAAD,gCAAC;CAAA,AATD,IASC;AATY,8DAAyB","sourcesContent":["import {NestedTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussel sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'tree-nested-overview-example',\n  templateUrl: 'tree-nested-overview-example.html',\n  styleUrls: ['tree-nested-overview-example.css'],\n})\nexport class TreeNestedOverviewExample {\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n"]}