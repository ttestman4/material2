{"version":3,"file":"tree-flat-overview-example.js","sourceRoot":"","sources":["../../../../src/material-examples/tree-flat-overview/tree-flat-overview-example.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,0CAAkD;AAClD,sCAAwC;AACxC,+CAA+E;AAW/E,IAAM,SAAS,GAAe;IAC5B;QACE,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACR,EAAC,IAAI,EAAE,OAAO,EAAC;YACf,EAAC,IAAI,EAAE,QAAQ,EAAC;YAChB,EAAC,IAAI,EAAE,aAAa,EAAC;SACtB;KACF,EAAE;QACD,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,EAAC,IAAI,EAAE,UAAU,EAAC;oBAClB,EAAC,IAAI,EAAE,iBAAiB,EAAC;iBAC1B;aACF,EAAE;gBACD,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACR,EAAC,IAAI,EAAE,UAAU,EAAC;oBAClB,EAAC,IAAI,EAAE,SAAS,EAAC;iBAClB;aACF;SACF;KACF;CACF,CAAC;AASF;;GAEG;AAMH;IAiBE;QAhBQ,gBAAW,GAAG,UAAC,IAAc,EAAE,KAAa;YAClD,OAAO;gBACL,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,KAAK;aACb,CAAC;QACJ,CAAC,CAAA;QAED,gBAAW,GAAG,IAAI,sBAAe,CAC7B,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,EAAf,CAAe,CAAC,CAAC;QAEjD,kBAAa,GAAG,IAAI,uBAAgB,CAChC,IAAI,CAAC,WAAW,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,EAAf,CAAe,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC,CAAC;QAE1F,eAAU,GAAG,IAAI,4BAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAM7E,aAAQ,GAAG,UAAC,CAAS,EAAE,IAAqB,IAAK,OAAA,IAAI,CAAC,UAAU,EAAf,CAAe,CAAC;QAH/D,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;IACnC,CAAC;IAnBU,uBAAuB;QALnC,gBAAS,CAAC;YACT,QAAQ,EAAE,4BAA4B;YACtC,WAAW,EAAE,iCAAiC;YAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;SAC9C,CAAC;;OACW,uBAAuB,CAsBnC;IAAD,8BAAC;CAAA,AAtBD,IAsBC;AAtBY,0DAAuB","sourcesContent":["import {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussel sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'tree-flat-overview-example',\n  templateUrl: 'tree-flat-overview-example.html',\n  styleUrls: ['tree-flat-overview-example.css'],\n})\nexport class TreeFlatOverviewExample {\n  private transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      level: level,\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n      node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n      this.transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n"]}