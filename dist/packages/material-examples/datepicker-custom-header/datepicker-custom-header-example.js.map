{"version":3,"file":"datepicker-custom-header-example.js","sourceRoot":"","sources":["../../../../src/material-examples/datepicker-custom-header/datepicker-custom-header-example.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sCAOuB;AACvB,8CAA8C;AAC9C,+CAAqF;AACrF,6BAA6B;AAC7B,4CAAyC;AAEzC,oDAAoD;AAMpD;IALA;QAME,kBAAa,GAAG,aAAa,CAAC;IAChC,CAAC;IAFY,6BAA6B;QALzC,gBAAS,CAAC;YACT,QAAQ,EAAE,kCAAkC;YAC5C,WAAW,EAAE,uCAAuC;YACpD,eAAe,EAAE,8BAAuB,CAAC,MAAM;SAChD,CAAC;OACW,6BAA6B,CAEzC;IAAD,oCAAC;CAAA,AAFD,IAEC;AAFY,sEAA6B;AAI1C,8CAA8C;AA0C9C;IAGE,uBAA4B,QAAwB,EAChC,WAA2B,EACD,WAA2B,EAC7D,GAAsB;QAHN,aAAQ,GAAR,QAAQ,CAAgB;QAChC,gBAAW,GAAX,WAAW,CAAgB;QACD,gBAAW,GAAX,WAAW,CAAgB;QAJjE,cAAS,GAAG,IAAI,cAAO,EAAQ,CAAC;QAMtC,QAAQ,CAAC,YAAY;aAChB,IAAI,CAAC,qBAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,SAAS,CAAC,cAAM,OAAA,GAAG,CAAC,YAAY,EAAE,EAAlB,CAAkB,CAAC,CAAC;IAC3C,CAAC;IAED,mCAAW,GAAX;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAED,sBAAI,sCAAW;aAAf;YACE,OAAO,IAAI,CAAC,WAAW;iBAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC;iBACzE,iBAAiB,EAAE,CAAC;QAC3B,CAAC;;;OAAA;IAED,uCAAe,GAAf,UAAgB,IAAsB;QACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,mCAAW,GAAX,UAAY,IAAsB;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAjCU,aAAa;QAzCzB,gBAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,MAAM,EAAE,CAAC,gTAiBR,CAAC;YACF,QAAQ,EAAE,ozBAkBT;YACD,eAAe,EAAE,8BAAuB,CAAC,MAAM;SAChD,CAAC;QAIa,WAAA,WAAI,EAAE,CAAA;QAEN,WAAA,aAAM,CAAC,uBAAgB,CAAC,CAAA;yCAFC,sBAAW;YAChB,kBAAW,UAE3B,wBAAiB;OANvB,aAAa,CAkCzB;IAAD,oBAAC;CAAA,AAlCD,IAkCC;AAlCY,sCAAa","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Host,\n  Inject,\n  OnDestroy\n} from '@angular/core';\nimport {MatCalendar} from '@angular/material';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n/** @title Datepicker with custom calendar header */\n@Component({\n  selector: 'datepicker-custom-header-example',\n  templateUrl: 'datepicker-custom-header-example.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DatepickerCustomHeaderExample {\n  exampleHeader = ExampleHeader;\n}\n\n/** Custom header component for datepicker. */\n@Component({\n  selector: 'example-header',\n  styles: [`\n    .example-header {\n      display: flex;\n      align-items: center;\n      padding: 0.5em;\n    }\n\n    .example-header-label {\n      flex: 1;\n      height: 1em;\n      font-weight: 500;\n      text-align: center;\n    }\n\n    .example-double-arrow .mat-icon {\n      margin: -22%;\n    }\n  `],\n  template: `\n    <div class=\"example-header\">\n      <button mat-icon-button class=\"example-double-arrow\" (click)=\"previousClicked('year')\">\n        <mat-icon>keyboard_arrow_left</mat-icon>\n        <mat-icon>keyboard_arrow_left</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"previousClicked('month')\">\n        <mat-icon>keyboard_arrow_left</mat-icon>\n      </button>\n      <span class=\"example-header-label\">{{periodLabel}}</span>\n      <button mat-icon-button (click)=\"nextClicked('month')\">\n        <mat-icon>keyboard_arrow_right</mat-icon>\n      </button>\n      <button mat-icon-button class=\"example-double-arrow\" (click)=\"nextClicked('year')\">\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n      </button>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExampleHeader<D> implements OnDestroy {\n  private destroyed = new Subject<void>();\n\n  constructor(@Host() private calendar: MatCalendar<D>,\n              private dateAdapter: DateAdapter<D>,\n              @Inject(MAT_DATE_FORMATS) private dateFormats: MatDateFormats,\n              cdr: ChangeDetectorRef) {\n    calendar.stateChanges\n        .pipe(takeUntil(this.destroyed))\n        .subscribe(() => cdr.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  get periodLabel() {\n    return this.dateAdapter\n        .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel)\n        .toLocaleUpperCase();\n  }\n\n  previousClicked(mode: 'month' | 'year') {\n    this.calendar.activeDate = mode === 'month' ?\n        this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n        this.dateAdapter.addCalendarYears(this.calendar.activeDate, -1);\n  }\n\n  nextClicked(mode: 'month' | 'year') {\n    this.calendar.activeDate = mode === 'month' ?\n        this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n        this.dateAdapter.addCalendarYears(this.calendar.activeDate, 1);\n  }\n}\n"]}