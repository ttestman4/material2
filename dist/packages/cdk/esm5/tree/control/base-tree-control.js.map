{"version":3,"file":"base-tree-control.js","sourceRoot":"","sources":["../../../../../../src/cdk/tree/control/base-tree-control.ts"],"names":[],"mappings":";;;;;;;;;;;AAOA,OAAO,EAAC,cAAc,EAAC,MAAM,0BAA0B,CAAC;;;;;;AAKxD;;;;;;IAAA;;;;QAYE,mBAAc,GAAsB,IAAI,cAAc,CAAI,IAAI,CAAC,CAAC;IA2DlE,CAAC;IA7CC,+DAA+D;;;;;;IAC/D,gCAAM;;;;;IAAN,UAAO,QAAW;QAChB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,oCAAoC;;;;;;IACpC,gCAAM;;;;;IAAN,UAAO,QAAW;QAChB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,sCAAsC;;;;;;IACtC,kCAAQ;;;;;IAAR,UAAS,QAAW;QAClB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,+FAA+F;;;;;;IAC/F,oCAAU;;;;;IAAV,UAAW,QAAW;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED,sDAAsD;;;;;;IACtD,2CAAiB;;;;;IAAjB,UAAkB,QAAW;QAC3B,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC;YACpC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;YACpC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,0CAA0C;;;;;IAC1C,qCAAW;;;;IAAX;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAED,+DAA+D;;;;;;IAC/D,2CAAiB;;;;;IAAjB,UAAkB,QAAW;;;YACvB,aAAa,GAAG,CAAC,QAAQ,CAAC;QAC9B,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QACrD,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,MAAM,WAAI,aAAa,EAAE;IAC/C,CAAC;IAED,iEAAiE;;;;;;IACjE,6CAAmB;;;;;IAAnB,UAAoB,QAAW;;;YACzB,aAAa,GAAG,CAAC,QAAQ,CAAC;QAC9B,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QACrD,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,QAAQ,WAAI,aAAa,EAAE;IACjD,CAAC;IACH,sBAAC;AAAD,CAAC,AAvED,IAuEC;;;;;;;;;;;;IA9DC,oCAAe;;;;;IAGf,yCAAgE;;;;;IAGhE,mCAAkC;;;;;;IAMlC,uCAAuC;;;;;IAGvC,sCAAyE;;;;;;;IArBzE,mEAA0C;;;;;;IAG1C,sDAA2B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(dataNode);\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(dataNode);\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(dataNode);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(dataNode);\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(dataNode)\n        ? this.collapseDescendants(dataNode)\n        : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n"]}