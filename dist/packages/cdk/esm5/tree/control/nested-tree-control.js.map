{"version":3,"file":"nested-tree-control.js","sourceRoot":"","sources":["../../../../../../src/cdk/tree/control/nested-tree-control.ts"],"names":[],"mappings":";;;;;;;;;;;;AAOA,OAAO,EAAC,UAAU,EAAC,MAAM,MAAM,CAAC;AAChC,OAAO,EAAC,IAAI,EAAE,MAAM,EAAC,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAC,eAAe,EAAC,MAAM,qBAAqB,CAAC;;;;;AAGpD;;;;;IAA0C,6CAAkB;IAE1D,uDAAuD;IACvD,2BAAmB,WAAwE;QAA3F,YACE,iBAAO,SACR;QAFkB,iBAAW,GAAX,WAAW,CAA6D;;IAE3F,CAAC;IAED;;;;;OAKG;;;;;;;;IACH,qCAAS;;;;;;;IAAT;QAAA,iBAKC;;QAJC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;;YACtB,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,WAAgB,EAAE,QAAQ;YAC9D,OAAI,WAAW,QAAK,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAE,QAAQ;QAA3D,CAA4D,EAAE,EAAE,CAAC;QACrE,CAAA,KAAA,IAAI,CAAC,cAAc,CAAA,CAAC,MAAM,WAAI,QAAQ,EAAE;IAC1C,CAAC;IAED,8FAA8F;;;;;;IAC9F,0CAAc;;;;;IAAd,UAAe,QAAW;;YAClB,WAAW,GAAQ,EAAE;QAE3B,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC5C,yBAAyB;QACzB,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,wDAAwD;;;;;;;;IAC9C,2CAAe;;;;;;;IAAzB,UAA0B,WAAgB,EAAE,QAAW;QAAvD,iBAUC;QATC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;YACrB,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAChD,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAChC,aAAa,CAAC,OAAO,CAAC,UAAC,KAAQ,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC;SAC/E;aAAM,IAAI,aAAa,YAAY,UAAU,EAAE;YAC9C,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,QAAQ;gBAC7D,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAQ,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IACH,wBAAC;AAAD,CAAC,AAzCD,CAA0C,eAAe,GAyCxD;;;;;;;;IAtCa,wCAA+E","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable} from 'rxjs';\nimport {take, filter} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with nested tree function getChildren. */\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null)) {\n    super();\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants: T[] = [];\n\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\n    } else if (childrenNodes instanceof Observable) {\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        children.forEach((child: T) => this._getDescendants(descendants, child));\n      });\n    }\n  }\n}\n"]}