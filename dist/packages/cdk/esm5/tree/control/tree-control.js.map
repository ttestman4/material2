{"version":3,"file":"tree-control.js","sourceRoot":"","sources":["../../../../../../src/cdk/tree/control/tree-control.ts"],"names":[],"mappings":";;;;;;;;;;;AAeA,iCAgDC;;;;;;IA9CC,gCAAe;;;;;IAGf,qCAAkC;;;;;IAiClC,+BAA2C;;;;;;IAM3C,mCAAgD;;;;;IAGhD,kCAAgF;;;;;;IAvChF,2DAAiC;;;;;;IAGjC,+DAAmC;;;;;;IAGnC,uDAA0B;;;;;;IAG1B,uDAA0B;;;;;;IAG1B,yDAA4B;;;;;IAG5B,kDAAkB;;;;;IAGlB,oDAAoB;;;;;;IAGpB,kEAAqC;;;;;;IAGrC,kEAAqC;;;;;;IAGrC,oEAAuC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\n\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n */\nexport interface TreeControl<T> {\n  /** The saved tree nodes data for `expandAll` action. */\n  dataNodes: T[];\n\n  /** The expansion model */\n  expansionModel: SelectionModel<T>;\n\n  /** Whether the data node is expanded or collapsed. Return true if it's expanded. */\n  isExpanded(dataNode: T): boolean;\n\n  /** Get all descendants of a data node */\n  getDescendants(dataNode: T): any[];\n\n  /** Expand or collapse data node */\n  toggle(dataNode: T): void;\n\n  /** Expand one data node */\n  expand(dataNode: T): void;\n\n  /** Collapse one data node */\n  collapse(dataNode: T): void;\n\n  /** Expand all the dataNodes in the tree */\n  expandAll(): void;\n\n  /** Collapse all the dataNodes in the tree */\n  collapseAll(): void;\n\n  /** Toggle a data node by expand/collapse it and all its descendants */\n  toggleDescendants(dataNode: T): void;\n\n  /** Expand a data node and all its descendants */\n  expandDescendants(dataNode: T): void;\n\n  /** Collapse a data node and all its descendants */\n  collapseDescendants(dataNode: T): void;\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  readonly getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  readonly isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  readonly getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;\n}\n"]}