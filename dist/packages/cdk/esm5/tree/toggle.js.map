{"version":3,"file":"toggle.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/toggle.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EACL,SAAS,EACT,KAAK,GACN,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,OAAO,EAAE,WAAW,EAAC,MAAM,QAAQ,CAAC;;;;;AAK5C;IAaE,2BAAsB,KAAiB,EACjB,SAAyB;QADzB,UAAK,GAAL,KAAK,CAAY;QACjB,cAAS,GAAT,SAAS,CAAgB;QAHrC,eAAU,GAAG,KAAK,CAAC;IAGqB,CAAC;IANnD,sBACI,wCAAS;QAFb,oDAAoD;;;;;QACpD,cAC2B,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;;;QACpD,UAAc,KAAc,IAAI,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAD7B;;;;;IAOpD,mCAAO;;;;IAAP,UAAQ,KAAY;QAClB,IAAI,CAAC,SAAS;YACZ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAC/D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEvD,KAAK,CAAC,eAAe,EAAE,CAAC;IAC1B,CAAC;;gBAtBF,SAAS,SAAC;oBACT,QAAQ,EAAE,qBAAqB;oBAC/B,IAAI,EAAE;wBACJ,SAAS,EAAE,iBAAiB;qBAC7B;iBACF;;;;gBAVO,OAAO;gBAAE,WAAW;;;4BAazB,KAAK,SAAC,4BAA4B;;IAerC,wBAAC;CAAA,AAvBD,IAuBC;SAjBY,iBAAiB;;;;;;IAK5B,uCAA6B;;;;;IAEjB,kCAA2B;;;;;IAC3B,sCAAmC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  Input,\n} from '@angular/core';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({\n  selector: '[cdkTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  }\n})\nexport class CdkTreeNodeToggle<T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T>,\n              protected _treeNode: CdkTreeNode<T>) {}\n\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n}\n"]}