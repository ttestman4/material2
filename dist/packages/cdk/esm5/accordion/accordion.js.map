{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../../../../src/cdk/accordion/accordion.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAC,SAAS,EAAE,KAAK,EAAsC,MAAM,eAAe,CAAC;AACpF,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;;;;;IAGzB,MAAM,GAAG,CAAC;;;;AAKd;IAAA;;;;QAMW,kBAAa,GAAG,IAAI,OAAO,EAAiB,CAAC;;;;QAG7C,yBAAoB,GAAqB,IAAI,OAAO,EAAW,CAAC;;;;QAGhE,OAAE,GAAG,mBAAiB,MAAM,EAAI,CAAC;QAMlC,WAAM,GAAY,KAAK,CAAC;IAyBlC,CAAC;IA5BC,sBACI,+BAAK;QAFT,2FAA2F;;;;;QAC3F,cACuB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;QAC5C,UAAU,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAD7B;IAI5C,gFAAgF;;;;;IAChF,8BAAO;;;;IAAP;QACE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,iFAAiF;;;;;IACjF,+BAAQ;;;;IAAR;QACE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;;;;;IAED,kCAAW;;;;IAAX,UAAY,OAAsB;QAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;;;;IAED,kCAAW;;;IAAX;QACE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;;;;;;IAEO,oCAAa;;;;;IAArB,UAAsB,QAAiB;QACrC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1C;IACH,CAAC;;gBA1CF,SAAS,SAAC;oBACT,QAAQ,EAAE,+BAA+B;oBACzC,QAAQ,EAAE,cAAc;iBACzB;;;wBAYE,KAAK;;IA4BR,mBAAC;CAAA,AA3CD,IA2CC;SAvCY,YAAY;;;;;;IAEvB,qCAAsD;;;;;IAGtD,4CAAyE;;;;;IAGzE,0BAA0C;;;;;IAM1C,8BAAgC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n}\n"]}