{"version":3,"file":"focus-key-manager.js","sourceRoot":"","sources":["../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,cAAc,EAAuB,MAAM,oBAAoB,CAAC;;;;;;;AAQxE,qCAGC;;;;;;;IADC,wDAAkC;;;;;AAGpC;;;;IAAwC,2CAAmC;IAA3E;QAAA,qEAgCC;QA/BS,aAAO,GAAgB,SAAS,CAAC;;IA+B3C,CAAC;IA7BC;;;OAGG;;;;;;;;IACH,wCAAc;;;;;;;IAAd,UAAe,MAAmB;QAChC,mBAAA,IAAI,EAAA,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,OAAO,mBAAA,IAAI,EAAA,CAAC;IACd,CAAC;;;;;IAeD,uCAAa;;;;IAAb,UAAc,IAAS;QACrB,iBAAM,aAAa,YAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IACH,sBAAC;AAAD,CAAC,AAhCD,CAAwC,cAAc,GAgCrD;;;;;;;;;;IA/BC,kCAAyC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n"]}