{"version":3,"file":"drag-ref.js","sourceRoot":"","sources":["../../../../../src/cdk/drag-drop/drag-ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n"]}