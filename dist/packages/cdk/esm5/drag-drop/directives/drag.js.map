{"version":3,"file":"drag.js","sourceRoot":"","sources":["../../../../../../src/cdk/drag-drop/directives/drag.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler` and `dragDropRegistry` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._proxyEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes.rootElementSelector;\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /**\n   * Proxies the events from a DragRef to events that\n   * match the interfaces of the CdkDrag outputs.\n   */\n  private _proxyEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n"]}