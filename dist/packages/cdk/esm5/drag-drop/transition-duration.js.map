{"version":3,"file":"transition-duration.js","sourceRoot":"","sources":["../../../../../src/cdk/drag-drop/transition-duration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AASA,SAAS,qBAAqB,CAAC,KAAa;;;QAEpC,UAAU,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;IACpE,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;AACxC,CAAC;;;;;;AAGD,MAAM,UAAU,kCAAkC,CAAC,OAAoB;;QAC/D,aAAa,GAAG,gBAAgB,CAAC,OAAO,CAAC;;QACzC,sBAAsB,GAAG,qBAAqB,CAAC,aAAa,EAAE,qBAAqB,CAAC;;QACpF,QAAQ,GAAG,sBAAsB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,KAAK,EAAtC,CAAsC,CAAC;IAE5F,+EAA+E;IAC/E,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,CAAC,CAAC;KACV;;;;QAIK,aAAa,GAAG,sBAAsB,CAAC,OAAO,CAAC,QAAQ,CAAC;;QACxD,YAAY,GAAG,qBAAqB,CAAC,aAAa,EAAE,qBAAqB,CAAC;;QAC1E,SAAS,GAAG,qBAAqB,CAAC,aAAa,EAAE,kBAAkB,CAAC;IAE1E,OAAO,qBAAqB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAClD,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;AACzD,CAAC;;;;;;;AAGD,SAAS,qBAAqB,CAAC,aAAkC,EAAE,IAAY;;QACvE,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC;IAClD,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC,CAAC;AACnD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n"]}