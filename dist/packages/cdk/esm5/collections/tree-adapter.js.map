{"version":3,"file":"tree-adapter.js","sourceRoot":"","sources":["../../../../../src/cdk/collections/tree-adapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAeA,2CAeC;;;;;;;IAbC,6EAAyC;;;;;;;;IAMzC,4FAAyE;;;;;;;;;IAMzE,6FAAoE","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SelectionModel} from './selection';\n\n\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n */\nexport interface TreeDataNodeFlattener<T> {\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\n  flattenNodes(structuredData: any[]): T[];\n\n  /**\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\n   * model.\n   */\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n\n  /**\n   * Put node descendants of node in array.\n   * If `onlyExpandable` is true, then only process expandable descendants.\n   */\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n"]}