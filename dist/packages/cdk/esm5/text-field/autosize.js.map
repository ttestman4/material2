{"version":3,"file":"autosize.js","sourceRoot":"","sources":["../../../../../src/cdk/text-field/autosize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\n\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | null;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone) {\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add('cdk-textarea-autosize-measuring');\n    textarea.placeholder = '';\n\n    // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n    // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove('cdk-textarea-autosize-measuring');\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to it's original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight === undefined) {\n      return;\n    }\n    this._textareaElement.style.height = this._initialHeight;\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n"]}