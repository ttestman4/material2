{"version":3,"file":"overlay-keyboard-dispatcher.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n"]}