{"version":3,"file":"reposition-scroll-strategy.js","sourceRoot":"","sources":["../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts"],"names":[],"mappings":";;;;;;;;;;;AAUA,OAAO,EAAiB,wCAAwC,EAAC,MAAM,mBAAmB,CAAC;AAG3F,OAAO,EAAC,4BAA4B,EAAC,MAAM,yBAAyB,CAAC;;;;;AAKrE,oDAMC;;;;;;IAJC,wDAAwB;;;;;IAGxB,mDAAoB;;;;;AAMtB;;;;IAIE,kCACU,iBAAmC,EACnC,cAA6B,EAC7B,OAAe,EACf,OAAwC;QAHxC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,mBAAc,GAAd,cAAc,CAAe;QAC7B,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAiC;QAP1C,wBAAmB,GAAsB,IAAI,CAAC;IAOA,CAAC;IAEvD,mDAAmD;;;;;;IACnD,yCAAM;;;;;IAAN,UAAO,UAA4B;QACjC,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,wCAAwC,EAAE,CAAC;SAClD;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED,+DAA+D;;;;;IAC/D,yCAAM;;;;IAAN;QAAA,iBAuBC;QAtBC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;;gBACvB,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAE/D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;gBAC7E,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;gBAElC,gFAAgF;gBAChF,IAAI,KAAI,CAAC,OAAO,IAAI,KAAI,CAAC,OAAO,CAAC,SAAS,EAAE;;wBACpC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,qBAAqB,EAAE;oBACrE,IAAA,2CAAuD,EAAtD,gBAAK,EAAE,kBAA+C;;;;wBAIvD,WAAW,GAAG,CAAC,EAAC,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC;oBAEpF,IAAI,4BAA4B,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;wBAC1D,KAAI,CAAC,OAAO,EAAE,CAAC;wBACf,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAzB,CAAyB,CAAC,CAAC;qBACnD;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,gEAAgE;;;;;IAChE,0CAAO;;;;IAAP;QACE,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;IACH,CAAC;IACH,+BAAC;AAAD,CAAC,AApDD,IAoDC;;;;;;;;;;IAnDC,uDAAsD;;;;;IACtD,+CAAsC;;;;;IAGpC,qDAA2C;;;;;IAC3C,kDAAqC;;;;;IACrC,2CAAuB;;;;;IACvB,2CAAgD","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n"]}