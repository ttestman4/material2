{"version":3,"file":"overlay-position-builder.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/position/overlay-position-builder.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,aAAa,EAAC,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAa,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvE,OAAO,EAAC,yBAAyB,EAAC,MAAM,+BAA+B,CAAC;AACxE,OAAO,EACL,iCAAiC,GAElC,MAAM,wCAAwC,CAAC;AAChD,OAAO,EAAC,sBAAsB,EAAC,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAC,QAAQ,EAAC,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAC,gBAAgB,EAAC,MAAM,sBAAsB,CAAC;;;;;;;;;AAKtD,MAAM,OAAO,sBAAsB;;;;;;;IACjC,YACU,cAA6B,EACX,SAAc,EAEpB,SAAoB,EACpB,iBAAoC;QAJhD,mBAAc,GAAd,cAAc,CAAe;QACX,cAAS,GAAT,SAAS,CAAK;QAEpB,cAAS,GAAT,SAAS,CAAW;QACpB,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAI,CAAC;;;;;IAK/D,MAAM;QACJ,OAAO,IAAI,sBAAsB,EAAE,CAAC;IACtC,CAAC;;;;;;;;;;IAUD,WAAW,CACP,UAAsB,EACtB,SAAmC,EACnC,UAAqC;QAEvC,OAAO,IAAI,yBAAyB,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,cAAc,EACvF,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;;;;;;IAMD,mBAAmB,CAAC,MAA+C;QAEjE,OAAO,IAAI,iCAAiC,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EACpF,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC9C,CAAC;;;YAzCF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;YAfxB,aAAa;4CAmBhB,MAAM,SAAC,QAAQ;YATZ,QAAQ,uBAWX,QAAQ;YAVL,gBAAgB,uBAWnB,QAAQ;;;;;;;;IAJT,gDAAqC;;;;;IACrC,2CAAwC;;;;;IAExC,2CAAwC;;;;;IACxC,mDAAwD","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable, Optional} from '@angular/core';\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    @Inject(DOCUMENT) private _document: any,\n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    @Optional() private _platform?: Platform,\n    @Optional() private _overlayContainer?: OverlayContainer) { }\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler,\n        this._document);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n"]}