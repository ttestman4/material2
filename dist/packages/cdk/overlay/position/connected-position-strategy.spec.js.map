{"version":3,"file":"connected-position-strategy.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/position/connected-position-strategy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentPortal, PortalModule} from '@angular/cdk/portal';\nimport {CdkScrollable, ScrollingModule} from '@angular/cdk/scrolling';\nimport {MockNgZone} from '@angular/cdk/testing';\nimport {Component, ElementRef, NgModule, NgZone} from '@angular/core';\nimport {inject, TestBed} from '@angular/core/testing';\nimport {Subscription} from 'rxjs';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectedPositionStrategy,\n  ConnectionPositionPair,\n  Overlay,\n  OverlayContainer,\n  OverlayModule,\n  OverlayRef,\n} from '../index';\n\n\n// Default width and height of the overlay and origin panels throughout these tests.\nconst DEFAULT_HEIGHT = 30;\nconst DEFAULT_WIDTH = 60;\n\n// For all tests, we assume the browser window is 1024x786 (outerWidth x outerHeight).\n// The karma config has been set to this for local tests, and it is the default size\n// for tests on CI (both SauceLabs and Browserstack).\n\ndescribe('ConnectedPositionStrategy', () => {\n  let overlay: Overlay;\n  let overlayContainer: OverlayContainer;\n  let zone: MockNgZone;\n  let overlayRef: OverlayRef;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [ScrollingModule, OverlayModule, OverlayTestModule],\n      providers: [{provide: NgZone, useFactory: () => zone = new MockNgZone()}]\n    });\n\n    inject([Overlay, OverlayContainer], (o: Overlay, oc: OverlayContainer) => {\n      overlay = o;\n      overlayContainer = oc;\n    })();\n  });\n\n  afterEach(() => {\n    overlayContainer.ngOnDestroy();\n\n    if (overlayRef) {\n      overlayRef.dispose();\n    }\n  });\n\n  function attachOverlay(positionStrategy: ConnectedPositionStrategy) {\n    overlayRef = overlay.create({positionStrategy});\n    overlayRef.attach(new ComponentPortal(TestOverlay));\n    zone.simulateZoneExit();\n  }\n\n  describe('with origin on document body', () => {\n    const ORIGIN_HEIGHT = DEFAULT_HEIGHT;\n    const ORIGIN_WIDTH = DEFAULT_WIDTH;\n    const OVERLAY_HEIGHT = DEFAULT_HEIGHT;\n    const OVERLAY_WIDTH = DEFAULT_WIDTH;\n\n    let originElement: HTMLElement;\n    let positionStrategy: ConnectedPositionStrategy;\n    let fakeElementRef: ElementRef<HTMLElement>;\n\n    let originRect: ClientRect | null;\n    let originCenterX: number | null;\n    let originCenterY: number | null;\n\n    beforeEach(() => {\n      // The origin and overlay elements need to be in the document body in order to have geometry.\n      originElement = createPositionedBlockElement();\n      document.body.appendChild(originElement);\n      fakeElementRef = new ElementRef<HTMLElement>(originElement);\n    });\n\n    afterEach(() => {\n      document.body.removeChild(originElement);\n\n      // Reset the origin geometry after each test so we don't accidently keep state between tests.\n      originRect = null;\n      originCenterX = null;\n      originCenterY = null;\n    });\n\n    describe('when not near viewport edge, not scrolled', () => {\n      // Place the original element close to the center of the window.\n      // (1024 / 2, 768 / 2). It's not exact, since outerWidth/Height includes browser\n      // chrome, but it doesn't really matter for these tests.\n      const ORIGIN_LEFT = 500;\n      const ORIGIN_TOP = 350;\n\n      beforeEach(() => {\n        originElement.style.left = `${ORIGIN_LEFT}px`;\n        originElement.style.top = `${ORIGIN_TOP}px`;\n\n        originRect = originElement.getBoundingClientRect();\n        originCenterX = originRect.left + (ORIGIN_WIDTH / 2);\n        originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\n      });\n\n      // Preconditions are set, now just run the full set of simple position tests.\n      runSimplePositionTests();\n    });\n\n    describe('when scrolled', () => {\n      // Place the original element decently far outside the unscrolled document (1024x768).\n      const ORIGIN_LEFT = 2500;\n      const ORIGIN_TOP = 2500;\n\n      // Create a very large element that will make the page scrollable.\n      let veryLargeElement: HTMLElement = document.createElement('div');\n      veryLargeElement.style.width = '4000px';\n      veryLargeElement.style.height = '4000px';\n\n      beforeEach(() => {\n        // Scroll the page such that the origin element is roughly in the\n        // center of the visible viewport (2500 - 1024/2, 2500 - 768/2).\n        document.body.appendChild(veryLargeElement);\n        document.body.scrollTop = 2100;\n        document.body.scrollLeft = 2100;\n\n        originElement.style.top = `${ORIGIN_TOP}px`;\n        originElement.style.left = `${ORIGIN_LEFT}px`;\n\n        originRect = originElement.getBoundingClientRect();\n        originCenterX = originRect.left + (ORIGIN_WIDTH / 2);\n        originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\n      });\n\n      afterEach(() => {\n        document.body.removeChild(veryLargeElement);\n        document.body.scrollTop = 0;\n        document.body.scrollLeft = 0;\n      });\n\n      // Preconditions are set, now just run the full set of simple position tests.\n      runSimplePositionTests();\n    });\n\n    describe('when near viewport edge', () => {\n      it('should reposition the overlay if it would go off the top of the screen', () => {\n        // We can use the real ViewportRuler in this test since we know that zero is\n        // always the top of the viewport.\n\n        originElement.style.top = '5px';\n        originElement.style.left = '200px';\n        originRect = originElement.getBoundingClientRect();\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'top'},\n            {overlayX: 'end', overlayY: 'bottom'})\n            .withFallbackPosition(\n                {originX: 'start', originY: 'bottom'},\n                {overlayX: 'start', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.left));\n      });\n\n      it('should reposition the overlay if it would go off the left of the screen', () => {\n        // We can use the real ViewportRuler in this test since we know that zero is\n        // always the left edge of the viewport.\n\n        originElement.style.top = '200px';\n        originElement.style.left = '5px';\n        originRect = originElement.getBoundingClientRect();\n        originCenterY = originRect.top + (ORIGIN_HEIGHT / 2);\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'end', overlayY: 'top'})\n            .withFallbackPosition(\n                {originX: 'end', originY: 'center'},\n                {overlayX: 'start', overlayY: 'center'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originCenterY - (OVERLAY_HEIGHT / 2)));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.right));\n      });\n\n      it('should reposition the overlay if it would go off the bottom of the screen', () => {\n        originElement.style.bottom = '25px';\n        originElement.style.left = '200px';\n        originRect = originElement.getBoundingClientRect();\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'top'})\n            .withFallbackPosition(\n                {originX: 'end', originY: 'top'},\n                {overlayX: 'end', overlayY: 'bottom'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.bottom)).toBe(Math.floor(originRect.top));\n        expect(Math.floor(overlayRect.right)).toBe(Math.floor(originRect.right));\n      });\n\n      it('should reposition the overlay if it would go off the right of the screen', () => {\n        originElement.style.top = '200px';\n        originElement.style.right = '25px';\n        originRect = originElement.getBoundingClientRect();\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'center'},\n            {overlayX: 'start', overlayY: 'center'})\n            .withFallbackPosition(\n                {originX: 'start', originY: 'bottom'},\n                {overlayX: 'end', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom));\n        expect(Math.floor(overlayRect.right)).toBe(Math.floor(originRect.left));\n      });\n\n      it('should recalculate and set the last position with recalculateLastPosition()', () => {\n        // Push the trigger down so the overlay doesn't have room to open on the bottom.\n        originElement.style.bottom = '25px';\n        originRect = originElement.getBoundingClientRect();\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'top'})\n            .withFallbackPosition(\n                {originX: 'start', originY: 'top'},\n                {overlayX: 'start', overlayY: 'bottom'});\n\n        // This should apply the fallback position, as the original position won't fit.\n        attachOverlay(positionStrategy);\n\n        // Now make the overlay small enough to fit in the first preferred position.\n        overlayRef.overlayElement.style.height = '15px';\n\n        // This should only re-align in the last position, even though the first would fit.\n        positionStrategy.recalculateLastPosition();\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.bottom)).toBe(Math.floor(originRect.top),\n            'Expected overlay to be re-aligned to the trigger in the previous position.');\n      });\n\n      it('should default to the initial position, if no positions fit in the viewport', () => {\n        // Make the origin element taller than the viewport.\n        originElement.style.height = '1000px';\n        originElement.style.top = '0';\n        originRect = originElement.getBoundingClientRect();\n\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'bottom'});\n\n        attachOverlay(positionStrategy);\n        positionStrategy.recalculateLastPosition();\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n\n        expect(Math.floor(overlayRect.bottom)).toBe(Math.floor(originRect.top),\n            'Expected overlay to be re-aligned to the trigger in the initial position.');\n      });\n\n      it('should position a panel properly when rtl', () => {\n        // must make the overlay longer than the origin to properly test attachment\n        originRect = originElement.getBoundingClientRect();\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'top'})\n            .withDirection('rtl');\n\n        attachOverlay(positionStrategy);\n        overlayRef.overlayElement.style.width = `500px`;\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom));\n        expect(Math.floor(overlayRect.right)).toBe(Math.floor(originRect.right));\n      });\n\n      it('should position a panel with the x offset provided', () => {\n        originRect = originElement.getBoundingClientRect();\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'});\n\n        positionStrategy.withOffsetX(10);\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.top));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.left + 10));\n      });\n\n      it('should position a panel with the y offset provided', () => {\n        originRect = originElement.getBoundingClientRect();\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'});\n\n        positionStrategy.withOffsetY(50);\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.top + 50));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.left));\n      });\n\n      it('should allow for the fallback positions to specify their own offsets', () => {\n        originElement.style.bottom = '0';\n        originElement.style.left = '50%';\n        originElement.style.position = 'fixed';\n        originRect = originElement.getBoundingClientRect();\n        positionStrategy = overlay.position()\n          .connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'})\n          .withFallbackPosition(\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'bottom'},\n            -100, -100);\n\n        positionStrategy.withOffsetY(50).withOffsetY(50);\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.bottom)).toBe(Math.floor(originRect.top - 100));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.left - 100));\n      });\n\n    });\n\n    it('should emit onPositionChange event when position changes', () => {\n      originElement.style.top = '200px';\n      originElement.style.right = '25px';\n\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'end', originY: 'center'},\n          {overlayX: 'start', overlayY: 'center'})\n          .withFallbackPosition(\n              {originX: 'start', originY: 'bottom'},\n              {overlayX: 'end', overlayY: 'top'});\n\n      const positionChangeHandler = jasmine.createSpy('positionChangeHandler');\n      const subscription = positionStrategy.onPositionChange.subscribe(positionChangeHandler);\n\n      attachOverlay(positionStrategy);\n\n      const latestCall = positionChangeHandler.calls.mostRecent();\n\n      expect(positionChangeHandler).toHaveBeenCalled();\n      expect(latestCall.args[0] instanceof ConnectedOverlayPositionChange)\n          .toBe(true, `Expected strategy to emit an instance of ConnectedOverlayPositionChange.`);\n\n      // If the strategy is re-applied and the initial position would now fit,\n      // the position change event should be emitted again.\n      originElement.style.top = '200px';\n      originElement.style.left = '200px';\n\n      positionStrategy.apply();\n\n      expect(positionChangeHandler).toHaveBeenCalledTimes(2);\n\n      subscription.unsubscribe();\n    });\n\n    it('should emit the onPositionChange event even if none of the positions fit', () => {\n      originElement.style.bottom = '25px';\n      originElement.style.right = '25px';\n\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'end', originY: 'bottom'},\n          {overlayX: 'start', overlayY: 'top'})\n          .withFallbackPosition(\n              {originX: 'start', originY: 'bottom'},\n              {overlayX: 'end', overlayY: 'top'});\n\n      const positionChangeHandler = jasmine.createSpy('positionChangeHandler');\n      const subscription = positionStrategy.onPositionChange.subscribe(positionChangeHandler);\n\n      attachOverlay(positionStrategy);\n\n      expect(positionChangeHandler).toHaveBeenCalled();\n\n      subscription.unsubscribe();\n    });\n\n    it('should complete the onPositionChange stream on dispose', () => {\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'end', originY: 'bottom'},\n          {overlayX: 'start', overlayY: 'top'});\n\n      const completeHandler = jasmine.createSpy('complete handler');\n\n      positionStrategy.onPositionChange.subscribe(undefined, undefined, completeHandler);\n      attachOverlay(positionStrategy);\n      positionStrategy.dispose();\n\n      expect(completeHandler).toHaveBeenCalled();\n    });\n\n    it('should pick the fallback position that shows the largest area of the element', () => {\n      originElement.style.top = '200px';\n      originElement.style.right = '25px';\n      originRect = originElement.getBoundingClientRect();\n\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'end', originY: 'center'},\n          {overlayX: 'start', overlayY: 'center'})\n          .withFallbackPosition(\n              {originX: 'end', originY: 'top'},\n              {overlayX: 'start', overlayY: 'bottom'})\n          .withFallbackPosition(\n              {originX: 'end', originY: 'top'},\n              {overlayX: 'end', overlayY: 'top'});\n\n      attachOverlay(positionStrategy);\n\n      let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n\n      expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.top));\n      expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect.left));\n    });\n\n    it('should re-use the preferred position when re-applying while locked in', () => {\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'end', originY: 'center'},\n          {overlayX: 'start', overlayY: 'center'})\n          .withLockedPosition(true)\n          .withFallbackPosition(\n              {originX: 'start', originY: 'bottom'},\n              {overlayX: 'end', overlayY: 'top'});\n\n      const recalcSpy = spyOn(positionStrategy._positionStrategy, 'reapplyLastPosition');\n\n      attachOverlay(positionStrategy);\n\n      expect(recalcSpy).not.toHaveBeenCalled();\n\n      positionStrategy.apply();\n\n      expect(recalcSpy).toHaveBeenCalled();\n    });\n\n    /**\n     * Run all tests for connecting the overlay to the origin such that first preferred\n     * position does not go off-screen. We do this because there are several cases where we\n     * want to run the exact same tests with different preconditions (e.g., not scroll, scrolled,\n     * different element sized, etc.).\n     */\n    function runSimplePositionTests() {\n      it('should position a panel below, left-aligned', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.bottom));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect!.left));\n      });\n\n      it('should position to the right, center aligned vertically', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'center'},\n            {overlayX: 'start', overlayY: 'center'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originCenterY! - (OVERLAY_HEIGHT / 2)));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect!.right));\n      });\n\n      it('should position to the left, below', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'end', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.bottom));\n        expect(Math.round(overlayRect.right)).toBe(Math.round(originRect!.left));\n      });\n\n      it('should position above, right aligned', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'top'},\n            {overlayX: 'end', overlayY: 'bottom'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.round(overlayRect.bottom)).toBe(Math.round(originRect!.top));\n        expect(Math.round(overlayRect.right)).toBe(Math.round(originRect!.right));\n      });\n\n      it('should position below, centered', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'center', originY: 'bottom'},\n            {overlayX: 'center', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.bottom));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originCenterX! - (OVERLAY_WIDTH / 2)));\n      });\n\n      it('should center the overlay on the origin', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'center', originY: 'center'},\n            {overlayX: 'center', overlayY: 'center'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.top));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect!.left));\n      });\n\n      it('should allow for the positions to be updated after init', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        let overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.bottom));\n        expect(Math.floor(overlayRect.left)).toBe(Math.floor(originRect!.left));\n\n        positionStrategy.withPositions([new ConnectionPositionPair(\n          {originX: 'start', originY: 'bottom'},\n          {overlayX: 'end', overlayY: 'top'}\n        )]);\n\n        positionStrategy.apply();\n\n        overlayRect = overlayRef.overlayElement.getBoundingClientRect();\n        expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect!.bottom));\n        expect(Math.floor(overlayRect.right)).toBe(Math.floor(originRect!.left));\n      });\n\n    }\n  });\n\n  describe('onPositionChange with scrollable view properties', () => {\n    let scrollable: HTMLDivElement;\n    let positionChangeHandler: jasmine.Spy;\n    let onPositionChangeSubscription: Subscription;\n    let positionChange: ConnectedOverlayPositionChange;\n    let fakeElementRef: ElementRef<HTMLElement>;\n    let positionStrategy: ConnectedPositionStrategy;\n\n    beforeEach(() => {\n      // Set up the origin\n      let originElement = createBlockElement();\n      originElement.style.margin = '0 1000px 1000px 0';  // Added so that the container scrolls\n\n      // Create a scrollable container and put the origin inside\n      scrollable = createOverflowContainerElement();\n      document.body.appendChild(scrollable);\n      scrollable.appendChild(originElement);\n\n      // Create a strategy with knowledge of the scrollable container\n      fakeElementRef = new ElementRef<HTMLElement>(originElement);\n      positionStrategy = overlay.position().connectedTo(\n          fakeElementRef,\n          {originX: 'start', originY: 'bottom'},\n          {overlayX: 'start', overlayY: 'top'});\n\n      positionStrategy.withScrollableContainers([\n          new CdkScrollable(new ElementRef<HTMLElement>(scrollable), null!, null!)]);\n      positionChangeHandler = jasmine.createSpy('positionChangeHandler');\n      onPositionChangeSubscription =\n          positionStrategy.onPositionChange.subscribe(positionChangeHandler);\n      attachOverlay(positionStrategy);\n    });\n\n    afterEach(() => {\n      onPositionChangeSubscription.unsubscribe();\n      document.body.removeChild(scrollable);\n    });\n\n    it('should not have origin or overlay clipped or out of view without scroll', () => {\n      expect(positionChangeHandler).toHaveBeenCalled();\n      positionChange = positionChangeHandler.calls.mostRecent().args[0];\n      expect(positionChange.scrollableViewProperties).toEqual({\n        isOriginClipped: false,\n        isOriginOutsideView: false,\n        isOverlayClipped: false,\n        isOverlayOutsideView: false\n      });\n    });\n\n    it('should evaluate if origin is clipped if scrolled slightly down', () => {\n      scrollable.scrollTop = 10;  // Clip the origin by 10 pixels\n      positionStrategy.apply();\n\n      expect(positionChangeHandler).toHaveBeenCalled();\n      positionChange = positionChangeHandler.calls.mostRecent().args[0];\n      expect(positionChange.scrollableViewProperties).toEqual({\n        isOriginClipped: true,\n        isOriginOutsideView: false,\n        isOverlayClipped: false,\n        isOverlayOutsideView: false\n      });\n    });\n\n    it('should evaluate if origin is out of view and overlay is clipped if scrolled enough', () => {\n      scrollable.scrollTop = 31;  // Origin is 30 pixels, move out of view and clip the overlay 1px\n      positionStrategy.apply();\n\n      expect(positionChangeHandler).toHaveBeenCalled();\n      positionChange = positionChangeHandler.calls.mostRecent().args[0];\n      expect(positionChange.scrollableViewProperties).toEqual({\n        isOriginClipped: true,\n        isOriginOutsideView: true,\n        isOverlayClipped: true,\n        isOverlayOutsideView: false\n      });\n    });\n\n    it('should evaluate the overlay and origin are both out of the view', () => {\n      scrollable.scrollTop = 61;  // Scroll by overlay height + origin height + 1px buffer\n      positionStrategy.apply();\n\n      expect(positionChangeHandler).toHaveBeenCalled();\n      positionChange = positionChangeHandler.calls.mostRecent().args[0];\n      expect(positionChange.scrollableViewProperties).toEqual({\n        isOriginClipped: true,\n        isOriginOutsideView: true,\n        isOverlayClipped: true,\n        isOverlayOutsideView: true\n      });\n    });\n  });\n\n  describe('positioning properties', () => {\n    let originElement: HTMLElement;\n    let positionStrategy: ConnectedPositionStrategy;\n    let fakeElementRef: ElementRef<HTMLElement>;\n\n    beforeEach(() => {\n      // The origin and overlay elements need to be in the document body in order to have geometry.\n      originElement = createPositionedBlockElement();\n      document.body.appendChild(originElement);\n      fakeElementRef = new ElementRef<HTMLElement>(originElement);\n    });\n\n    afterEach(() => {\n      document.body.removeChild(originElement);\n    });\n\n    describe('in ltr', () => {\n      it('should use `left` when positioning an element at the start', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'});\n\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.left).toBeTruthy();\n        expect(overlayRef.overlayElement.style.right).toBeFalsy();\n      });\n\n      it('should use `right` when positioning an element at the end', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'top'},\n            {overlayX: 'end', overlayY: 'top'});\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.right).toBeTruthy();\n        expect(overlayRef.overlayElement.style.left).toBeFalsy();\n      });\n\n    });\n\n    describe('in rtl', () => {\n      it('should use `right` when positioning an element at the start', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'}\n        )\n        .withDirection('rtl');\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.right).toBeTruthy();\n        expect(overlayRef.overlayElement.style.left).toBeFalsy();\n      });\n\n      it('should use `left` when positioning an element at the end', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'end', originY: 'top'},\n            {overlayX: 'end', overlayY: 'top'}\n        ).withDirection('rtl');\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.left).toBeTruthy();\n        expect(overlayRef.overlayElement.style.right).toBeFalsy();\n      });\n    });\n\n    describe('vertical', () => {\n      it('should use `top` when positioning at element along the top', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'top'},\n            {overlayX: 'start', overlayY: 'top'}\n        );\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.top).toBeTruthy();\n        expect(overlayRef.overlayElement.style.bottom).toBeFalsy();\n      });\n\n      it('should use `bottom` when positioning at element along the bottom', () => {\n        positionStrategy = overlay.position().connectedTo(\n            fakeElementRef,\n            {originX: 'start', originY: 'bottom'},\n            {overlayX: 'start', overlayY: 'bottom'}\n        );\n\n        attachOverlay(positionStrategy);\n\n        expect(overlayRef.overlayElement.style.bottom).toBeTruthy();\n        expect(overlayRef.overlayElement.style.top).toBeFalsy();\n      });\n    });\n\n  });\n\n});\n\n/** Creates an absolutely positioned, display: block element with a default size. */\nfunction createPositionedBlockElement() {\n  let element = createBlockElement();\n  element.style.position = 'absolute';\n  return element;\n}\n\n/** Creates a block element with a default size. */\nfunction createBlockElement() {\n  let element = document.createElement('div');\n  element.style.width = `${DEFAULT_WIDTH}px`;\n  element.style.height = `${DEFAULT_HEIGHT}px`;\n  element.style.backgroundColor = 'rebeccapurple';\n  element.style.zIndex = '100';\n  return element;\n}\n\n/** Creates an overflow container with a set height and width with margin. */\nfunction createOverflowContainerElement() {\n  let element = document.createElement('div');\n  element.style.position = 'relative';\n  element.style.overflow = 'auto';\n  element.style.height = '300px';\n  element.style.width = '300px';\n  element.style.margin = '100px';\n  return element;\n}\n\n\n@Component({\n  template: `<div style=\"width: ${DEFAULT_WIDTH}px; height: ${DEFAULT_HEIGHT}px;\"></div>`\n})\nclass TestOverlay { }\n\n\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  exports: [TestOverlay],\n  declarations: [TestOverlay],\n  entryComponents: [TestOverlay],\n})\nclass OverlayTestModule { }\n"]}