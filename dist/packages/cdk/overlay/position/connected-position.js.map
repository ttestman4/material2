{"version":3,"file":"connected-position.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/position/connected-position.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;;;;;AAQvC,8CAGC;;;IAFC,2CAAiC;;IACjC,2CAA+B;;;;;;AAIjC,+CAGC;;;IAFC,6CAAkC;;IAClC,6CAAgC;;;;;AAIlC,MAAM,OAAO,sBAAsB;;;;;;;;IAUjC,YACE,MAAgC,EAChC,OAAkC,EAE3B,OAAgB,EAEhB,OAAgB,EAEhB,UAA8B;QAJ9B,YAAO,GAAP,OAAO,CAAS;QAEhB,YAAO,GAAP,OAAO,CAAS;QAEhB,eAAU,GAAV,UAAU,CAAoB;QAErC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACnC,CAAC;CACF;;;;;;IAvBC,yCAAiC;;;;;IAEjC,yCAA+B;;;;;IAE/B,0CAAkC;;;;;IAElC,0CAAgC;;;;;IAM9B,yCAAuB;;;;;IAEvB,yCAAuB;;;;;IAEvB,4CAAqC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCzC,MAAM,OAAO,mBAAmB;CAK/B;;;IAJC,8CAAyB;;IACzB,kDAA6B;;IAC7B,+CAA0B;;IAC1B,mDAA8B;;;;;AAIhC,MAAM,OAAO,8BAA8B;;;;;IACzC,YAEW,cAAsC,EAE1B,wBAA6C;QAFzD,mBAAc,GAAd,cAAc,CAAwB;QAE1B,6BAAwB,GAAxB,wBAAwB,CAAqB;IAAG,CAAC;;;;YAF7C,sBAAsB;YAEA,mBAAmB,uBAA/D,QAAQ;;;;;;;IAFT,wDAA6C;;;;;IAE7C,kEAAgE;;;;;;;;;AAStE,MAAM,UAAU,wBAAwB,CAAC,QAAgB,EAAE,KAA4B;IACrF,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,EAAE;QAC/D,MAAM,KAAK,CAAC,8BAA8B,QAAQ,KAAK,KAAK,KAAK;YACrD,uCAAuC,CAAC,CAAC;KACtD;AACH,CAAC;;;;;;;;AAQD,MAAM,UAAU,0BAA0B,CAAC,QAAgB,EAAE,KAA8B;IACzF,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,EAAE;QAC9D,MAAM,KAAK,CAAC,8BAA8B,QAAQ,KAAK,KAAK,KAAK;YACrD,sCAAsC,CAAC,CAAC;KACrD;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n"]}