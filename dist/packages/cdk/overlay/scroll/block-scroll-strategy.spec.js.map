{"version":3,"file":"block-scroll-strategy.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/block-scroll-strategy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, NgModule} from '@angular/core';\nimport {async, inject, TestBed} from '@angular/core/testing';\nimport {ComponentPortal, PortalModule} from '@angular/cdk/portal';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Overlay, OverlayContainer, OverlayModule, OverlayRef, OverlayConfig} from '../index';\n\n\ndescribe('BlockScrollStrategy', () => {\n  let platform: Platform;\n  let viewport: ViewportRuler;\n  let documentElement: HTMLElement;\n  let overlayRef: OverlayRef;\n  let componentPortal: ComponentPortal<FocacciaMsg>;\n  let forceScrollElement: HTMLElement;\n\n  beforeEach(async(() => {\n    documentElement = document.documentElement!;\n\n    // Ensure a clean state for every test.\n    documentElement.classList.remove('cdk-global-scrollblock');\n\n    TestBed.configureTestingModule({\n      imports: [OverlayModule, PortalModule, OverlayTestModule]\n    }).compileComponents();\n  }));\n\n  beforeEach(inject([Overlay, ViewportRuler, Platform],\n    (overlay: Overlay, viewportRuler: ViewportRuler, _platform: Platform) => {\n    let overlayConfig = new OverlayConfig({scrollStrategy: overlay.scrollStrategies.block()});\n\n    overlayRef = overlay.create(overlayConfig);\n    componentPortal = new ComponentPortal(FocacciaMsg);\n\n    viewport = viewportRuler;\n    forceScrollElement = document.createElement('div');\n    document.body.appendChild(forceScrollElement);\n    forceScrollElement.style.width = '100px';\n    forceScrollElement.style.height = '3000px';\n    forceScrollElement.style.background = 'rebeccapurple';\n    platform = _platform;\n  }));\n\n  afterEach(inject([OverlayContainer], (container: OverlayContainer) => {\n    overlayRef.dispose();\n    document.body.removeChild(forceScrollElement);\n    window.scroll(0, 0);\n    container.getContainerElement().parentNode!.removeChild(container.getContainerElement());\n  }));\n\n  it('should toggle scroll blocking along the y axis', skipIOS(() => {\n    window.scroll(0, 100);\n    expect(viewport.getViewportScrollPosition().top)\n        .toBe(100, 'Expected viewport to be scrollable initially.');\n\n    overlayRef.attach(componentPortal);\n    expect(documentElement.style.top)\n        .toBe('-100px', 'Expected <html> element to be offset by the previous scroll amount.');\n\n    window.scroll(0, 300);\n    expect(viewport.getViewportScrollPosition().top)\n        .toBe(100, 'Expected the viewport not to scroll.');\n\n    overlayRef.detach();\n    expect(viewport.getViewportScrollPosition().top)\n        .toBe(100, 'Expected old scroll position to have bee restored after disabling.');\n\n    window.scroll(0, 300);\n    expect(viewport.getViewportScrollPosition().top)\n        .toBe(300, 'Expected user to be able to scroll after disabling.');\n  }));\n\n\n  it('should toggle scroll blocking along the x axis', skipIOS(() => {\n    forceScrollElement.style.height = '100px';\n    forceScrollElement.style.width = '3000px';\n\n    window.scroll(100, 0);\n    expect(viewport.getViewportScrollPosition().left)\n        .toBe(100, 'Expected viewport to be scrollable initially.');\n\n    overlayRef.attach(componentPortal);\n    expect(documentElement.style.left)\n        .toBe('-100px', 'Expected <html> element to be offset by the previous scroll amount.');\n\n    window.scroll(300, 0);\n    expect(viewport.getViewportScrollPosition().left)\n        .toBe(100, 'Expected the viewport not to scroll.');\n\n    overlayRef.detach();\n    expect(viewport.getViewportScrollPosition().left)\n        .toBe(100, 'Expected old scroll position to have bee restored after disabling.');\n\n    window.scroll(300, 0);\n    expect(viewport.getViewportScrollPosition().left)\n        .toBe(300, 'Expected user to be able to scroll after disabling.');\n  }));\n\n\n  it('should toggle the `cdk-global-scrollblock` class', skipIOS(() => {\n    expect(documentElement.classList).not.toContain('cdk-global-scrollblock');\n\n    overlayRef.attach(componentPortal);\n    expect(documentElement.classList).toContain('cdk-global-scrollblock');\n\n    overlayRef.detach();\n    expect(documentElement.classList).not.toContain('cdk-global-scrollblock');\n  }));\n\n  it('should restore any previously-set inline styles', skipIOS(() => {\n    const root = documentElement;\n\n    root.style.top = '13px';\n    root.style.left = '37px';\n\n    overlayRef.attach(componentPortal);\n\n    expect(root.style.top).not.toBe('13px');\n    expect(root.style.left).not.toBe('37px');\n\n    overlayRef.detach();\n\n    expect(root.style.top).toBe('13px');\n    expect(root.style.left).toBe('37px');\n\n    root.style.top = '';\n    root.style.left = '';\n  }));\n\n  it(`should't do anything if the page isn't scrollable`, skipIOS(() => {\n    forceScrollElement.style.display = 'none';\n    overlayRef.attach(componentPortal);\n    expect(documentElement.classList).not.toContain('cdk-global-scrollblock');\n  }));\n\n\n  it('should keep the content width', () => {\n    forceScrollElement.style.width = '100px';\n\n    const previousContentWidth = documentElement.getBoundingClientRect().width;\n\n    overlayRef.attach(componentPortal);\n\n    expect(documentElement.getBoundingClientRect().width).toBe(previousContentWidth);\n  });\n\n  it('should not clobber user-defined scroll-behavior', skipIOS(() => {\n    const root = documentElement;\n    const body = document.body;\n    const rootStyle = root.style as CSSStyleDeclaration & {scrollBehavior: string};\n    const bodyStyle = body.style as CSSStyleDeclaration & {scrollBehavior: string};\n\n    rootStyle.scrollBehavior = bodyStyle.scrollBehavior = 'smooth';\n\n    // Get the value via the style declaration in order to\n    // handle browsers that don't support the property yet.\n    const initialRootValue = rootStyle.scrollBehavior;\n    const initialBodyValue = rootStyle.scrollBehavior;\n\n    overlayRef.attach(componentPortal);\n    overlayRef.detach();\n\n    expect(rootStyle.scrollBehavior).toBe(initialRootValue);\n    expect(bodyStyle.scrollBehavior).toBe(initialBodyValue);\n\n    // Avoid bleeding styles into other tests.\n    rootStyle.scrollBehavior = bodyStyle.scrollBehavior = '';\n  }));\n\n  /**\n   * Skips the specified test, if it is being executed on iOS. This is necessary, because\n   * programmatic scrolling inside the Karma iframe doesn't work on iOS, which renders these\n   * tests unusable. For example, something as basic as the following won't work:\n   * ```\n   * window.scroll(0, 100);\n   * expect(viewport.getViewportScrollPosition().top).toBe(100);\n   * ```\n   * @param spec Test to be executed or skipped.\n   */\n  function skipIOS(spec: Function) {\n    return () => {\n      if (!platform.IOS) {\n        spec();\n      }\n    };\n  }\n\n});\n\n\n/** Simple component that we can attach to the overlay. */\n@Component({template: '<p>Focaccia</p>'})\nclass FocacciaMsg { }\n\n\n/** Test module to hold the component. */\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  declarations: [FocacciaMsg],\n  entryComponents: [FocacciaMsg],\n})\nclass OverlayTestModule { }\n"]}