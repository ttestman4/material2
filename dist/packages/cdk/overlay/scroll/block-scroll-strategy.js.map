{"version":3,"file":"block-scroll-strategy.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts"],"names":[],"mappings":";;;;;;;;;;;AAUA,OAAO,EAAC,mBAAmB,EAAC,MAAM,uBAAuB,CAAC;;;;AAY1D,MAAM,OAAO,mBAAmB;;;;;IAM9B,YAAoB,cAA6B,EAAE,QAAa;QAA5C,mBAAc,GAAd,cAAc,CAAe;QALzC,wBAAmB,GAAG,EAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC;QAE1C,eAAU,GAAG,KAAK,CAAC;QAIzB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;;;;;IAGD,MAAM,KAAK,CAAC;;;;;IAGZ,MAAM;QACJ,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;;kBAClB,IAAI,GAAG,mBAAA,IAAI,CAAC,SAAS,CAAC,eAAe,EAAC;YAE5C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;YAE/E,kEAAkE;YAClE,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;YACtD,IAAI,CAAC,mBAAmB,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC;YAEpD,mFAAmF;YACnF,gFAAgF;YAChF,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YAC1E,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;YACxE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;IACH,CAAC;;;;;IAGD,OAAO;QACL,IAAI,IAAI,CAAC,UAAU,EAAE;;kBACb,IAAI,GAAG,mBAAA,IAAI,CAAC,SAAS,CAAC,eAAe,EAAC;;kBACtC,IAAI,GAAG,mBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAC;;kBAC3B,SAAS,GAAG,mBAAA,IAAI,CAAC,KAAK,EAAqC;;kBAC3D,SAAS,GAAG,mBAAA,IAAI,CAAC,KAAK,EAAqC;;kBAC3D,0BAA0B,GAAG,SAAS,CAAC,cAAc,IAAI,EAAE;;kBAC3D,0BAA0B,GAAG,SAAS,CAAC,cAAc,IAAI,EAAE;YAEjE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YAExB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC/C,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;YAC7C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;YAEhD,0FAA0F;YAC1F,uEAAuE;YACvE,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,GAAG,MAAM,CAAC;YAE7D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;YAEnF,SAAS,CAAC,cAAc,GAAG,0BAA0B,CAAC;YACtD,SAAS,CAAC,cAAc,GAAG,0BAA0B,CAAC;SACvD;IACH,CAAC;;;;;IAEO,aAAa;;;;;cAIb,IAAI,GAAG,mBAAA,IAAI,CAAC,SAAS,CAAC,eAAe,EAAC;QAE5C,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,wBAAwB,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;;cAEK,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI;;cAC1B,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE;QACtD,OAAO,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC;IAClF,CAAC;CACF;;;;;;IAzEC,kDAAkD;;;;;IAClD,sDAA+D;;;;;IAC/D,yCAA2B;;;;;IAC3B,wCAA4B;;;;;IAEhB,6CAAqC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n"]}