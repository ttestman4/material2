{"version":3,"file":"scroll-strategy-options.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,gBAAgB,EAAE,aAAa,EAAC,MAAM,wBAAwB,CAAC;AACvE,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AACzD,OAAO,EAAC,mBAAmB,EAAC,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAC,mBAAmB,EAA4B,MAAM,yBAAyB,CAAC;AACvF,OAAO,EAAC,kBAAkB,EAAC,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EACL,wBAAwB,GAEzB,MAAM,8BAA8B,CAAC;;;;;;;;;;AAUtC,MAAM,OAAO,qBAAqB;;;;;;;IAGhC,YACU,iBAAmC,EACnC,cAA6B,EAC7B,OAAe,EACL,QAAa;QAHvB,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,mBAAc,GAAd,cAAc,CAAe;QAC7B,YAAO,GAAP,OAAO,CAAQ;;;;QAMzB,SAAI,GAAG,GAAG,EAAE,CAAC,IAAI,kBAAkB,EAAE,CAAC;;;;;QAMtC,UAAK,GAAG,CAAC,MAAkC,EAAE,EAAE,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,EAC1F,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAA;;;;QAG9C,UAAK,GAAG,GAAG,EAAE,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;;;;;;QAO3E,eAAU,GAAG,CAAC,MAAuC,EAAE,EAAE,CAAC,IAAI,wBAAwB,CAClF,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;QAtBlE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;;;YAVJ,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;YAlBxB,gBAAgB;YAAE,aAAa;YAEX,MAAM;4CAwB7B,MAAM,SAAC,QAAQ;;;;;;;;IANlB,0CAA4B;;;;;IAW5B,qCAAsC;;;;;;IAMtC,sCAC8C;;;;;IAG9C,sCAA2E;;;;;;;IAO3E,2CACsE;;;;;IA1BpE,kDAA2C;;;;;IAC3C,+CAAqC;;;;;IACrC,wCAAuB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n"]}