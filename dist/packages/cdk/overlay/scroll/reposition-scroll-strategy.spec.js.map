{"version":3,"file":"reposition-scroll-strategy.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, inject, TestBed} from '@angular/core/testing';\nimport {Component, NgModule} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {ComponentPortal, PortalModule} from '@angular/cdk/portal';\nimport {\n  Overlay,\n  OverlayContainer,\n  OverlayModule,\n  OverlayRef,\n  OverlayConfig,\n  ScrollDispatcher,\n} from '../index';\n\n\ndescribe('RepositionScrollStrategy', () => {\n  let overlayRef: OverlayRef;\n  let overlay: Overlay;\n  let componentPortal: ComponentPortal<PastaMsg>;\n  let scrolledSubject = new Subject();\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [OverlayModule, PortalModule, OverlayTestModule],\n      providers: [\n        {provide: ScrollDispatcher, useFactory: () => ({\n          scrolled: () => scrolledSubject.asObservable()\n        })}\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(inject([Overlay], (o: Overlay) => {\n    overlay = o;\n    componentPortal = new ComponentPortal(PastaMsg);\n  }));\n\n  afterEach(inject([OverlayContainer], (container: OverlayContainer) => {\n    overlayRef.dispose();\n    container.getContainerElement().parentNode!.removeChild(container.getContainerElement());\n  }));\n\n  it('should update the overlay position when the page is scrolled', () => {\n    const overlayConfig = new OverlayConfig({\n      scrollStrategy: overlay.scrollStrategies.reposition()\n    });\n\n    overlayRef = overlay.create(overlayConfig);\n    overlayRef.attach(componentPortal);\n    spyOn(overlayRef, 'updatePosition');\n\n    scrolledSubject.next();\n    expect(overlayRef.updatePosition).toHaveBeenCalledTimes(1);\n\n    scrolledSubject.next();\n    expect(overlayRef.updatePosition).toHaveBeenCalledTimes(2);\n  });\n\n  it('should not be updating the position after the overlay is detached', () => {\n    const overlayConfig = new OverlayConfig({\n      scrollStrategy: overlay.scrollStrategies.reposition()\n    });\n\n    overlayRef = overlay.create(overlayConfig);\n    overlayRef.attach(componentPortal);\n    spyOn(overlayRef, 'updatePosition');\n\n    overlayRef.detach();\n    scrolledSubject.next();\n\n    expect(overlayRef.updatePosition).not.toHaveBeenCalled();\n  });\n\n  it('should not be updating the position after the overlay is destroyed', () => {\n    const overlayConfig = new OverlayConfig({\n      scrollStrategy: overlay.scrollStrategies.reposition()\n    });\n\n    overlayRef = overlay.create(overlayConfig);\n    overlayRef.attach(componentPortal);\n    spyOn(overlayRef, 'updatePosition');\n\n    overlayRef.dispose();\n    scrolledSubject.next();\n\n    expect(overlayRef.updatePosition).not.toHaveBeenCalled();\n  });\n\n  it('should be able to close the overlay once it is out of view', () => {\n    const overlayConfig = new OverlayConfig({\n      scrollStrategy: overlay.scrollStrategies.reposition({\n        autoClose: true\n      })\n    });\n\n    overlayRef = overlay.create(overlayConfig);\n    overlayRef.attach(componentPortal);\n    spyOn(overlayRef, 'updatePosition');\n    spyOn(overlayRef, 'detach');\n    spyOn(overlayRef.overlayElement, 'getBoundingClientRect').and.returnValue({\n      top: -1000,\n      bottom: -900,\n      left: 0,\n      right: 100,\n      width: 100,\n      height: 100\n    });\n\n    scrolledSubject.next();\n    expect(overlayRef.detach).toHaveBeenCalledTimes(1);\n  });\n\n});\n\n\n/** Simple component that we can attach to the overlay. */\n@Component({template: '<p>Pasta</p>'})\nclass PastaMsg { }\n\n\n/** Test module to hold the component. */\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  declarations: [PastaMsg],\n  entryComponents: [PastaMsg],\n})\nclass OverlayTestModule { }\n"]}