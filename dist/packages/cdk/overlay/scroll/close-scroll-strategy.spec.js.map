{"version":3,"file":"close-scroll-strategy.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/overlay/scroll/close-scroll-strategy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, TestBed, fakeAsync} from '@angular/core/testing';\nimport {NgModule, Component, NgZone} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {ComponentPortal, PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  OverlayModule,\n  OverlayContainer,\n} from '../index';\n\n\ndescribe('CloseScrollStrategy', () => {\n  let overlayRef: OverlayRef;\n  let componentPortal: ComponentPortal<MozarellaMsg>;\n  let scrolledSubject = new Subject();\n  let scrollPosition: number;\n\n  beforeEach(fakeAsync(() => {\n    scrollPosition = 0;\n\n    TestBed.configureTestingModule({\n      imports: [OverlayModule, PortalModule, OverlayTestModule],\n      providers: [\n        {provide: ScrollDispatcher, useFactory: () => ({\n          scrolled: () => scrolledSubject.asObservable()\n        })},\n        {provide: ViewportRuler, useFactory: () => ({\n          getViewportScrollPosition: () => ({top: scrollPosition})\n        })}\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(inject([Overlay], (overlay: Overlay) => {\n    let overlayConfig = new OverlayConfig({scrollStrategy: overlay.scrollStrategies.close()});\n    overlayRef = overlay.create(overlayConfig);\n    componentPortal = new ComponentPortal(MozarellaMsg);\n  }));\n\n  afterEach(inject([OverlayContainer], (container: OverlayContainer) => {\n    overlayRef.dispose();\n    container.getContainerElement().parentNode!.removeChild(container.getContainerElement());\n  }));\n\n  it('should detach the overlay as soon as the user scrolls', () => {\n    overlayRef.attach(componentPortal);\n    spyOn(overlayRef, 'detach');\n\n    scrolledSubject.next();\n    expect(overlayRef.detach).toHaveBeenCalled();\n  });\n\n  it('should not attempt to detach the overlay after it has been detached', () => {\n    overlayRef.attach(componentPortal);\n    overlayRef.detach();\n\n    spyOn(overlayRef, 'detach');\n    scrolledSubject.next();\n\n    expect(overlayRef.detach).not.toHaveBeenCalled();\n  });\n\n  it('should detach inside the NgZone', () => {\n    const spy = jasmine.createSpy('detachment spy');\n    const subscription = overlayRef.detachments().subscribe(() => spy(NgZone.isInAngularZone()));\n\n    overlayRef.attach(componentPortal);\n    scrolledSubject.next();\n\n    expect(spy).toHaveBeenCalledWith(true);\n    subscription.unsubscribe();\n  });\n\n  it('should be able to reposition the overlay up to a certain threshold before closing',\n    inject([Overlay], (overlay: Overlay) => {\n      overlayRef.dispose();\n\n      overlayRef = overlay.create({\n        scrollStrategy: overlay.scrollStrategies.close({threshold: 50})\n      });\n\n      overlayRef.attach(componentPortal);\n      spyOn(overlayRef, 'updatePosition');\n      spyOn(overlayRef, 'detach');\n\n      for (let i = 0; i < 50; i++) {\n        scrollPosition++;\n        scrolledSubject.next();\n      }\n\n      expect(overlayRef.updatePosition).toHaveBeenCalledTimes(50);\n      expect(overlayRef.detach).not.toHaveBeenCalled();\n\n      scrollPosition++;\n      scrolledSubject.next();\n\n      expect(overlayRef.detach).toHaveBeenCalledTimes(1);\n    }));\n\n    it('should not close if the user starts scrolling away and comes back',\n      inject([Overlay], (overlay: Overlay) => {\n        overlayRef.dispose();\n        scrollPosition = 100;\n\n        overlayRef = overlay.create({\n          scrollStrategy: overlay.scrollStrategies.close({threshold: 50})\n        });\n\n        overlayRef.attach(componentPortal);\n        spyOn(overlayRef, 'updatePosition');\n        spyOn(overlayRef, 'detach');\n\n        // Scroll down 30px.\n        for (let i = 0; i < 30; i++) {\n          scrollPosition++;\n          scrolledSubject.next();\n        }\n\n        // Scroll back up 30px.\n        for (let i = 0; i < 30; i++) {\n          scrollPosition--;\n          scrolledSubject.next();\n        }\n\n        expect(overlayRef.updatePosition).toHaveBeenCalledTimes(60);\n        expect(overlayRef.detach).not.toHaveBeenCalled();\n      }));\n});\n\n\n/** Simple component that we can attach to the overlay. */\n@Component({template: '<p>Mozarella</p>'})\nclass MozarellaMsg { }\n\n\n/** Test module to hold the component. */\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  declarations: [MozarellaMsg],\n  entryComponents: [MozarellaMsg],\n})\nclass OverlayTestModule { }\n"]}