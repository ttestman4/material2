{"version":3,"file":"aria-reference.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/aria-describer/aria-reference.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\ndescribe('AriaReference', () => {\n  let testElement: HTMLElement | null;\n\n  beforeEach(() => {\n    testElement = document.createElement('div');\n    document.body.appendChild(testElement);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(testElement!);\n  });\n\n  it('should be able to append/remove aria reference IDs', () => {\n    addAriaReferencedId(testElement!, 'aria-describedby', 'reference_1');\n    expectIds('aria-describedby', ['reference_1']);\n\n    addAriaReferencedId(testElement!, 'aria-describedby', 'reference_2');\n    expectIds('aria-describedby', ['reference_1', 'reference_2']);\n\n    removeAriaReferencedId(testElement!, 'aria-describedby', 'reference_1');\n    expectIds('aria-describedby', ['reference_2']);\n\n    removeAriaReferencedId(testElement!, 'aria-describedby', 'reference_2');\n    expectIds('aria-describedby', []);\n  });\n\n  it('should trim whitespace when adding/removing reference IDs', () => {\n    addAriaReferencedId(testElement!, 'aria-describedby', '    reference_1   ');\n    addAriaReferencedId(testElement!, 'aria-describedby', '    reference_2   ');\n    expectIds('aria-describedby', ['reference_1', 'reference_2']);\n\n    removeAriaReferencedId(testElement!, 'aria-describedby', '   reference_1   ');\n    expectIds('aria-describedby', ['reference_2']);\n\n    removeAriaReferencedId(testElement!, 'aria-describedby', '   reference_2   ');\n    expectIds('aria-describedby', []);\n  });\n\n  it('should ignore empty string', () => {\n    addAriaReferencedId(testElement!, 'aria-describedby', '  ');\n    expectIds('aria-describedby', []);\n  });\n\n  it('should not add the same reference id if it already exists', () => {\n    addAriaReferencedId(testElement!, 'aria-describedby', 'reference_1');\n    addAriaReferencedId(testElement!, 'aria-describedby', 'reference_1');\n    expect(['reference_1']);\n  });\n\n  it('should retrieve ids that are deliminated by extra whitespace', () => {\n    testElement!.setAttribute('aria-describedby', 'reference_1      reference_2');\n    expect(getAriaReferenceIds(testElement!, 'aria-describedby'))\n        .toEqual(['reference_1', 'reference_2']);\n  });\n\n  /**\n   * Expects the equal array from getAriaReferenceIds and a space-deliminated list from\n   * the actual element attribute. If ids is empty, assumes the element should not have any\n   * value\n   */\n  function expectIds(attr: string, ids: string[]) {\n    expect(getAriaReferenceIds(testElement!, attr)).toEqual(ids);\n    expect(testElement!.getAttribute(attr)).toBe(ids.length ? ids.join(' ') : '');\n  }\n});\n"]}