{"version":3,"file":"live-announcer.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/a11y/live-announcer/live-announcer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {MutationObserverFactory} from '@angular/cdk/observers';\nimport {Component, Input} from '@angular/core';\nimport {ComponentFixture, fakeAsync, flush, inject, TestBed, tick} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {A11yModule} from '../index';\nimport {LiveAnnouncer} from './live-announcer';\nimport {LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer-token';\n\n\ndescribe('LiveAnnouncer', () => {\n  let announcer: LiveAnnouncer;\n  let ariaLiveElement: Element;\n  let fixture: ComponentFixture<TestApp>;\n\n  describe('with default element', () => {\n    beforeEach(() => TestBed.configureTestingModule({\n      imports: [A11yModule],\n      declarations: [TestApp],\n    }));\n\n    beforeEach(fakeAsync(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\n      announcer = la;\n      ariaLiveElement = getLiveElement();\n      fixture = TestBed.createComponent(TestApp);\n    })));\n\n    afterEach(() => {\n      // In our tests we always remove the current live element, in\n      // order to avoid having multiple announcer elements in the DOM.\n      announcer.ngOnDestroy();\n    });\n\n    it('should correctly update the announce text', fakeAsync(() => {\n      let buttonElement = fixture.debugElement.query(By.css('button')).nativeElement;\n      buttonElement.click();\n\n      // This flushes our 100ms timeout for the screenreaders.\n      tick(100);\n\n      expect(ariaLiveElement.textContent).toBe('Test');\n    }));\n\n    it('should correctly update the politeness attribute', fakeAsync(() => {\n      announcer.announce('Hey Google', 'assertive');\n\n      // This flushes our 100ms timeout for the screenreaders.\n      tick(100);\n\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\n      expect(ariaLiveElement.getAttribute('aria-live')).toBe('assertive');\n    }));\n\n    it('should apply the aria-live value polite by default', fakeAsync(() => {\n      announcer.announce('Hey Google');\n\n      // This flushes our 100ms timeout for the screenreaders.\n      tick(100);\n\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\n      expect(ariaLiveElement.getAttribute('aria-live')).toBe('polite');\n    }));\n\n    it('should be able to clear out the aria-live element manually', fakeAsync(() => {\n      announcer.announce('Hey Google');\n      tick(100);\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\n\n      announcer.clear();\n      expect(ariaLiveElement.textContent).toBeFalsy();\n    }));\n\n    it('should be able to clear out the aria-live element by setting a duration', fakeAsync(() => {\n      announcer.announce('Hey Google', 2000);\n      tick(100);\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\n\n      tick(2000);\n      expect(ariaLiveElement.textContent).toBeFalsy();\n    }));\n\n    it('should clear the duration of previous messages when announcing a new one', fakeAsync(() => {\n      announcer.announce('Hey Google', 2000);\n      tick(100);\n      expect(ariaLiveElement.textContent).toBe('Hey Google');\n\n      announcer.announce('Hello there');\n      tick(2500);\n      expect(ariaLiveElement.textContent).toBe('Hello there');\n    }));\n\n    it('should remove the aria-live element from the DOM on destroy', fakeAsync(() => {\n      announcer.announce('Hey Google');\n\n      // This flushes our 100ms timeout for the screenreaders.\n      tick(100);\n\n      // Call the lifecycle hook manually since Angular won't do it in tests.\n      announcer.ngOnDestroy();\n\n      expect(document.body.querySelector('.cdk-live-announcer-element'))\n          .toBeFalsy('Expected that the aria-live element was remove from the DOM.');\n    }));\n\n    it('should return a promise that resolves after the text has been announced', fakeAsync(() => {\n      const spy = jasmine.createSpy('announce spy');\n      announcer.announce('something').then(spy);\n\n      expect(spy).not.toHaveBeenCalled();\n      tick(100);\n      expect(spy).toHaveBeenCalled();\n    }));\n\n    it('should ensure that there is only one live element at a time', fakeAsync(() => {\n      announcer.ngOnDestroy();\n      fixture.destroy();\n\n      TestBed.resetTestingModule().configureTestingModule({\n        imports: [A11yModule],\n        declarations: [TestApp],\n      });\n\n      const extraElement = document.createElement('div');\n      extraElement.classList.add('cdk-live-announcer-element');\n      document.body.appendChild(extraElement);\n\n      inject([LiveAnnouncer], (la: LiveAnnouncer) => {\n        announcer = la;\n        ariaLiveElement = getLiveElement();\n        fixture = TestBed.createComponent(TestApp);\n      })();\n\n      announcer.announce('Hey Google');\n      tick(100);\n\n      expect(document.body.querySelectorAll('.cdk-live-announcer-element').length)\n          .toBe(1, 'Expected only one live announcer element in the DOM.');\n    }));\n\n    it('should clear any previous timers when a new one is started', fakeAsync(() => {\n      expect(ariaLiveElement.textContent).toBeFalsy();\n\n      announcer.announce('One');\n      tick(50);\n\n      announcer.announce('Two');\n      tick(75);\n\n      expect(ariaLiveElement.textContent).toBeFalsy();\n\n      tick(25);\n\n      expect(ariaLiveElement.textContent).toBe('Two');\n    }));\n\n    it('should clear pending timeouts on destroy', fakeAsync(() => {\n      announcer.announce('Hey Google');\n      announcer.ngOnDestroy();\n\n      // Since we're testing whether the timeouts were flushed, we don't need any\n      // assertions here. `fakeAsync` will fail the test if a timer was left over.\n    }));\n\n  });\n\n  describe('with a custom element', () => {\n    let customLiveElement: HTMLElement;\n\n    beforeEach(() => {\n      customLiveElement = document.createElement('div');\n\n      return TestBed.configureTestingModule({\n        imports: [A11yModule],\n        declarations: [TestApp],\n        providers: [{provide: LIVE_ANNOUNCER_ELEMENT_TOKEN, useValue: customLiveElement}],\n      });\n    });\n\n    beforeEach(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\n      announcer = la;\n      ariaLiveElement = getLiveElement();\n    }));\n\n    it('should allow to use a custom live element', fakeAsync(() => {\n      announcer.announce('Custom Element');\n\n      // This flushes our 100ms timeout for the screenreaders.\n      tick(100);\n\n      expect(customLiveElement.textContent).toBe('Custom Element');\n    }));\n  });\n});\n\ndescribe('CdkAriaLive', () => {\n  let mutationCallbacks: Function[] = [];\n  let announcer: LiveAnnouncer;\n  let announcerSpy: jasmine.Spy;\n  let fixture: ComponentFixture<DivWithCdkAriaLive>;\n\n  const invokeMutationCallbacks = () => mutationCallbacks.forEach(cb => cb());\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [A11yModule],\n      declarations: [DivWithCdkAriaLive],\n      providers: [{\n        provide: MutationObserverFactory,\n        useValue: {\n          create: (callback: Function) => {\n            mutationCallbacks.push(callback);\n\n            return {\n              observe: () => {},\n              disconnect: () => {}\n            };\n          }\n        }\n      }]\n    });\n  }));\n\n  beforeEach(fakeAsync(inject([LiveAnnouncer], (la: LiveAnnouncer) => {\n    announcer = la;\n    announcerSpy = spyOn(la, 'announce').and.callThrough();\n    fixture = TestBed.createComponent(DivWithCdkAriaLive);\n    fixture.detectChanges();\n    flush();\n  })));\n\n  afterEach(fakeAsync(() => {\n    // In our tests we always remove the current live element, in\n    // order to avoid having multiple announcer elements in the DOM.\n    announcer.ngOnDestroy();\n  }));\n\n  it('should dynamically update the politeness', fakeAsync(() => {\n    fixture.componentInstance.content = 'New content';\n    fixture.detectChanges();\n    invokeMutationCallbacks();\n    flush();\n\n    expect(announcer.announce).toHaveBeenCalledWith('New content', 'polite');\n\n    announcerSpy.calls.reset();\n    fixture.componentInstance.politeness = 'off';\n    fixture.componentInstance.content = 'Newer content';\n    fixture.detectChanges();\n    invokeMutationCallbacks();\n    flush();\n\n    expect(announcer.announce).not.toHaveBeenCalled();\n\n    announcerSpy.calls.reset();\n    fixture.componentInstance.politeness = 'assertive';\n    fixture.componentInstance.content = 'Newest content';\n    fixture.detectChanges();\n    invokeMutationCallbacks();\n    flush();\n\n    expect(announcer.announce).toHaveBeenCalledWith('Newest content', 'assertive');\n  }));\n\n  it('should not announce the same text multiple times', fakeAsync(() => {\n    fixture.componentInstance.content = 'Content';\n    fixture.detectChanges();\n    invokeMutationCallbacks();\n    flush();\n\n    expect(announcer.announce).toHaveBeenCalledTimes(1);\n\n    fixture.detectChanges();\n    invokeMutationCallbacks();\n    flush();\n\n    expect(announcer.announce).toHaveBeenCalledTimes(1);\n  }));\n\n});\n\n\nfunction getLiveElement(): Element {\n  return document.body.querySelector('.cdk-live-announcer-element')!;\n}\n\n@Component({template: `<button (click)=\"announceText('Test')\">Announce</button>`})\nclass TestApp {\n  constructor(public live: LiveAnnouncer) { }\n\n  announceText(message: string) {\n    this.live.announce(message);\n  }\n}\n\n@Component({template: `<div [cdkAriaLive]=\"politeness\">{{content}}</div>`})\nclass DivWithCdkAriaLive {\n  @Input() politeness = 'polite';\n  @Input() content = 'Initial content';\n}\n"]}