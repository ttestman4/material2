{"version":3,"file":"dir.js","sourceRoot":"","sources":["../../../../src/cdk/bidi/dir.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EACL,SAAS,EACT,MAAM,EACN,KAAK,EACL,YAAY,GAGb,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAY,cAAc,EAAC,MAAM,kBAAkB,CAAC;;;;;;;AAc3D,MAAM,OAAO,GAAG;IANhB;;;;QAQU,SAAI,GAAc,KAAK,CAAC;;;;QAGxB,mBAAc,GAAY,KAAK,CAAC;;;;QAMnB,WAAM,GAAG,IAAI,YAAY,EAAa,CAAC;IA2B9D,CAAC;;;;;IAxBC,IACI,GAAG,KAAgB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;IAC1C,IAAI,GAAG,CAAC,KAAgB;;cAChB,GAAG,GAAG,IAAI,CAAC,IAAI;QAErB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAEjE,IAAI,GAAG,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;IACH,CAAC;;;;;IAGD,IAAI,KAAK,KAAgB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;IAG3C,kBAAkB;QAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;;;YA3CF,SAAS,SAAC;gBACT,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,EAAC,CAAC;gBACxD,IAAI,EAAE,EAAC,YAAY,EAAE,SAAS,EAAC;gBAC/B,QAAQ,EAAE,KAAK;aAChB;;;qBAYE,MAAM,SAAC,WAAW;kBAGlB,KAAK;;;;;;;;IAZN,mBAAgC;;;;;;IAGhC,6BAAwC;;;;;IAGxC,sBAAgB;;;;;IAGhB,qBAA4D","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Output,\n  Input,\n  EventEmitter,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport {Direction, Directionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction { return this._dir; }\n  set dir(value: Direction) {\n    const old = this._dir;\n\n    this._rawDir = value;\n    this._dir = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction { return this.dir; }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n\n"]}