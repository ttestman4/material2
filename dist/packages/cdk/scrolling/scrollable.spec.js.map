{"version":3,"file":"scrollable.spec.js","sourceRoot":"","sources":["../../../../src/cdk/scrolling/scrollable.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Direction} from '@angular/cdk/bidi';\nimport {CdkScrollable, ScrollingModule} from '@angular/cdk/scrolling';\nimport {Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\n\nfunction expectOverlapping(el1: ElementRef<Element>, el2: ElementRef<Element>, expected = true) {\n  const r1 = el1.nativeElement.getBoundingClientRect();\n  const r2 = el2.nativeElement.getBoundingClientRect();\n  const actual =\n      r1.left < r2.right && r1.right > r2.left && r1.top < r2.bottom && r1.bottom > r2.top;\n  if (expected) {\n    expect(actual)\n        .toBe(expected, `${JSON.stringify(r1)} should overlap with ${JSON.stringify(r2)}`);\n  } else {\n    expect(actual)\n        .toBe(expected, `${JSON.stringify(r1)} should not overlap with ${JSON.stringify(r2)}`);\n  }\n}\n\ndescribe('CdkScrollable', () => {\n  let fixture: ComponentFixture<ScrollableViewport>;\n  let testComponent: ScrollableViewport;\n  let maxOffset = 0;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ScrollingModule],\n      declarations: [ScrollableViewport],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ScrollableViewport);\n    testComponent = fixture.componentInstance;\n  });\n\n  describe('in LTR context', () => {\n    beforeEach(() => {\n      fixture.detectChanges();\n      maxOffset = testComponent.scrollContainer.nativeElement.scrollHeight -\n          testComponent.scrollContainer.nativeElement.clientHeight;\n    });\n\n    it('should initially be scrolled to top-left', () => {\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n\n    it('should scrollTo top-left', () => {\n      testComponent.scrollable.scrollTo({top: 0, left: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n\n    it('should scrollTo bottom-right', () => {\n      testComponent.scrollable.scrollTo({bottom: 0, right: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, true);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(0);\n    });\n\n    it('should scroll to top-end', () => {\n      testComponent.scrollable.scrollTo({top: 0, end: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(0);\n    });\n\n    it('should scroll to bottom-start', () => {\n      testComponent.scrollable.scrollTo({bottom: 0, start: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n  });\n\n  describe('in RTL context', () => {\n    beforeEach(() => {\n      testComponent.dir = 'rtl';\n      fixture.detectChanges();\n      maxOffset = testComponent.scrollContainer.nativeElement.scrollHeight -\n          testComponent.scrollContainer.nativeElement.clientHeight;\n    });\n\n    it('should initially be scrolled to top-right', () => {\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n\n    it('should scrollTo top-left', () => {\n      testComponent.scrollable.scrollTo({top: 0, left: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(0);\n    });\n\n    it('should scrollTo bottom-right', () => {\n      testComponent.scrollable.scrollTo({bottom: 0, right: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n\n    it('should scroll to top-end', () => {\n      testComponent.scrollable.scrollTo({top: 0, end: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(0);\n    });\n\n    it('should scroll to bottom-start', () => {\n      testComponent.scrollable.scrollTo({bottom: 0, start: 0});\n\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowStart, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.firstRowEnd, false);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowStart, true);\n      expectOverlapping(testComponent.scrollContainer, testComponent.lastRowEnd, false);\n\n      expect(testComponent.scrollable.measureScrollOffset('top')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('bottom')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('left')).toBe(maxOffset);\n      expect(testComponent.scrollable.measureScrollOffset('right')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('start')).toBe(0);\n      expect(testComponent.scrollable.measureScrollOffset('end')).toBe(maxOffset);\n    });\n  });\n});\n\n@Component({\n  template: `\n    <div #scrollContainer class=\"scroll-container\" cdkScrollable [dir]=\"dir\">\n      <div class=\"row\">\n        <div #firstRowStart class=\"cell\"></div>\n        <div #firstRowEnd class=\"cell\"></div>\n      </div>\n      <div class=\"row\">\n        <div #lastRowStart class=\"cell\"></div>\n        <div #lastRowEnd class=\"cell\"></div>\n      </div>\n    </div>`,\n  styles: [`\n    .scroll-container {\n      width: 100px;\n      height: 100px;\n      overflow: auto;\n    }\n\n    .row {\n      display: flex;\n      flex-direction: row;\n    }\n\n    .cell {\n      flex: none;\n      width: 100px;\n      height: 100px;\n    }\n  `]\n})\nclass ScrollableViewport {\n  @Input() dir: Direction;\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n  @ViewChild('scrollContainer') scrollContainer: ElementRef<Element>;\n  @ViewChild('firstRowStart') firstRowStart: ElementRef<Element>;\n  @ViewChild('firstRowEnd') firstRowEnd: ElementRef<Element>;\n  @ViewChild('lastRowStart') lastRowStart: ElementRef<Element>;\n  @ViewChild('lastRowEnd') lastRowEnd: ElementRef<Element>;\n}\n"]}