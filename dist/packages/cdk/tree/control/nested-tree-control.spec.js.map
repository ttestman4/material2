{"version":3,"file":"nested-tree-control.spec.js","sourceRoot":"","sources":["../../../../../src/cdk/tree/control/nested-tree-control.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {fakeAsync, flush} from '@angular/core/testing';\nimport {of as observableOf} from 'rxjs';\nimport {NestedTreeControl} from './nested-tree-control';\n\n\ndescribe('CdkNestedTreeControl', () => {\n  let treeControl: NestedTreeControl<TestData>;\n  let getChildren = (node: TestData) => observableOf(node.children);\n\n  beforeEach(() => {\n    treeControl = new NestedTreeControl<TestData>(getChildren);\n  });\n\n  describe('base tree control actions', () => {\n    it('should be able to expand and collapse dataNodes', () => {\n      const nodes = generateData(10, 4);\n      const node = nodes[1];\n      const sixthNode = nodes[5];\n      treeControl.dataNodes = nodes;\n\n      treeControl.expand(node);\n\n\n      expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to be expanded');\n      expect(treeControl.expansionModel.selected)\n        .toContain(node, 'Expect second node in expansionModel');\n      expect(treeControl.expansionModel.selected.length)\n        .toBe(1, 'Expect only second node in expansionModel');\n\n      treeControl.toggle(sixthNode);\n\n      expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to stay expanded');\n      expect(treeControl.expansionModel.selected)\n        .toContain(sixthNode, 'Expect sixth node in expansionModel');\n      expect(treeControl.expansionModel.selected)\n        .toContain(node, 'Expect second node in expansionModel');\n      expect(treeControl.expansionModel.selected.length)\n        .toBe(2, 'Expect two dataNodes in expansionModel');\n\n      treeControl.collapse(node);\n\n      expect(treeControl.isExpanded(node)).toBeFalsy('Expect second node to be collapsed');\n      expect(treeControl.expansionModel.selected.length)\n        .toBe(1, 'Expect one node in expansionModel');\n      expect(treeControl.isExpanded(sixthNode)).toBeTruthy('Expect sixth node to stay expanded');\n      expect(treeControl.expansionModel.selected)\n        .toContain(sixthNode, 'Expect sixth node in expansionModel');\n    });\n\n    it('should toggle descendants correctly', () => {\n      const numNodes = 10;\n      const numChildren = 4;\n      const numGrandChildren = 2;\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\n      treeControl.dataNodes = nodes;\n\n      treeControl.expandDescendants(nodes[1]);\n\n      const expandedNodesNum = 1 + numChildren + numChildren * numGrandChildren;\n      expect(treeControl.expansionModel.selected.length)\n        .toBe(expandedNodesNum, `Expect expanded ${expandedNodesNum} nodes`);\n\n      expect(treeControl.isExpanded(nodes[1])).toBeTruthy('Expect second node to be expanded');\n      for (let i = 0; i < numChildren; i++) {\n\n        expect(treeControl.isExpanded(nodes[1].children[i]))\n          .toBeTruthy(`Expect second node's children to be expanded`);\n        for (let j = 0; j < numGrandChildren; j++) {\n          expect(treeControl.isExpanded(nodes[1].children[i].children[j]))\n            .toBeTruthy(`Expect second node grand children to be expanded`);\n        }\n      }\n    });\n\n    it('should be able to expand/collapse all the dataNodes', () => {\n      const numNodes = 10;\n      const numChildren = 4;\n      const numGrandChildren = 2;\n      const nodes = generateData(numNodes, numChildren, numGrandChildren);\n      treeControl.dataNodes = nodes;\n\n      treeControl.expandDescendants(nodes[1]);\n\n      treeControl.collapseAll();\n\n      expect(treeControl.expansionModel.selected.length).toBe(0, `Expect no expanded nodes`);\n\n      treeControl.expandAll();\n\n      const totalNumber = numNodes + numNodes * numChildren\n        + numNodes * numChildren * numGrandChildren;\n      expect(treeControl.expansionModel.selected.length)\n        .toBe(totalNumber, `Expect ${totalNumber} expanded nodes`);\n    });\n\n    // Note that this needs to be `fakeAsync` in order to\n    // catch the error inside an observable correctly.\n    it('should handle null children', fakeAsync(() => {\n      const nodes = generateData(3, 2);\n\n      nodes[1].children = null!;\n      treeControl.dataNodes = nodes;\n\n      expect(() => {\n        treeControl.expandAll();\n        flush();\n      }).not.toThrow();\n    }));\n\n    describe('with children array', () => {\n      let getStaticChildren = (node: TestData) => node.children;\n\n      beforeEach(() => {\n        treeControl = new NestedTreeControl<TestData>(getStaticChildren);\n      });\n\n      it('should be able to expand and collapse dataNodes', () => {\n        const nodes = generateData(10, 4);\n        const node = nodes[1];\n        const sixthNode = nodes[5];\n        treeControl.dataNodes = nodes;\n\n        treeControl.expand(node);\n\n\n        expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to be expanded');\n        expect(treeControl.expansionModel.selected)\n          .toContain(node, 'Expect second node in expansionModel');\n        expect(treeControl.expansionModel.selected.length)\n          .toBe(1, 'Expect only second node in expansionModel');\n\n        treeControl.toggle(sixthNode);\n\n        expect(treeControl.isExpanded(node)).toBeTruthy('Expect second node to stay expanded');\n        expect(treeControl.expansionModel.selected)\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\n        expect(treeControl.expansionModel.selected)\n          .toContain(node, 'Expect second node in expansionModel');\n        expect(treeControl.expansionModel.selected.length)\n          .toBe(2, 'Expect two dataNodes in expansionModel');\n\n        treeControl.collapse(node);\n\n        expect(treeControl.isExpanded(node)).toBeFalsy('Expect second node to be collapsed');\n        expect(treeControl.expansionModel.selected.length)\n          .toBe(1, 'Expect one node in expansionModel');\n        expect(treeControl.isExpanded(sixthNode)).toBeTruthy('Expect sixth node to stay expanded');\n        expect(treeControl.expansionModel.selected)\n          .toContain(sixthNode, 'Expect sixth node in expansionModel');\n      });\n\n      it('should toggle descendants correctly', () => {\n        const numNodes = 10;\n        const numChildren = 4;\n        const numGrandChildren = 2;\n        const nodes = generateData(numNodes, numChildren, numGrandChildren);\n        treeControl.dataNodes = nodes;\n\n        treeControl.expandDescendants(nodes[1]);\n\n        const expandedNodesNum = 1 + numChildren + numChildren * numGrandChildren;\n        expect(treeControl.expansionModel.selected.length)\n          .toBe(expandedNodesNum, `Expect expanded ${expandedNodesNum} nodes`);\n\n        expect(treeControl.isExpanded(nodes[1])).toBeTruthy('Expect second node to be expanded');\n        for (let i = 0; i < numChildren; i++) {\n\n          expect(treeControl.isExpanded(nodes[1].children[i]))\n            .toBeTruthy(`Expect second node's children to be expanded`);\n          for (let j = 0; j < numGrandChildren; j++) {\n            expect(treeControl.isExpanded(nodes[1].children[i].children[j]))\n              .toBeTruthy(`Expect second node grand children to be expanded`);\n          }\n        }\n      });\n\n      it('should be able to expand/collapse all the dataNodes', () => {\n        const numNodes = 10;\n        const numChildren = 4;\n        const numGrandChildren = 2;\n        const nodes = generateData(numNodes, numChildren, numGrandChildren);\n        treeControl.dataNodes = nodes;\n\n        treeControl.expandDescendants(nodes[1]);\n\n        treeControl.collapseAll();\n\n        expect(treeControl.expansionModel.selected.length).toBe(0, `Expect no expanded nodes`);\n\n        treeControl.expandAll();\n\n        const totalNumber = numNodes + (numNodes * numChildren)\n          + (numNodes * numChildren * numGrandChildren);\n        expect(treeControl.expansionModel.selected.length)\n          .toBe(totalNumber, `Expect ${totalNumber} expanded nodes`);\n      });\n    });\n  });\n});\n\nexport class TestData {\n  a: string;\n  b: string;\n  c: string;\n  level: number;\n  children: TestData[];\n\n  constructor(a: string, b: string, c: string, level: number = 1, children: TestData[] = []) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.level = level;\n    this.children = children;\n  }\n}\n\nfunction generateData(dataLength: number, childLength: number, grandChildLength: number = 0)\n    : TestData[] {\n  let data: TestData[] = [];\n  let nextIndex = 0;\n  for (let i = 0; i < dataLength; i++) {\n    let children: TestData[] = [];\n    for (let j = 0; j < childLength; j++) {\n      let grandChildren: TestData[] = [];\n      for (let k = 0; k < grandChildLength; k++) {\n        grandChildren.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 3));\n      }\n      children.push(\n        new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 2, grandChildren));\n    }\n    data.push(new TestData(`a_${nextIndex}`, `b_${nextIndex}`, `c_${nextIndex++}`, 1, children));\n  }\n  return data;\n}\n"]}