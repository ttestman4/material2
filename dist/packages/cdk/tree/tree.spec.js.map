{"version":3,"file":"tree.spec.js","sourceRoot":"","sources":["../../../../src/cdk/tree/tree.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ComponentFixture, TestBed, fakeAsync, flush} from '@angular/core/testing';\nimport {Component, ViewChild, TrackByFunction, Type} from '@angular/core';\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {combineLatest, BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {BaseTreeControl} from './control/base-tree-control';\nimport {TreeControl} from './control/tree-control';\nimport {FlatTreeControl} from './control/flat-tree-control';\nimport {NestedTreeControl} from './control/nested-tree-control';\nimport {CdkTreeModule} from './index';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n\ndescribe('CdkTree', () => {\n  /** Represents an indent for expectNestedTreeToMatch */\n  const _ = {};\n  let dataSource: FakeDataSource;\n  let treeElement: HTMLElement;\n  let tree: CdkTree<TestData>;\n\n  function configureCdkTreeTestingModule(declarations: Type<any>[]) {\n    TestBed.configureTestingModule({\n      imports: [CdkTreeModule],\n      declarations: declarations,\n    }).compileComponents();\n  }\n\n  it('should clear out the `mostRecentTreeNode` on destroy', () => {\n    configureCdkTreeTestingModule([SimpleCdkTreeApp]);\n    const fixture = TestBed.createComponent(SimpleCdkTreeApp);\n    fixture.detectChanges();\n\n    // Cast the assertions to a boolean to avoid Jasmine going into an\n    // infinite loop when stringifying the object, if the test starts failing.\n    expect(!!CdkTreeNode.mostRecentTreeNode).toBe(true);\n\n    fixture.destroy();\n\n    expect(!!CdkTreeNode.mostRecentTreeNode).toBe(false);\n  });\n\n  describe('flat tree', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<SimpleCdkTreeApp>;\n      let component: SimpleCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([SimpleCdkTreeApp]);\n        fixture = TestBed.createComponent(SimpleCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with a connected data source', () => {\n        expect(tree.dataSource).toBe(dataSource);\n        expect(dataSource.isConnected).toBe(true);\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n\n      it('with the right accessibility roles', () => {\n        expect(treeElement.getAttribute('role')).toBe('tree');\n\n        getNodes(treeElement).forEach(node => {\n          expect(node.getAttribute('role')).toBe('treeitem');\n        });\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\n\n        dataSource.addData(2);\n        fixture.detectChanges();\n\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`],\n          [_, `${data[3].pizzaTopping} - ${data[3].pizzaCheese} + ${data[3].pizzaBase}`]);\n      });\n\n      it('should be able to use units different from px for the indentation', () => {\n        component.indent = '15rem';\n        fixture.detectChanges();\n\n        const data = dataSource.data;\n\n        expectFlatTreeToMatch(treeElement, 15, 'rem',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\n      });\n\n      it('should default to px if no unit is set for string value indentation', () => {\n        component.indent = '17';\n        fixture.detectChanges();\n\n        const data = dataSource.data;\n\n        expectFlatTreeToMatch(treeElement, 17, 'px',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\n      });\n\n    });\n\n    describe('with toggle', () => {\n      let fixture: ComponentFixture<CdkTreeAppWithToggle>;\n      let component: CdkTreeAppWithToggle;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([CdkTreeAppWithToggle]);\n        fixture = TestBed.createComponent(CdkTreeAppWithToggle);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('should expand/collapse the node', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect no expanded node`);\n\n        component.toggleRecursively = false;\n        let data = dataSource.data;\n        dataSource.addChild(data[2]);\n        fixture.detectChanges();\n\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 40, 'px',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`],\n          [_, `${data[3].pizzaTopping} - ${data[3].pizzaCheese} + ${data[3].pizzaBase}`]);\n\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(1, `Expect node expanded`);\n        expect(component.treeControl.expansionModel.selected[0]).toBe(data[2]);\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n      });\n\n      it('should expand/collapse the node recursively', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect no expanded node`);\n\n        let data = dataSource.data;\n        dataSource.addChild(data[2]);\n        fixture.detectChanges();\n\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 40, 'px',\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`],\n          [_, `${data[3].pizzaTopping} - ${data[3].pizzaCheese} + ${data[3].pizzaBase}`]);\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(2, `Expect nodes expanded`);\n        expect(component.treeControl.expansionModel.selected[0])\n          .toBe(data[2], `Expect parent node expanded`);\n        expect(component.treeControl.expansionModel.selected[1])\n          .toBe(data[3], `Expected child node expanded`);\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n      });\n    });\n\n    describe('with when node template', () => {\n      let fixture: ComponentFixture<WhenNodeCdkTreeApp>;\n      let component: WhenNodeCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([WhenNodeCdkTreeApp]);\n        fixture = TestBed.createComponent(WhenNodeCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n\n        dataSource.addChild(data[1]);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n      });\n    });\n\n    describe('with array data source', () => {\n      let fixture: ComponentFixture<ArrayDataSourceCdkTreeApp>;\n      let component: ArrayDataSourceCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([ArrayDataSourceCdkTreeApp]);\n        fixture = TestBed.createComponent(ArrayDataSourceCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n\n        dataSource.addChild(data[1]);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [_, `[topping_4] - [cheese_4] + [base_4]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n      });\n    });\n\n    describe('with observable data source', () => {\n      let fixture: ComponentFixture<ObservableDataSourceCdkTreeApp>;\n      let component: ObservableDataSourceCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([ObservableDataSourceCdkTreeApp]);\n        fixture = TestBed.createComponent(ObservableDataSourceCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n\n        dataSource.addChild(data[1]);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        data = dataSource.data;\n        expect(data.length).toBe(4);\n        expectFlatTreeToMatch(treeElement, 28, 'px',\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [_, `[topping_4] - [cheese_4] + [base_4]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n      });\n    });\n\n    describe('with trackBy', () => {\n      let fixture: ComponentFixture<CdkTreeAppWithTrackBy>;\n      let component: CdkTreeAppWithTrackBy;\n\n      function createTrackByTestComponent(trackByStrategy: 'reference' | 'property' | 'index') {\n        configureCdkTreeTestingModule([CdkTreeAppWithTrackBy]);\n        fixture = TestBed.createComponent(CdkTreeAppWithTrackBy);\n        component = fixture.componentInstance;\n        component.trackByStrategy = trackByStrategy;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n\n        // Each node receives an attribute 'initialIndex' the element's original place\n        getNodes(treeElement).forEach((node: Element, index: number) => {\n          node.setAttribute('initialIndex', index.toString());\n        });\n\n        // Prove that the attributes match their indicies\n        const initialNodes = getNodes(treeElement);\n        expect(initialNodes[0].getAttribute('initialIndex')).toBe('0');\n        expect(initialNodes[1].getAttribute('initialIndex')).toBe('1');\n        expect(initialNodes[2].getAttribute('initialIndex')).toBe('2');\n      }\n\n      function mutateData() {\n        // Swap first and second data in data array\n        const copiedData = component.dataSource.data.slice();\n        const temp = copiedData[0];\n        copiedData[0] = copiedData[1];\n        copiedData[1] = temp;\n\n        // Remove the third element\n        copiedData.splice(2, 1);\n\n        // Add new data\n        component.dataSource.data = copiedData;\n        component.dataSource.addData();\n      }\n\n      it('should add/remove/move nodes with reference-based trackBy', () => {\n        createTrackByTestComponent('reference');\n        mutateData();\n\n        // Expect that the first and second nodes were swapped and that the last node is new\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(3);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('0');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe(null);\n      });\n\n      it('should add/remove/move nodes with property-based trackBy', () => {\n        createTrackByTestComponent('property');\n        mutateData();\n\n        // Change each item reference to show that the trackby is checking the item properties.\n        // Otherwise this would cause them all to be removed/added.\n        component.dataSource.data = component.dataSource.data\n            .map(item => new TestData(item.pizzaTopping, item.pizzaCheese, item.pizzaBase, ));\n\n        // Expect that the first and second nodes were swapped and that the last node is new\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(3);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('0');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe(null);\n      });\n\n      it('should add/remove/move nodes with index-based trackBy', () => {\n        createTrackByTestComponent('index');\n        mutateData();\n\n        // Change each item reference to show that the trackby is checking the index.\n        // Otherwise this would cause them all to be removed/added.\n        component.dataSource.data = component.dataSource.data\n            .map(item => new TestData(item.pizzaTopping, item.pizzaCheese, item.pizzaBase, ));\n\n        // Expect first two to be the same since they were swapped but indicies are consistent.\n        // The third element was removed and caught by the tree so it was removed before another\n        // item was added, so it is without an initial index.\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(3);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('0');\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe(null);\n      });\n    });\n  });\n\n  describe('nested tree', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<NestedCdkTreeApp>;\n      let component: NestedCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([NestedCdkTreeApp]);\n        fixture = TestBed.createComponent(NestedCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with a connected data source', () => {\n        expect(tree.dataSource).toBe(dataSource);\n        expect(dataSource.isConnected).toBe(true);\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n\n      it('with the right accessibility roles', () => {\n        expect(treeElement.getAttribute('role')).toBe('tree');\n\n        getNodes(treeElement).forEach(node => {\n          expect(node.getAttribute('role')).toBe('treeitem');\n        });\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectNestedTreeToMatch(treeElement,\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\n\n        dataSource.addChild(data[1], false);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        data = dataSource.data;\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n\n      it('with nested child data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        const child = dataSource.addChild(data[1], false);\n        dataSource.addChild(child, false);\n        fixture.detectChanges();\n\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [_, `topping_4 - cheese_4 + base_4`],\n            [_, _, `topping_5 - cheese_5 + base_5`],\n            [`topping_3 - cheese_3 + base_3`]);\n\n        dataSource.addChild(child, false);\n        fixture.detectChanges();\n\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [_, `topping_4 - cheese_4 + base_4`],\n            [_, _, `topping_5 - cheese_5 + base_5`],\n            [_, _, `topping_6 - cheese_6 + base_6`],\n            [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n\n    describe('with static children', () => {\n      let fixture: ComponentFixture<StaticNestedCdkTreeApp>;\n      let component: StaticNestedCdkTreeApp;\n\n      beforeEach(() => {\n      configureCdkTreeTestingModule([StaticNestedCdkTreeApp]);\n      fixture = TestBed.createComponent(StaticNestedCdkTreeApp);\n\n      component = fixture.componentInstance;\n      dataSource = component.dataSource as FakeDataSource;\n      tree = component.tree;\n      treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n      fixture.detectChanges();\n    });\n\n    it('with the right data', () => {\n      expectNestedTreeToMatch(treeElement,\n        [`topping_1 - cheese_1 + base_1`],\n        [`topping_2 - cheese_2 + base_2`],\n        [_, `topping_4 - cheese_4 + base_4`],\n        [_, _, `topping_5 - cheese_5 + base_5`],\n        [_, _, `topping_6 - cheese_6 + base_6`],\n        [`topping_3 - cheese_3 + base_3`]);\n    });\n  });\n\n    describe('with when node', () => {\n      let fixture: ComponentFixture<WhenNodeNestedCdkTreeApp>;\n      let component: WhenNodeNestedCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([WhenNodeNestedCdkTreeApp]);\n        fixture = TestBed.createComponent(WhenNodeNestedCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectNestedTreeToMatch(treeElement,\n            [`topping_1 - cheese_1 + base_1`],\n            [`>> topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`]);\n\n        dataSource.addChild(data[1], false);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        data = dataSource.data;\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n            [`topping_1 - cheese_1 + base_1`],\n            [`>> topping_2 - cheese_2 + base_2`],\n            [_, `topping_4 - cheese_4 + base_4`],\n            [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n\n    describe('with toggle', () => {\n      let fixture: ComponentFixture<NestedCdkTreeAppWithToggle>;\n      let component: NestedCdkTreeAppWithToggle;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([NestedCdkTreeAppWithToggle]);\n        fixture = TestBed.createComponent(NestedCdkTreeAppWithToggle);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('should expand/collapse the node multiple times', () => {\n        component.toggleRecursively = false;\n        let data = dataSource.data;\n        const child = dataSource.addChild(data[1], false);\n        dataSource.addChild(child, false);\n\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        fixture.detectChanges();\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(1, `Expect node expanded`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(1, `Expect node expanded`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n\n      it('should expand/collapse the node recursively', () => {\n        let data = dataSource.data;\n        const child = dataSource.addChild(data[1], false);\n        dataSource.addChild(child, false);\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(3, `Expect node expanded`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [_, _, `topping_5 - cheese_5 + base_5`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n\n    describe('with array data source', () => {\n      let fixture: ComponentFixture<ArrayDataSourceNestedCdkTreeApp>;\n      let component: ArrayDataSourceNestedCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([ArrayDataSourceNestedCdkTreeApp]);\n        fixture = TestBed.createComponent(ArrayDataSourceNestedCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectNestedTreeToMatch(treeElement,\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n\n        dataSource.addChild(data[1], false);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        expectNestedTreeToMatch(treeElement,\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [_, `[topping_4] - [cheese_4] + [base_4]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n      });\n    });\n\n    describe('with observable data source', () => {\n      let fixture: ComponentFixture<ObservableDataSourceNestedCdkTreeApp>;\n      let component: ObservableDataSourceNestedCdkTreeApp;\n\n      beforeEach(() => {\n        configureCdkTreeTestingModule([ObservableDataSourceNestedCdkTreeApp]);\n        fixture = TestBed.createComponent(ObservableDataSourceNestedCdkTreeApp);\n\n        component = fixture.componentInstance;\n        dataSource = component.dataSource as FakeDataSource;\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expect(dataSource.data.length).toBe(3);\n\n        let data = dataSource.data;\n        expectNestedTreeToMatch(treeElement,\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n\n        dataSource.addChild(data[1], false);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n        expectNestedTreeToMatch(treeElement,\n          [`[topping_1] - [cheese_1] + [base_1]`],\n          [`[topping_2] - [cheese_2] + [base_2]`],\n          [_, `[topping_4] - [cheese_4] + [base_4]`],\n          [`[topping_3] - [cheese_3] + [base_3]`]);\n      });\n    });\n\n    describe('with trackBy', () => {\n      let fixture: ComponentFixture<NestedCdkTreeAppWithTrackBy>;\n      let component: NestedCdkTreeAppWithTrackBy;\n\n      function createTrackByTestComponent(trackByStrategy: 'reference' | 'property' | 'index') {\n        configureCdkTreeTestingModule([NestedCdkTreeAppWithTrackBy]);\n        fixture = TestBed.createComponent(NestedCdkTreeAppWithTrackBy);\n        component = fixture.componentInstance;\n        component.trackByStrategy = trackByStrategy;\n        dataSource = component.dataSource as FakeDataSource;\n\n        tree = component.tree;\n        treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n        fixture.detectChanges();\n\n        // Each node receives an attribute 'initialIndex' the element's original place\n        getNodes(treeElement).forEach((node: Element, index: number) => {\n          node.setAttribute('initialIndex', index.toString());\n        });\n\n        // Prove that the attributes match their indicies\n        const initialNodes = getNodes(treeElement);\n        expect(initialNodes.length).toBe(3);\n        initialNodes.forEach((node, index) => {\n          expect(node.getAttribute('initialIndex')).toBe(`${index}`);\n        });\n\n        const parent = dataSource.data[0];\n        dataSource.addChild(parent, false);\n        dataSource.addChild(parent, false);\n        dataSource.addChild(parent, false);\n        getNodes(initialNodes[0]).forEach((node: Element, index: number) => {\n          node.setAttribute('initialIndex', `c${index}`);\n        });\n        getNodes(initialNodes[0]).forEach((node, index) => {\n          expect(node.getAttribute('initialIndex')).toBe(`c${index}`);\n        });\n      }\n\n      function mutateChildren(parent: TestData) {\n        // Swap first and second data in data array\n        const copiedData = parent.children.slice();\n        const temp = copiedData[0];\n        copiedData[0] = copiedData[1];\n        copiedData[1] = temp;\n\n        // Remove the third element\n        copiedData.splice(2, 1);\n\n        // Add new data\n        parent.children = copiedData;\n        parent.observableChildren.next(copiedData);\n        component.dataSource.addChild(parent, false);\n      }\n\n      it('should add/remove/move children nodes with reference-based trackBy', () => {\n        createTrackByTestComponent('reference');\n        mutateChildren(dataSource.data[0]);\n\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(6);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('0');\n\n        // Expect that the first and second child nodes were swapped and that the last node is new\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('c1');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe('c0');\n        expect(changedNodes[3].getAttribute('initialIndex')).toBe(null);\n\n        expect(changedNodes[4].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[5].getAttribute('initialIndex')).toBe('2');\n      });\n\n      it('should add/remove/move children nodes with property-based trackBy', () => {\n        createTrackByTestComponent('property');\n        mutateChildren(dataSource.data[0]);\n\n        // Change each item reference to show that the trackby is checking the item properties.\n        // Otherwise this would cause them all to be removed/added.\n        dataSource.data[0].observableChildren.next(dataSource.data[0].children\n          .map(item => new TestData(item.pizzaTopping, item.pizzaCheese, item.pizzaBase)));\n\n        // Expect that the first and second nodes were swapped and that the last node is new\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(6);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('0');\n\n        // Expect that the first and second child nodes were swapped and that the last node is new\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('c1');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe('c0');\n        expect(changedNodes[3].getAttribute('initialIndex')).toBe(null);\n\n        expect(changedNodes[4].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[5].getAttribute('initialIndex')).toBe('2');\n      });\n\n      it('should add/remove/move children nodes with index-based trackBy', () => {\n        createTrackByTestComponent('index');\n        mutateChildren(dataSource.data[0]);\n\n        // Change each item reference to show that the trackby is checking the index.\n        // Otherwise this would cause them all to be removed/added.\n        dataSource.data[0].observableChildren.next(dataSource.data[0].children\n          .map(item => new TestData(item.pizzaTopping, item.pizzaCheese, item.pizzaBase)));\n\n        const changedNodes = getNodes(treeElement);\n        expect(changedNodes.length).toBe(6);\n        expect(changedNodes[0].getAttribute('initialIndex')).toBe('0');\n\n        // Expect first two children to be the same since they were swapped\n        // but indicies are consistent.\n        // The third element was removed and caught by the tree so it was removed before another\n        // item was added, so it is without an initial index.\n        expect(changedNodes[1].getAttribute('initialIndex')).toBe('c0');\n        expect(changedNodes[2].getAttribute('initialIndex')).toBe('c1');\n        expect(changedNodes[3].getAttribute('initialIndex')).toBe(null);\n\n        expect(changedNodes[4].getAttribute('initialIndex')).toBe('1');\n        expect(changedNodes[5].getAttribute('initialIndex')).toBe('2');\n      });\n    });\n\n    it('should throw an error when missing function in nested tree', fakeAsync(() => {\n      configureCdkTreeTestingModule([NestedCdkErrorTreeApp]);\n      expect(() => {\n        try {\n          TestBed.createComponent(NestedCdkErrorTreeApp).detectChanges();\n          flush();\n        } catch {\n          flush();\n        } finally {\n          flush();\n        }\n      }).toThrowError(getTreeControlFunctionsMissingError().message);\n    }));\n\n    it('should throw an error when missing function in flat tree', fakeAsync(() => {\n      configureCdkTreeTestingModule([FlatCdkErrorTreeApp]);\n      expect(() => {\n        try {\n          TestBed.createComponent(FlatCdkErrorTreeApp).detectChanges();\n          flush();\n        } catch {\n          flush();\n        }\n      }).toThrowError(getTreeControlFunctionsMissingError().message);\n    }));\n  });\n\n  describe('with depth', () => {\n    let fixture: ComponentFixture<DepthNestedCdkTreeApp>;\n    let component: DepthNestedCdkTreeApp;\n\n    beforeEach(() => {\n      configureCdkTreeTestingModule([DepthNestedCdkTreeApp]);\n      fixture = TestBed.createComponent(DepthNestedCdkTreeApp);\n\n      component = fixture.componentInstance;\n      dataSource = component.dataSource as FakeDataSource;\n      tree = component.tree;\n      treeElement = fixture.nativeElement.querySelector('cdk-tree');\n\n      fixture.detectChanges();\n    });\n\n    it('should have correct depth for nested tree', () => {\n      let data = dataSource.data;\n      const child = dataSource.addChild(data[1], false);\n      dataSource.addChild(child, false);\n\n      fixture.detectChanges();\n\n      const depthElements = Array.from(treeElement.querySelectorAll('.tree-test-level')!);\n      const expectedLevels = ['0', '0', '1', '2', '0'];\n      depthElements.forEach((element, index) => {\n        const actualLevel = element.textContent!.trim();\n        expect(actualLevel).toBe(expectedLevels[index]);\n      });\n      expect(depthElements.length).toBe(5);\n    });\n  });\n});\n\nexport class TestData {\n  pizzaTopping: string;\n  pizzaCheese: string;\n  pizzaBase: string;\n  level: number;\n  children: TestData[];\n  observableChildren: BehaviorSubject<TestData[]>;\n\n  constructor(pizzaTopping: string, pizzaCheese: string, pizzaBase: string, level: number = 1) {\n    this.pizzaTopping = pizzaTopping;\n    this.pizzaCheese = pizzaCheese;\n    this.pizzaBase = pizzaBase;\n    this.level = level;\n    this.children = [];\n    this.observableChildren = new BehaviorSubject<TestData[]>(this.children);\n  }\n}\n\nclass FakeDataSource extends DataSource<TestData> {\n  dataIndex = 0;\n  isConnected = false;\n\n  _dataChange = new BehaviorSubject<TestData[]>([]);\n  get data() { return this._dataChange.getValue(); }\n  set data(data: TestData[]) { this._dataChange.next(data); }\n\n  constructor(public treeControl: TreeControl<TestData>) {\n    super();\n    for (let i = 0; i < 3; i++) {\n      this.addData();\n    }\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<TestData[]> {\n    this.isConnected = true;\n\n    return combineLatest(this._dataChange, collectionViewer.viewChange).pipe(map(([data]) => {\n      this.treeControl.dataNodes = data;\n      return data;\n    }));\n  }\n\n  disconnect() {\n    this.isConnected = false;\n  }\n\n  addChild(parent: TestData, isFlat: boolean = true) {\n    const nextIndex = ++this.dataIndex;\n    const child = new TestData(`topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`,\n      parent.level + 1);\n    parent.children.push(child);\n    if (isFlat) {\n      let copiedData = this.data.slice();\n      copiedData.splice(this.data.indexOf(parent) + 1, 0, child);\n      this.data = copiedData;\n    } else {\n      parent.observableChildren.next(parent.children);\n    }\n    return child;\n  }\n\n  addData(level: number = 1) {\n    const nextIndex = ++this.dataIndex;\n\n    let copiedData = this.data.slice();\n    copiedData.push(\n      new TestData(`topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`, level));\n\n    this.data = copiedData;\n  }\n}\n\nfunction getNodes(treeElement: Element): Element[] {\n  return [].slice.call(treeElement.querySelectorAll('.cdk-tree-node'))!;\n}\n\nfunction expectFlatTreeToMatch(treeElement: Element,\n                               expectedPaddingIndent = 28,\n                               expectedPaddingUnits = 'px',\n                               ...expectedTree: any[]) {\n  const missedExpectations: string[] = [];\n\n  function checkNode(node: Element, expectedNode: any[]) {\n    const actualTextContent = node.textContent!.trim();\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\n    if (actualTextContent !== expectedTextContent) {\n      missedExpectations.push(\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\n    }\n  }\n\n  function checkLevel(node: Element, expectedNode: any[]) {\n    const actualLevel = (node as HTMLElement).style.paddingLeft;\n    const expectedLevel = `${(expectedNode.length) * expectedPaddingIndent}${expectedPaddingUnits}`;\n    if (actualLevel != expectedLevel) {\n      missedExpectations.push(\n        `Expected node level to be ${expectedLevel} but was ${actualLevel}`);\n    }\n  }\n\n  getNodes(treeElement).forEach((node, index) => {\n    const expected = expectedTree ?\n      expectedTree[index] :\n      null;\n\n    checkLevel(node, expected);\n    checkNode(node, expected);\n  });\n\n  if (missedExpectations.length) {\n    fail(missedExpectations.join('\\n'));\n  }\n}\n\nfunction expectNestedTreeToMatch(treeElement: Element, ...expectedTree: any[]) {\n  const missedExpectations: string[] = [];\n  function checkNodeContent(node: Element, expectedNode: any[]) {\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\n    const actualTextContent = node.childNodes.item(0).textContent!.trim();\n    if (actualTextContent !== expectedTextContent) {\n      missedExpectations.push(\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\n    }\n  }\n\n  function checkNodeDescendants(node: Element, expectedNode: any[], currentIndex: number) {\n    let expectedDescendant = 0;\n\n    for (let i = currentIndex + 1; i < expectedTree.length; ++i) {\n      if (expectedTree[i].length > expectedNode.length) {\n        ++expectedDescendant;\n      } else if (expectedTree[i].length === expectedNode.length) {\n        break;\n      }\n    }\n\n    const actualDescendant = getNodes(node).length;\n    if (actualDescendant !== expectedDescendant) {\n      missedExpectations.push(\n        `Expected node descendant num to be ${expectedDescendant} but was ${actualDescendant}`);\n    }\n  }\n\n  getNodes(treeElement).forEach((node, index) => {\n\n    const expected = expectedTree ?\n      expectedTree[index] :\n      null;\n\n    checkNodeDescendants(node, expected, index);\n    checkNodeContent(node, expected);\n  });\n\n  if (missedExpectations.length) {\n    fail(missedExpectations.join('\\n'));\n  }\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     cdkTreeNodePadding [cdkTreeNodePaddingIndent]=\"indent\"\n                     cdkTreeNodeToggle>\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass SimpleCdkTreeApp {\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n  indent: number | string = 28;\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass NestedCdkTreeApp {\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass StaticNestedCdkTreeApp {\n  getChildren = (node: TestData) => node.children;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource;\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n\n  constructor() {\n    const dataSource = new FakeDataSource(this.treeControl);\n    const data = dataSource.data;\n    const child = dataSource.addChild(data[1], false);\n    dataSource.addChild(child, false);\n    dataSource.addChild(child, false);\n\n    this.dataSource = dataSource;\n  }\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n       <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: isSecondNode\" class=\"customNodeClass\">\n                     >> {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass WhenNodeNestedCdkTreeApp {\n  isSecondNode = (_: number, node: TestData) => node.pizzaBase.indexOf('2') > 0;\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     cdkTreeNodePadding\n                     cdkTreeNodeToggle [cdkTreeNodeToggleRecursive]=\"toggleRecursively\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass CdkTreeAppWithToggle {\n  toggleRecursively: boolean = true;\n\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                            cdkTreeNodeToggle [cdkTreeNodeToggleRecursive]=\"toggleRecursively\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n        <div *ngIf=\"treeControl.isExpanded(node)\">\n          <ng-template cdkTreeNodeOutlet></ng-template>\n        </div>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass NestedCdkTreeAppWithToggle {\n  toggleRecursively: boolean = true;\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     cdkTreeNodePadding [cdkTreeNodePaddingIndent]=\"28\"\n                     cdkTreeNodeToggle>\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </cdk-tree-node>\n       <cdk-tree-node *cdkTreeNodeDef=\"let node; when: isOddNode\" class=\"customNodeClass\"\n                     cdkTreeNodePadding [cdkTreeNodePaddingIndent]=\"28\"\n                     cdkTreeNodeToggle>\n                     [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass WhenNodeCdkTreeApp {\n  isOddNode = (_: number, node: TestData) => node.level % 2 === 1;\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataArray\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\"\n                     cdkTreeNodePadding [cdkTreeNodePaddingIndent]=\"28\"\n                     cdkTreeNodeToggle>\n                     [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass ArrayDataSourceCdkTreeApp {\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataArray() {\n    return this.dataSource.data;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataObservable\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\"\n                     cdkTreeNodePadding [cdkTreeNodePaddingIndent]=\"28\"\n                     cdkTreeNodeToggle>\n                     [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass ObservableDataSourceCdkTreeApp {\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataObservable() {\n    return this.dataSource._dataChange;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataArray\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\">\n                     [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass ArrayDataSourceNestedCdkTreeApp {\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataArray() {\n    return this.dataSource.data;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataObservable\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\">\n                     [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass ObservableDataSourceNestedCdkTreeApp {\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataObservable() {\n    return this.dataSource._dataChange;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass NestedCdkErrorTreeApp {\n  getLevel = (node: TestData) => node.level;\n\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\nclass FakeTreeControl extends BaseTreeControl<TestData> {\n  getDescendants(_: TestData): TestData[] {\n    return this.dataNodes;\n  }\n\n  expandAll(): void {\n    // No op\n  }\n}\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass FlatCdkErrorTreeApp {\n\n  getLevel = (node: TestData) => node.level;\n\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FakeTreeControl();\n\n  dataSource: FakeDataSource | null = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataArray\" [treeControl]=\"treeControl\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; let level = level\">\n          <span class=\"tree-test-level\">{{level}}</span>\n           [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass DepthNestedCdkTreeApp {\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataArray() {\n    return this.dataSource.data;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">\n      <cdk-tree-node *cdkTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </cdk-tree-node>\n    </cdk-tree>\n  `\n})\nclass CdkTreeAppWithTrackBy {\n  trackByStrategy: 'reference' | 'property' | 'index' = 'reference';\n\n  trackByFn: TrackByFunction<TestData> = (index, item) => {\n    switch (this.trackByStrategy) {\n      case 'reference': return item;\n      case 'property': return item.pizzaBase;\n      case 'index': return index;\n    }\n  }\n\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n\n  treeControl: TreeControl<TestData> = new FlatTreeControl(this.getLevel, this.isExpandable);\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n\n@Component({\n  template: `\n    <cdk-tree [dataSource]=\"dataArray\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">\n      <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\">\n           [{{node.pizzaTopping}}] - [{{node.pizzaCheese}}] + [{{node.pizzaBase}}]\n         <ng-template cdkTreeNodeOutlet></ng-template>\n      </cdk-nested-tree-node>\n    </cdk-tree>\n  `\n})\nclass NestedCdkTreeAppWithTrackBy {\n  trackByStrategy: 'reference' | 'property' | 'index' = 'reference';\n\n  trackByFn: TrackByFunction<TestData> = (index, item) => {\n    switch (this.trackByStrategy) {\n      case 'reference': return item;\n      case 'property': return item.pizzaBase;\n      case 'index': return index;\n    }\n  }\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource: FakeDataSource = new FakeDataSource(this.treeControl);\n\n  get dataArray() {\n    return this.dataSource.data;\n  }\n\n  @ViewChild(CdkTree) tree: CdkTree<TestData>;\n}\n"]}