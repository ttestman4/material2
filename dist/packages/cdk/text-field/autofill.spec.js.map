{"version":3,"file":"autofill.spec.js","sourceRoot":"","sources":["../../../../src/cdk/text-field/autofill.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Component, ElementRef, NgZone, ViewChild} from '@angular/core';\nimport {ComponentFixture, inject, TestBed} from '@angular/core/testing';\nimport {EMPTY} from 'rxjs';\nimport {AutofillEvent, AutofillMonitor} from './autofill';\nimport {TextFieldModule} from './text-field-module';\n\n\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\ndescribe('AutofillMonitor', () => {\n  let autofillMonitor: AutofillMonitor;\n  let fixture: ComponentFixture<Inputs>;\n  let testComponent: Inputs;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [TextFieldModule],\n      declarations: [Inputs],\n    }).compileComponents();\n  });\n\n  beforeEach(inject([AutofillMonitor], (afm: AutofillMonitor) => {\n    autofillMonitor = afm;\n    fixture = TestBed.createComponent(Inputs);\n    testComponent = fixture.componentInstance;\n\n    for (const input of [testComponent.input1, testComponent.input2, testComponent.input3]) {\n      spyOn(input.nativeElement, 'addEventListener');\n      spyOn(input.nativeElement, 'removeEventListener');\n    }\n\n    fixture.detectChanges();\n  }));\n\n  afterEach(() => {\n    // Call destroy to make sure we clean up all listeners.\n    autofillMonitor.ngOnDestroy();\n  });\n\n  it('should add monitored class and listener upon monitoring', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    expect(inputEl.addEventListener).not.toHaveBeenCalled();\n\n    autofillMonitor.monitor(inputEl);\n    expect(inputEl.classList).toContain('cdk-text-field-autofill-monitored');\n    expect(inputEl.addEventListener)\n        .toHaveBeenCalledWith('animationstart', jasmine.any(Function), listenerOptions);\n  });\n\n  it('should not add multiple listeners to the same element', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    expect(inputEl.addEventListener).not.toHaveBeenCalled();\n\n    autofillMonitor.monitor(inputEl);\n    autofillMonitor.monitor(inputEl);\n    expect(inputEl.addEventListener).toHaveBeenCalledTimes(1);\n  });\n\n  it('should remove monitored class and listener upon stop monitoring', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    autofillMonitor.monitor(inputEl);\n    expect(inputEl.classList).toContain('cdk-text-field-autofill-monitored');\n    expect(inputEl.removeEventListener).not.toHaveBeenCalled();\n\n    autofillMonitor.stopMonitoring(inputEl);\n    expect(inputEl.classList).not.toContain('cdk-text-field-autofill-monitored');\n    expect(inputEl.removeEventListener)\n        .toHaveBeenCalledWith('animationstart', jasmine.any(Function), listenerOptions);\n  });\n\n  it('should stop monitoring all monitored elements upon destroy', () => {\n    const inputEl1 = testComponent.input1.nativeElement;\n    const inputEl2 = testComponent.input2.nativeElement;\n    const inputEl3 = testComponent.input3.nativeElement;\n    autofillMonitor.monitor(inputEl1);\n    autofillMonitor.monitor(inputEl2);\n    autofillMonitor.monitor(inputEl3);\n    expect(inputEl1.removeEventListener).not.toHaveBeenCalled();\n    expect(inputEl2.removeEventListener).not.toHaveBeenCalled();\n    expect(inputEl3.removeEventListener).not.toHaveBeenCalled();\n\n    autofillMonitor.ngOnDestroy();\n    expect(inputEl1.removeEventListener).toHaveBeenCalled();\n    expect(inputEl2.removeEventListener).toHaveBeenCalled();\n    expect(inputEl3.removeEventListener).toHaveBeenCalled();\n  });\n\n  it('should emit and add filled class upon start animation', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    let animationStartCallback: Function = () => {};\n    let autofillStreamEvent: AutofillEvent | null = null;\n    inputEl.addEventListener.and.callFake((_: string, cb: Function) => animationStartCallback = cb);\n    const autofillStream = autofillMonitor.monitor(inputEl);\n    autofillStream.subscribe(event => autofillStreamEvent = event);\n    expect(autofillStreamEvent).toBeNull();\n    expect(inputEl.classList).not.toContain('cdk-text-field-autofilled');\n\n    animationStartCallback({animationName: 'cdk-text-field-autofill-start', target: inputEl});\n    expect(inputEl.classList).toContain('cdk-text-field-autofilled');\n    expect(autofillStreamEvent).toEqual({target: inputEl, isAutofilled: true} as any);\n  });\n\n  it('should emit and remove filled class upon end animation', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    let animationStartCallback: Function = () => {};\n    let autofillStreamEvent: AutofillEvent | null = null;\n    inputEl.addEventListener.and.callFake((_: string, cb: Function) => animationStartCallback = cb);\n    const autofillStream = autofillMonitor.monitor(inputEl);\n    autofillStream.subscribe(event => autofillStreamEvent = event);\n    animationStartCallback({animationName: 'cdk-text-field-autofill-start', target: inputEl});\n    expect(inputEl.classList).toContain('cdk-text-field-autofilled');\n    expect(autofillStreamEvent).toEqual({target: inputEl, isAutofilled: true} as any);\n\n    animationStartCallback({animationName: 'cdk-text-field-autofill-end', target: inputEl});\n    expect(inputEl.classList).not.toContain('cdk-text-field-autofilled');\n    expect(autofillStreamEvent).toEqual({target: inputEl, isAutofilled: false} as any);\n  });\n\n  it('should cleanup filled class if monitoring stopped in autofilled state', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    let animationStartCallback: Function = () => {};\n    inputEl.addEventListener.and.callFake((_: string, cb: Function) => animationStartCallback = cb);\n    autofillMonitor.monitor(inputEl);\n    animationStartCallback({animationName: 'cdk-text-field-autofill-start', target: inputEl});\n    expect(inputEl.classList).toContain('cdk-text-field-autofilled');\n\n    autofillMonitor.stopMonitoring(inputEl);\n    expect(inputEl.classlist).not.toContain('cdk-text-field-autofilled');\n  });\n\n  it('should complete the stream when monitoring is stopped', () => {\n    const element = testComponent.input1.nativeElement;\n    const autofillStream = autofillMonitor.monitor(element);\n    const spy = jasmine.createSpy('autofillStream complete');\n\n    autofillStream.subscribe(undefined, undefined, spy);\n    expect(spy).not.toHaveBeenCalled();\n\n    autofillMonitor.stopMonitoring(element);\n    expect(spy).toHaveBeenCalled();\n  });\n\n  it('should emit on stream inside the NgZone', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    let animationStartCallback: Function = () => {};\n    inputEl.addEventListener.and.callFake((_: string, cb: Function) => animationStartCallback = cb);\n    const autofillStream = autofillMonitor.monitor(inputEl);\n    const spy = jasmine.createSpy('autofill spy');\n\n    autofillStream.subscribe(() => spy(NgZone.isInAngularZone()));\n    expect(spy).not.toHaveBeenCalled();\n\n    animationStartCallback({animationName: 'cdk-text-field-autofill-start', target: inputEl});\n    expect(spy).toHaveBeenCalledWith(true);\n  });\n\n  it('should not emit on init if input is unfilled', () => {\n    const inputEl = testComponent.input1.nativeElement;\n    let animationStartCallback: Function = () => {};\n    inputEl.addEventListener.and.callFake((_: string, cb: Function) => animationStartCallback = cb);\n    const autofillStream = autofillMonitor.monitor(inputEl);\n    const spy = jasmine.createSpy('autofill spy');\n    autofillStream.subscribe(() => spy());\n    animationStartCallback({animationName: 'cdk-text-field-autofill-end', target: inputEl});\n    expect(spy).not.toHaveBeenCalled();\n  });\n});\n\ndescribe('cdkAutofill', () => {\n  let autofillMonitor: AutofillMonitor;\n  let fixture: ComponentFixture<InputWithCdkAutofilled>;\n  let testComponent: InputWithCdkAutofilled;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [TextFieldModule],\n      declarations: [InputWithCdkAutofilled],\n    }).compileComponents();\n  });\n\n  beforeEach(inject([AutofillMonitor], (afm: AutofillMonitor) => {\n    autofillMonitor = afm;\n    spyOn(autofillMonitor, 'monitor').and.returnValue(EMPTY);\n    spyOn(autofillMonitor, 'stopMonitoring');\n    fixture = TestBed.createComponent(InputWithCdkAutofilled);\n    testComponent = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('should monitor host element on init', () => {\n    expect(autofillMonitor.monitor).toHaveBeenCalledWith(testComponent.input);\n  });\n\n  it('should stop monitoring host element on destroy', () => {\n    expect(autofillMonitor.stopMonitoring).not.toHaveBeenCalled();\n    fixture.destroy();\n    expect(autofillMonitor.stopMonitoring).toHaveBeenCalledWith(testComponent.input);\n  });\n});\n\n@Component({\n  template: `\n    <input #input1>\n    <input #input2>\n    <input #input3>\n  `\n})\nclass Inputs {\n  // Cast to `any` so we can stub out some methods in the tests.\n  @ViewChild('input1') input1: ElementRef<any>;\n  @ViewChild('input2') input2: ElementRef<any>;\n  @ViewChild('input3') input3: ElementRef<any>;\n}\n\n@Component({\n  template: `<input #input cdkAutofill>`\n})\nclass InputWithCdkAutofilled {\n  // Cast to `any` so we can stub out some methods in the tests.\n  @ViewChild('input') input: ElementRef<any>;\n}\n"]}