{"version":3,"file":"autosize.spec.js","sourceRoot":"","sources":["../../../../src/cdk/text-field/autosize.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {dispatchFakeEvent} from '@angular/cdk/testing';\nimport {Component, ViewChild} from '@angular/core';\nimport {async, ComponentFixture, fakeAsync, flush, TestBed, tick} from '@angular/core/testing';\nimport {FormsModule} from '@angular/forms';\nimport {By} from '@angular/platform-browser';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {CdkTextareaAutosize} from './autosize';\nimport {TextFieldModule} from './text-field-module';\n\n\ndescribe('CdkTextareaAutosize', () => {\n  let fixture: ComponentFixture<AutosizeTextAreaWithContent>;\n  let textarea: HTMLTextAreaElement;\n  let autosize: CdkTextareaAutosize;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        FormsModule,\n        TextFieldModule,\n        NoopAnimationsModule,\n      ],\n      declarations: [\n        AutosizeTextAreaWithContent,\n        AutosizeTextAreaWithValue,\n        AutosizeTextareaWithNgModel,\n        AutosizeTextareaWithoutAutosize,\n      ],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AutosizeTextAreaWithContent);\n    fixture.detectChanges();\n\n    textarea = fixture.nativeElement.querySelector('textarea');\n    autosize = fixture.debugElement.query(\n        By.directive(CdkTextareaAutosize)).injector.get<CdkTextareaAutosize>(CdkTextareaAutosize);\n  });\n\n  it('should resize the textarea based on its content', () => {\n    let previousHeight = textarea.clientHeight;\n\n    fixture.componentInstance.content = `\n    Once upon a midnight dreary, while I pondered, weak and weary,\n    Over many a quaint and curious volume of forgotten lore—\n        While I nodded, nearly napping, suddenly there came a tapping,\n    As of some one gently rapping, rapping at my chamber door.\n    “’Tis some visitor,” I muttered, “tapping at my chamber door—\n                Only this and nothing more.”`;\n\n    // Manually call resizeToFitContent instead of faking an `input` event.\n    fixture.detectChanges();\n    autosize.resizeToFitContent();\n\n    expect(textarea.clientHeight)\n        .toBeGreaterThan(previousHeight, 'Expected textarea to have grown with added content.');\n    expect(textarea.clientHeight)\n        .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\n\n    previousHeight = textarea.clientHeight;\n    fixture.componentInstance.content += `\n        Ah, distinctly I remember it was in the bleak December;\n    And each separate dying ember wrought its ghost upon the floor.\n        Eagerly I wished the morrow;—vainly I had sought to borrow\n        From my books surcease of sorrow—sorrow for the lost Lenore—\n    For the rare and radiant maiden whom the angels name Lenore—\n                Nameless here for evermore.`;\n\n    fixture.detectChanges();\n    autosize.resizeToFitContent();\n\n    expect(textarea.clientHeight)\n        .toBeGreaterThan(previousHeight, 'Expected textarea to have grown with added content.');\n    expect(textarea.clientHeight)\n        .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\n  });\n\n  it('should set a min-height based on minRows', () => {\n    expect(textarea.style.minHeight).toBeFalsy();\n\n    fixture.componentInstance.minRows = 4;\n    fixture.detectChanges();\n\n    expect(textarea.style.minHeight).toBeDefined('Expected a min-height to be set via minRows.');\n\n    let previousMinHeight = parseInt(textarea.style.minHeight as string);\n    fixture.componentInstance.minRows = 6;\n    fixture.detectChanges();\n\n    expect(parseInt(textarea.style.minHeight as string))\n        .toBeGreaterThan(previousMinHeight, 'Expected increased min-height with minRows increase.');\n  });\n\n  it('should set a max-height based on maxRows', () => {\n    expect(textarea.style.maxHeight).toBeFalsy();\n\n    fixture.componentInstance.maxRows = 4;\n    fixture.detectChanges();\n\n    expect(textarea.style.maxHeight).toBeDefined('Expected a max-height to be set via maxRows.');\n\n    let previousMaxHeight = parseInt(textarea.style.maxHeight as string);\n    fixture.componentInstance.maxRows = 6;\n    fixture.detectChanges();\n\n    expect(parseInt(textarea.style.maxHeight as string))\n        .toBeGreaterThan(previousMaxHeight, 'Expected increased max-height with maxRows increase.');\n  });\n\n  it('should reduce textarea height when minHeight decreases', () => {\n    expect(textarea.style.minHeight).toBeFalsy();\n\n    fixture.componentInstance.minRows = 6;\n    fixture.detectChanges();\n\n    expect(textarea.style.minHeight).toBeDefined('Expected a min-height to be set via minRows.');\n\n    let previousHeight = parseInt(textarea.style.height!);\n    fixture.componentInstance.minRows = 3;\n    fixture.detectChanges();\n\n    expect(parseInt(textarea.style.height!))\n        .toBeLessThan(previousHeight, 'Expected decreased height with minRows decrease.');\n  });\n\n  it('should export the cdkAutosize reference', () => {\n    expect(fixture.componentInstance.autosize).toBeTruthy();\n    expect(fixture.componentInstance.autosize.resizeToFitContent).toBeTruthy();\n  });\n\n  it('should initially set the rows of a textarea to one', () => {\n    expect(textarea.rows)\n      .toBe(1, 'Expected the directive to initially set the rows property to one.');\n\n    fixture.componentInstance.minRows = 1;\n    fixture.detectChanges();\n\n    expect(textarea.rows)\n      .toBe(1, 'Expected the textarea to have the rows property set to one.');\n\n    const previousMinHeight = parseInt(textarea.style.minHeight as string);\n\n    fixture.componentInstance.minRows = 2;\n    fixture.detectChanges();\n\n    expect(textarea.rows).toBe(1, 'Expected the rows property to be set to one. ' +\n      'The amount of rows will be specified using CSS.');\n\n    expect(parseInt(textarea.style.minHeight as string))\n      .toBeGreaterThan(previousMinHeight, 'Expected the textarea to grow to two rows.');\n  });\n\n  it('should calculate the proper height based on the specified amount of max rows', () => {\n    fixture.componentInstance.content = [1, 2, 3, 4, 5, 6, 7, 8].join('\\n');\n    fixture.detectChanges();\n    autosize.resizeToFitContent();\n\n    expect(textarea.clientHeight)\n      .toBe(textarea.scrollHeight, 'Expected textarea to not have a vertical scrollbar.');\n\n    fixture.componentInstance.maxRows = 5;\n    fixture.detectChanges();\n\n    expect(textarea.clientHeight)\n      .toBeLessThan(textarea.scrollHeight, 'Expected textarea to have a vertical scrollbar.');\n  });\n\n  it('should properly resize to content on init', () => {\n    // Manually create the test component in this test, because in this test the first change\n    // detection should be triggered after a multiline content is set.\n    fixture = TestBed.createComponent(AutosizeTextAreaWithContent);\n    textarea = fixture.nativeElement.querySelector('textarea');\n    autosize = fixture.debugElement.query(By.css('textarea'))\n        .injector.get<CdkTextareaAutosize>(CdkTextareaAutosize);\n\n    fixture.componentInstance.content = `\n      Line\n      Line\n      Line\n      Line\n      Line`;\n\n    fixture.detectChanges();\n\n    expect(textarea.clientHeight)\n      .toBe(textarea.scrollHeight, 'Expected textarea height to match its scrollHeight');\n  });\n\n  it('should resize when an associated form control value changes', fakeAsync(() => {\n    const fixtureWithForms = TestBed.createComponent(AutosizeTextareaWithNgModel);\n    textarea = fixtureWithForms.nativeElement.querySelector('textarea');\n    fixtureWithForms.detectChanges();\n\n    const previousHeight = textarea.clientHeight;\n\n    fixtureWithForms.componentInstance.model = `\n        And the silken, sad, uncertain rustling of each purple curtain\n    Thrilled me—filled me with fantastic terrors never felt before;\n        So that now, to still the beating of my heart, I stood repeating\n        “’Tis some visitor entreating entrance at my chamber door—\n    Some late visitor entreating entrance at my chamber door;—\n                This it is and nothing more.” `;\n    fixtureWithForms.detectChanges();\n    flush();\n    fixtureWithForms.detectChanges();\n\n    expect(textarea.clientHeight)\n        .toBeGreaterThan(previousHeight, 'Expected increased height when ngModel is updated.');\n  }));\n\n  it('should resize when the textarea value is changed programmatically', fakeAsync(() => {\n    const previousHeight = textarea.clientHeight;\n\n    textarea.value = `\n      How much wood would a woodchuck chuck\n      if a woodchuck could chuck wood?\n    `;\n\n    fixture.detectChanges();\n    flush();\n    fixture.detectChanges();\n\n    expect(textarea.clientHeight)\n        .toBeGreaterThan(previousHeight, 'Expected the textarea height to have increased.');\n  }));\n\n  it('should trigger a resize when the window is resized', fakeAsync(() => {\n    spyOn(autosize, 'resizeToFitContent');\n\n    dispatchFakeEvent(window, 'resize');\n    tick(16);\n\n    expect(autosize.resizeToFitContent).toHaveBeenCalled();\n  }));\n\n  it('should not trigger a resize when it is disabled', fakeAsync(() => {\n    const fixtureWithoutAutosize = TestBed.createComponent(AutosizeTextareaWithoutAutosize);\n    textarea = fixtureWithoutAutosize.nativeElement.querySelector('textarea');\n    autosize = fixtureWithoutAutosize.debugElement.query(By.css('textarea'))\n        .injector.get<CdkTextareaAutosize>(CdkTextareaAutosize);\n\n    fixtureWithoutAutosize.detectChanges();\n\n    const previousHeight = textarea.clientHeight;\n\n    fixtureWithoutAutosize.componentInstance.content = `\n    Line\n    Line\n    Line\n    Line\n    Line`;\n\n    // Manually call resizeToFitContent instead of faking an `input` event.\n    fixtureWithoutAutosize.detectChanges();\n\n    expect(textarea.clientHeight)\n        .toEqual(previousHeight, 'Expected textarea to still have the same size.');\n    expect(textarea.clientHeight)\n        .toBeLessThan(textarea.scrollHeight, 'Expected textarea to a have scrollbar.');\n\n    autosize.enabled = true;\n    fixtureWithoutAutosize.detectChanges();\n\n    expect(textarea.clientHeight)\n        .toBeGreaterThan(previousHeight,\n            'Expected textarea to have grown after enabling autosize.');\n    expect(textarea.clientHeight)\n        .toBe(textarea.scrollHeight, 'Expected textarea not to have a scrollbar');\n\n    autosize.enabled = false;\n    fixtureWithoutAutosize.detectChanges();\n\n    expect(textarea.clientHeight)\n        .toEqual(previousHeight, 'Expected textarea to have the original size.');\n    expect(textarea.clientHeight)\n        .toBeLessThan(textarea.scrollHeight, 'Expected textarea to have a scrollbar.');\n  }));\n});\n\n// Styles to reset padding and border to make measurement comparisons easier.\nconst textareaStyleReset = `\n    textarea {\n      padding: 0;\n      border: none;\n      overflow: auto;\n    }`;\n\n@Component({\n  template: `\n    <textarea cdkTextareaAutosize [cdkAutosizeMinRows]=\"minRows\" [cdkAutosizeMaxRows]=\"maxRows\"\n        #autosize=\"cdkTextareaAutosize\">{{content}}</textarea>`,\n  styles: [textareaStyleReset],\n})\nclass AutosizeTextAreaWithContent {\n  @ViewChild('autosize') autosize: CdkTextareaAutosize;\n  minRows: number | null = null;\n  maxRows: number | null = null;\n  content: string = '';\n}\n\n@Component({\n  template: `<textarea cdkTextareaAutosize [value]=\"value\"></textarea>`,\n  styles: [textareaStyleReset],\n})\nclass AutosizeTextAreaWithValue {\n  value: string = '';\n}\n\n@Component({\n  template: `<textarea cdkTextareaAutosize [(ngModel)]=\"model\"></textarea>`,\n  styles: [textareaStyleReset],\n})\nclass AutosizeTextareaWithNgModel {\n  model = '';\n}\n\n@Component({\n  template: `<textarea [cdkTextareaAutosize]=\"false\">{{content}}</textarea>`,\n  styles: [textareaStyleReset],\n})\nclass AutosizeTextareaWithoutAutosize {\n  content: string = '';\n}\n\n"]}