{"version":3,"file":"can-stick.js","sourceRoot":"","sources":["../../../../src/cdk/table/can-stick.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;;;;;;;;AAW5D,8BAYC;;;;;;IAVC,0BAAgB;;;;;IAGhB,qCAA2B;;;;;IAG3B,sDAA4B;;;;;IAG5B,wDAA2B;;;;;;;;;;;AAY7B,MAAM,UAAU,mBAAmB,CAA4B,IAAO;IACpE,OAAO,KAAM,SAAQ,IAAI;;;;QAyBvB,YAAY,GAAG,IAAW;YAAI,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YAjB7C,YAAO,GAAY,KAAK,CAAC;;;;YAGzB,sBAAiB,GAAY,KAAK,CAAC;QAcW,CAAC;;;;;QAvB/C,IAAI,MAAM,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;;;QAC9C,IAAI,MAAM,CAAC,CAAU;;kBACb,SAAS,GAAG,IAAI,CAAC,OAAO;YAC9B,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,iBAAiB,GAAG,SAAS,KAAK,IAAI,CAAC,OAAO,CAAC;QACtD,CAAC;;;;;QAOD,gBAAgB;;kBACR,gBAAgB,GAAG,IAAI,CAAC,iBAAiB;YAC/C,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,OAAO,gBAAgB,CAAC;QAC1B,CAAC;;;;;QAGD,kBAAkB;YAChB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,CAAC;KAGF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport interface CanStick {\n  /** Whether sticky positioning should be applied. */\n  sticky: boolean;\n\n  /** Whether the sticky input has changed since it was last checked. */\n  _hasStickyChanged: boolean;\n\n  /** Whether the sticky value has changed since this was last called. */\n  hasStickyChanged(): boolean;\n\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\n  resetStickyChanged(): void;\n}\n\n/** @docs-private */\nexport type CanStickCtor = Constructor<CanStick>;\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky(): boolean { return this._sticky; }\n    set sticky(v: boolean) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    _sticky: boolean = false;\n\n    /** Whether the sticky input has changed since it was last checked. */\n    _hasStickyChanged: boolean = false;\n\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged(): boolean {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n"]}