{"version":3,"file":"array-data-source.js","sourceRoot":"","sources":["../../../../src/cdk/collections/array-data-source.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,EAAE,IAAI,YAAY,EAAC,MAAM,MAAM,CAAC;AACpD,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;;;;;AAIzC,MAAM,OAAO,eAAmB,SAAQ,UAAa;;;;IACnD,YAAoB,KAAkE;QACpF,KAAK,EAAE,CAAC;QADU,UAAK,GAAL,KAAK,CAA6D;IAEtF,CAAC;;;;IAED,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,YAAY,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClF,CAAC;;;;IAED,UAAU,KAAI,CAAC;CAChB;;;;;;IATa,gCAA0E","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return this._data instanceof Observable ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n"]}