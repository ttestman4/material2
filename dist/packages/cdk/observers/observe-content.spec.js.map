{"version":3,"file":"observe-content.spec.js","sourceRoot":"","sources":["../../../../src/cdk/observers/observe-content.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {async, ComponentFixture, fakeAsync, inject, TestBed, tick} from '@angular/core/testing';\nimport {ContentObserver, MutationObserverFactory, ObserversModule} from './observe-content';\n\ndescribe('Observe content directive', () => {\n  describe('basic usage', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ObserversModule],\n        declarations: [ComponentWithTextContent, ComponentWithChildTextContent]\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    it('should trigger the callback when the content of the element changes', done => {\n      let fixture = TestBed.createComponent(ComponentWithTextContent);\n      fixture.detectChanges();\n\n      // If the hint label is empty, expect no label.\n      const spy = spyOn(fixture.componentInstance, 'doSomething').and.callFake(() => {\n        expect(spy).toHaveBeenCalled();\n        done();\n      });\n\n      expect(spy).not.toHaveBeenCalled();\n\n      fixture.componentInstance.text = 'text';\n      fixture.detectChanges();\n    });\n\n    it('should trigger the callback when the content of the children changes', done => {\n      let fixture = TestBed.createComponent(ComponentWithChildTextContent);\n      fixture.detectChanges();\n\n      // If the hint label is empty, expect no label.\n      const spy = spyOn(fixture.componentInstance, 'doSomething').and.callFake(() => {\n        expect(spy).toHaveBeenCalled();\n        done();\n      });\n\n      expect(spy).not.toHaveBeenCalled();\n\n      fixture.componentInstance.text = 'text';\n      fixture.detectChanges();\n    });\n\n    it('should disconnect the MutationObserver when the directive is disabled', () => {\n      const observeSpy = jasmine.createSpy('observe spy');\n      const disconnectSpy = jasmine.createSpy('disconnect spy');\n\n      // Note: since we can't know exactly when the native MutationObserver will emit, we can't\n      // test this scenario reliably without risking flaky tests, which is why we supply a mock\n      // MutationObserver and check that the methods are called at the right time.\n      TestBed.overrideProvider(MutationObserverFactory, {\n        deps: [],\n        useFactory: () => ({\n          create: () => ({observe: observeSpy, disconnect: disconnectSpy})\n        })\n      });\n\n      const fixture = TestBed.createComponent(ComponentWithTextContent);\n      fixture.detectChanges();\n\n      expect(observeSpy).toHaveBeenCalledTimes(1);\n      expect(disconnectSpy).not.toHaveBeenCalled();\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      expect(observeSpy).toHaveBeenCalledTimes(1);\n      expect(disconnectSpy).toHaveBeenCalledTimes(1);\n    });\n\n  });\n\n  describe('debounced', () => {\n    let fixture: ComponentFixture<ComponentWithDebouncedListener>;\n    let callbacks: Function[];\n    let invokeCallbacks = (args?: any) => callbacks.forEach(callback => callback(args));\n\n    beforeEach(async(() => {\n      callbacks = [];\n\n      TestBed.configureTestingModule({\n        imports: [ObserversModule],\n        declarations: [ComponentWithDebouncedListener],\n        providers: [{\n          provide: MutationObserverFactory,\n          useValue: {\n            create: function(callback: Function) {\n              callbacks.push(callback);\n\n              return {\n                observe: () => {},\n                disconnect: () => {}\n              };\n            }\n          }\n        }]\n      });\n\n      TestBed.compileComponents();\n\n      fixture = TestBed.createComponent(ComponentWithDebouncedListener);\n      fixture.detectChanges();\n    }));\n\n    it('should debounce the content changes', fakeAsync(() => {\n      invokeCallbacks();\n      invokeCallbacks();\n      invokeCallbacks();\n\n      tick(500);\n      expect(fixture.componentInstance.spy).toHaveBeenCalledTimes(1);\n    }));\n  });\n});\n\ndescribe('ContentObserver injectable', () => {\n  describe('basic usage', () => {\n    let callbacks: Function[];\n    let invokeCallbacks = (args?: any) => callbacks.forEach(callback => callback(args));\n    let contentObserver: ContentObserver;\n\n    beforeEach(fakeAsync(() => {\n      callbacks = [];\n\n      TestBed.configureTestingModule({\n        imports: [ObserversModule],\n        declarations: [UnobservedComponentWithTextContent],\n        providers: [{\n          provide: MutationObserverFactory,\n          useValue: {\n            create: function(callback: Function) {\n              callbacks.push(callback);\n\n              return {\n                observe: () => {},\n                disconnect: () => {}\n              };\n            }\n          }\n        }]\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    beforeEach(inject([ContentObserver], (co: ContentObserver) => {\n      contentObserver = co;\n    }));\n\n    it('should trigger the callback when the content of the element changes', fakeAsync(() => {\n      const spy = jasmine.createSpy('content observer');\n      const fixture = TestBed.createComponent(UnobservedComponentWithTextContent);\n      fixture.detectChanges();\n\n      contentObserver.observe(fixture.componentInstance.contentEl)\n          .subscribe(() => spy());\n\n      expect(spy).not.toHaveBeenCalled();\n\n      fixture.componentInstance.text = 'text';\n      invokeCallbacks();\n\n      expect(spy).toHaveBeenCalled();\n    }));\n\n    it('should only create one MutationObserver when observing the same element twice',\n        fakeAsync(inject([MutationObserverFactory], (mof: MutationObserverFactory) => {\n          const spy = jasmine.createSpy('content observer');\n          spyOn(mof, 'create').and.callThrough();\n          const fixture = TestBed.createComponent(UnobservedComponentWithTextContent);\n          fixture.detectChanges();\n\n          const sub1 = contentObserver.observe(fixture.componentInstance.contentEl)\n              .subscribe(() => spy());\n          contentObserver.observe(fixture.componentInstance.contentEl)\n              .subscribe(() => spy());\n\n          expect(mof.create).toHaveBeenCalledTimes(1);\n\n          fixture.componentInstance.text = 'text';\n          invokeCallbacks();\n\n          expect(spy).toHaveBeenCalledTimes(2);\n\n          spy.calls.reset();\n          sub1.unsubscribe();\n          fixture.componentInstance.text = 'text text';\n          invokeCallbacks();\n\n          expect(spy).toHaveBeenCalledTimes(1);\n        })));\n  });\n});\n\n\n@Component({\n  template: `\n    <div\n      (cdkObserveContent)=\"doSomething()\"\n      [cdkObserveContentDisabled]=\"disabled\">{{text}}</div>\n  `\n})\nclass ComponentWithTextContent {\n  text = '';\n  disabled = false;\n  doSomething() {}\n}\n\n@Component({ template: `<div (cdkObserveContent)=\"doSomething()\"><div>{{text}}</div></div>` })\nclass ComponentWithChildTextContent {\n  text = '';\n  doSomething() {}\n}\n\n@Component({\n  template: `<div (cdkObserveContent)=\"spy($event)\" [debounce]=\"debounce\">{{text}}</div>`\n})\nclass ComponentWithDebouncedListener {\n  debounce = 500;\n  spy = jasmine.createSpy('MutationObserver callback');\n}\n\n@Component({\n  template: `<div #contentEl>{{text}}</div>`\n})\nclass UnobservedComponentWithTextContent {\n  @ViewChild('contentEl') contentEl: ElementRef;\n  text = '';\n}\n"]}