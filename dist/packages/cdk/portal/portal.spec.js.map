{"version":3,"file":"portal.spec.js","sourceRoot":"","sources":["../../../../src/cdk/portal/portal.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {\n  NgModule,\n  Component,\n  ViewChild,\n  ViewChildren,\n  QueryList,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  Optional,\n  Injector,\n  ApplicationRef,\n  TemplateRef,\n  ComponentRef,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkPortal, CdkPortalOutlet, PortalModule} from './portal-directives';\nimport {Portal, ComponentPortal, TemplatePortal} from './portal';\nimport {DomPortalOutlet} from './dom-portal-outlet';\n\n\ndescribe('Portals', () => {\n\n  beforeEach(() => {\n    TestBed\n      .configureTestingModule({imports: [PortalModule, PortalTestModule]})\n      .compileComponents();\n  });\n\n  describe('CdkPortalOutlet', () => {\n    let fixture: ComponentFixture<PortalTestApp>;\n    let componentFactoryResolver: ComponentFactoryResolver;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(PortalTestApp);\n\n      inject([ComponentFactoryResolver], (cfr: ComponentFactoryResolver) => {\n        componentFactoryResolver = cfr;\n      })();\n    });\n\n    it('should load a component into the portal', () => {\n      // Set the selectedHost to be a ComponentPortal.\n      let testAppComponent = fixture.componentInstance;\n      let componentPortal = new ComponentPortal(PizzaMsg);\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n\n      testAppComponent.selectedPortal = componentPortal;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      expect(hostContainer.textContent).toContain('Pizza');\n      expect(testAppComponent.portalOutlet.portal).toBe(componentPortal);\n      expect(testAppComponent.portalOutlet.attachedRef instanceof ComponentRef).toBe(true);\n      expect(testAppComponent.attachedSpy)\n          .toHaveBeenCalledWith(testAppComponent.portalOutlet.attachedRef);\n    });\n\n    it('should load a template into the portal', () => {\n      let testAppComponent = fixture.componentInstance;\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      let templatePortal = new TemplatePortal(testAppComponent.templateRef, null!);\n\n      testAppComponent.selectedPortal = templatePortal;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present and no context is projected\n      expect(hostContainer.textContent).toContain('Banana');\n      expect(testAppComponent.portalOutlet.portal).toBe(templatePortal);\n\n      // We can't test whether it's an instance of an `EmbeddedViewRef` so\n      // we verify that it's defined and that it's not a ComponentRef.\n      expect(testAppComponent.portalOutlet.attachedRef instanceof ComponentRef).toBe(false);\n      expect(testAppComponent.portalOutlet.attachedRef).toBeTruthy();\n      expect(testAppComponent.attachedSpy)\n          .toHaveBeenCalledWith(testAppComponent.portalOutlet.attachedRef);\n    });\n\n    it('should project template context bindings in the portal', () => {\n      let testAppComponent = fixture.componentInstance;\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n\n      // TemplatePortal without context:\n      let templatePortal = new TemplatePortal(testAppComponent.templateRef, null!);\n      testAppComponent.selectedPortal = templatePortal;\n      fixture.detectChanges();\n      // Expect that the content of the attached portal is present and NO context is projected\n      expect(hostContainer.textContent).toContain('Banana - !');\n\n      // using TemplatePortal.attach method to set context\n      testAppComponent.selectedPortal = undefined;\n      fixture.detectChanges();\n      templatePortal.attach(testAppComponent.portalOutlet, {$implicit: {status: 'rotten'}});\n      fixture.detectChanges();\n      // Expect that the content of the attached portal is present and context given via the\n      // attach method is projected\n      expect(hostContainer.textContent).toContain('Banana - rotten!');\n\n      // using TemplatePortal constructor to set the context\n      templatePortal =\n        new TemplatePortal(testAppComponent.templateRef, null!, {$implicit: {status: 'fresh'}});\n      testAppComponent.selectedPortal = templatePortal;\n      fixture.detectChanges();\n      // Expect that the content of the attached portal is present and context given via the\n      // constructor is projected\n      expect(hostContainer.textContent).toContain('Banana - fresh!');\n\n      // using TemplatePortal constructor to set the context but also calling attach method with\n      // context, the latter should take precedence:\n      testAppComponent.selectedPortal = undefined;\n      fixture.detectChanges();\n      templatePortal.attach(testAppComponent.portalOutlet, {$implicit: {status: 'rotten'}});\n      fixture.detectChanges();\n      // Expect that the content of the attached portal is present and and context given via the\n      // attach method is projected and get precedence over constructor context\n      expect(hostContainer.textContent).toContain('Banana - rotten!');\n    });\n\n    it('should dispose the host when destroyed', () => {\n      // Set the selectedHost to be a ComponentPortal.\n      let testAppComponent = fixture.componentInstance;\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n\n      fixture.detectChanges();\n      expect(testAppComponent.selectedPortal.isAttached).toBe(true);\n\n      fixture.destroy();\n      expect(testAppComponent.selectedPortal.isAttached).toBe(false);\n    });\n\n    it('should load a component into the portal with a given injector', () => {\n      // Create a custom injector for the component.\n      let chocolateInjector = new ChocolateInjector(fixture.componentInstance.injector);\n\n      // Set the selectedHost to be a ComponentPortal.\n      let testAppComponent = fixture.componentInstance;\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg, undefined, chocolateInjector);\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pizza');\n      expect(hostContainer.textContent).toContain('Chocolate');\n    });\n\n    it('should load a <ng-template> portal', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal.\n      testAppComponent.selectedPortal = testAppComponent.cakePortal;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Cake');\n    });\n\n    it('should load a <ng-template> portal with the `*` sugar', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal (with the `*` syntax).\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pie');\n    });\n\n    it('should load a <ng-template> portal with a binding', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal.\n      testAppComponent.selectedPortal = testAppComponent.portalWithBinding;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Banana');\n\n      // When updating the binding value.\n      testAppComponent.fruit = 'Mango';\n      fixture.detectChanges();\n\n      // Expect the new value to be reflected in the rendered output.\n      expect(hostContainer.textContent).toContain('Mango');\n    });\n\n    it('should load a <ng-template> portal with an inner template', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Set the selectedHost to be a TemplatePortal.\n      testAppComponent.selectedPortal = testAppComponent.portalWithTemplate;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pineapple');\n\n      // When updating the binding value.\n      testAppComponent.fruits = ['Mangosteen'];\n      fixture.detectChanges();\n\n      // Expect the new value to be reflected in the rendered output.\n      expect(hostContainer.textContent).toContain('Mangosteen');\n    });\n\n    it('should change the attached portal', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Set the selectedHost to be a ComponentPortal.\n      testAppComponent.selectedPortal = testAppComponent.piePortal;\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      let hostContainer = fixture.nativeElement.querySelector('.portal-container');\n      expect(hostContainer.textContent).toContain('Pie');\n\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n      fixture.detectChanges();\n\n      expect(hostContainer.textContent).toContain('Pizza');\n    });\n\n    it('should detach the portal when it is set to null', () => {\n      let testAppComponent = fixture.componentInstance;\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n\n      fixture.detectChanges();\n      expect(testAppComponent.portalOutlet.hasAttached()).toBe(true);\n      expect(testAppComponent.portalOutlet.portal).toBe(testAppComponent.selectedPortal);\n\n      testAppComponent.selectedPortal = null!;\n      fixture.detectChanges();\n\n      expect(testAppComponent.portalOutlet.hasAttached()).toBe(false);\n      expect(testAppComponent.portalOutlet.portal).toBeNull();\n    });\n\n    it('should set the `portal` when attaching a component portal programmatically', () => {\n      let testAppComponent = fixture.componentInstance;\n      let portal = new ComponentPortal(PizzaMsg);\n\n      testAppComponent.portalOutlet.attachComponentPortal(portal);\n\n      expect(testAppComponent.portalOutlet.portal).toBe(portal);\n    });\n\n    it('should set the `portal` when attaching a template portal programmatically', () => {\n      let testAppComponent = fixture.componentInstance;\n      fixture.detectChanges();\n\n      testAppComponent.portalOutlet.attachTemplatePortal(testAppComponent.cakePortal);\n\n      expect(testAppComponent.portalOutlet.portal).toBe(testAppComponent.cakePortal);\n    });\n\n    it('should clear the portal reference on destroy', () => {\n      let testAppComponent = fixture.componentInstance;\n\n      testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n      fixture.detectChanges();\n\n      expect(testAppComponent.portalOutlet.portal).toBeTruthy();\n\n      fixture.destroy();\n\n      expect(testAppComponent.portalOutlet.portal).toBeNull();\n    });\n\n    it('should not clear programmatically-attached portals on init', () => {\n      fixture.destroy();\n\n      const unboundFixture = TestBed.createComponent(UnboundPortalTestApp);\n\n      // Note: calling `detectChanges` here will cause a false positive.\n      // What we're testing is attaching before the first CD cycle.\n      unboundFixture.componentInstance.portalOutlet.attach(new ComponentPortal(PizzaMsg));\n      unboundFixture.detectChanges();\n\n      expect(unboundFixture.nativeElement.querySelector('.portal-container').textContent)\n        .toContain('Pizza');\n    });\n\n    it('should be considered attached when attaching using `attach`', () => {\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(false);\n      fixture.componentInstance.portalOutlet.attach(new ComponentPortal(PizzaMsg));\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(true);\n    });\n\n    it('should be considered attached when attaching using `attachComponentPortal`', () => {\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(false);\n      fixture.componentInstance.portalOutlet.attachComponentPortal(new ComponentPortal(PizzaMsg));\n      expect(fixture.componentInstance.portalOutlet.hasAttached()).toBe(true);\n    });\n\n    it('should be considered attached when attaching using `attachTemplatePortal`', () => {\n      const instance = fixture.componentInstance;\n      expect(instance.portalOutlet.hasAttached()).toBe(false);\n      instance.portalOutlet.attachTemplatePortal(new TemplatePortal(instance.templateRef, null!));\n      expect(instance.portalOutlet.hasAttached()).toBe(true);\n    });\n\n    it('should use the `ComponentFactoryResolver` from the portal, if available', () => {\n      const spy = jasmine.createSpy('resolveComponentFactorySpy');\n      const portal = new ComponentPortal(PizzaMsg, undefined, undefined, {\n        resolveComponentFactory: (...args: any[]) => {\n          spy();\n          return componentFactoryResolver.resolveComponentFactory\n              .apply(componentFactoryResolver, args);\n        }\n      });\n\n      fixture.componentInstance.portalOutlet.attachComponentPortal(portal);\n      expect(spy).toHaveBeenCalled();\n    });\n\n  });\n\n  describe('DomPortalOutlet', () => {\n    let componentFactoryResolver: ComponentFactoryResolver;\n    let someViewContainerRef: ViewContainerRef;\n    let someInjector: Injector;\n    let someFixture: ComponentFixture<any>;\n    let someDomElement: HTMLElement;\n    let host: DomPortalOutlet;\n    let injector: Injector;\n    let appRef: ApplicationRef;\n    let deps = [ComponentFactoryResolver, Injector, ApplicationRef];\n\n    beforeEach(inject(deps, (cfr: ComponentFactoryResolver, i: Injector, ar: ApplicationRef) => {\n      componentFactoryResolver = cfr;\n      injector = i;\n      appRef = ar;\n    }));\n\n    beforeEach(() => {\n      someDomElement = document.createElement('div');\n      host = new DomPortalOutlet(someDomElement, componentFactoryResolver, appRef, injector);\n\n      someFixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\n      someViewContainerRef = someFixture.componentInstance.viewContainerRef;\n      someInjector = someFixture.componentInstance.injector;\n    });\n\n    it('should attach and detach a component portal', () => {\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef);\n\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\n\n      expect(componentInstance instanceof PizzaMsg).toBe(true);\n      expect(someDomElement.textContent).toContain('Pizza');\n\n      host.detach();\n\n      expect(someDomElement.innerHTML).toBe('');\n    });\n\n    it('should attach and detach a component portal with a given injector', () => {\n      let fixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\n      someViewContainerRef = fixture.componentInstance.viewContainerRef;\n      someInjector = fixture.componentInstance.injector;\n\n      let chocolateInjector = new ChocolateInjector(someInjector);\n      let portal = new ComponentPortal(PizzaMsg, someViewContainerRef, chocolateInjector);\n\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\n      fixture.detectChanges();\n\n      expect(componentInstance instanceof PizzaMsg).toBe(true);\n      expect(someDomElement.textContent).toContain('Pizza');\n      expect(someDomElement.textContent).toContain('Chocolate');\n\n      host.detach();\n\n      expect(someDomElement.innerHTML).toBe('');\n    });\n\n    it('should attach and detach a template portal', () => {\n      let fixture = TestBed.createComponent(PortalTestApp);\n      fixture.detectChanges();\n\n      fixture.componentInstance.cakePortal.attach(host);\n\n      expect(someDomElement.textContent).toContain('Cake');\n    });\n\n    it('should render a template portal with an inner template', () => {\n      let fixture = TestBed.createComponent(PortalTestApp);\n      fixture.detectChanges();\n\n      fixture.componentInstance.portalWithTemplate.attach(host);\n\n      expect(someDomElement.textContent).toContain('Durian');\n    });\n\n    it('should attach and detach a template portal with a binding', () => {\n      let fixture = TestBed.createComponent(PortalTestApp);\n\n      let testAppComponent = fixture.componentInstance;\n\n      // Detect changes initially so that the component's ViewChildren are resolved.\n      fixture.detectChanges();\n\n      // Attach the TemplatePortal.\n      testAppComponent.portalWithBinding.attach(host, {$implicit: {status: 'fresh'}});\n      fixture.detectChanges();\n\n      // Now that the portal is attached, change detection has to happen again in order\n      // for the bindings to update.\n      fixture.detectChanges();\n\n      // Expect that the content of the attached portal is present.\n      expect(someDomElement.textContent).toContain('Banana - fresh');\n\n      // When updating the binding value.\n      testAppComponent.fruit = 'Mango';\n      fixture.detectChanges();\n\n      // Expect the new value to be reflected in the rendered output.\n      expect(someDomElement.textContent).toContain('Mango');\n\n      host.detach();\n      expect(someDomElement.innerHTML).toBe('');\n    });\n\n    it('should change the attached portal', () => {\n      let fixture = TestBed.createComponent(ArbitraryViewContainerRefComponent);\n      someViewContainerRef = fixture.componentInstance.viewContainerRef;\n\n      let appFixture = TestBed.createComponent(PortalTestApp);\n      appFixture.detectChanges();\n\n      appFixture.componentInstance.piePortal.attach(host);\n\n      expect(someDomElement.textContent).toContain('Pie');\n\n      host.detach();\n      host.attach(new ComponentPortal(PizzaMsg, someViewContainerRef));\n\n      expect(someDomElement.textContent).toContain('Pizza');\n    });\n\n    it('should attach and detach a component portal without a ViewContainerRef', () => {\n      let portal = new ComponentPortal(PizzaMsg);\n\n      let componentInstance: PizzaMsg = portal.attach(host).instance;\n\n      expect(componentInstance instanceof PizzaMsg)\n          .toBe(true, 'Expected a PizzaMsg component to be created');\n      expect(someDomElement.textContent)\n          .toContain('Pizza', 'Expected the static string \"Pizza\" in the DomPortalOutlet.');\n\n      componentInstance.snack = new Chocolate();\n      someFixture.detectChanges();\n      expect(someDomElement.textContent)\n          .toContain('Chocolate', 'Expected the bound string \"Chocolate\" in the DomPortalOutlet');\n\n      host.detach();\n\n      expect(someDomElement.innerHTML)\n          .toBe('', 'Expected the DomPortalOutlet to be empty after detach');\n    });\n\n    it('should call the dispose function even if the host has no attached content', () => {\n      let spy = jasmine.createSpy('host dispose spy');\n\n      expect(host.hasAttached()).toBe(false, 'Expected host not to have attached content.');\n\n      host.setDisposeFn(spy);\n      host.dispose();\n\n      expect(spy).toHaveBeenCalled();\n    });\n\n    it('should use the `ComponentFactoryResolver` from the portal, if available', () => {\n      const spy = jasmine.createSpy('resolveComponentFactorySpy');\n      const portal = new ComponentPortal(PizzaMsg, undefined, undefined, {\n        resolveComponentFactory: (...args: any[]) => {\n          spy();\n          return componentFactoryResolver.resolveComponentFactory\n              .apply(componentFactoryResolver, args);\n        }\n      });\n\n      host.attachComponentPortal(portal);\n      expect(spy).toHaveBeenCalled();\n    });\n\n  });\n});\n\n\nclass Chocolate {\n  toString() {\n    return 'Chocolate';\n  }\n}\n\nclass ChocolateInjector {\n  constructor(public parentInjector: Injector) { }\n\n  get(token: any) {\n    return token === Chocolate ? new Chocolate() : this.parentInjector.get<any>(token);\n  }\n}\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p><p>{{snack}}</p>',\n})\nclass PizzaMsg {\n  constructor(@Optional() public snack: Chocolate) { }\n}\n\n/** Simple component to grab an arbitrary ViewContainerRef */\n@Component({\n  selector: 'some-placeholder',\n  template: '<p>Hello</p>'\n})\nclass ArbitraryViewContainerRefComponent {\n  constructor(public viewContainerRef: ViewContainerRef, public injector: Injector) { }\n}\n\n\n/** Test-bed component that contains a portal outlet and a couple of template portals. */\n@Component({\n  selector: 'portal-test',\n  template: `\n  <div class=\"portal-container\">\n    <ng-template [cdkPortalOutlet]=\"selectedPortal\" (attached)=\"attachedSpy($event)\"></ng-template>\n  </div>\n\n  <ng-template cdk-portal>Cake</ng-template>\n\n  <div *cdk-portal>Pie</div>\n  <ng-template cdk-portal let-data> {{fruit}} - {{ data?.status }} </ng-template>\n\n  <ng-template cdk-portal>\n    <ul>\n      <li *ngFor=\"let fruitName of fruits\"> {{fruitName}} </li>\n    </ul>\n  </ng-template>\n\n  <ng-template #templateRef let-data> {{fruit}} - {{ data?.status }}!</ng-template>\n  `,\n})\nclass PortalTestApp {\n  @ViewChildren(CdkPortal) portals: QueryList<CdkPortal>;\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n  @ViewChild('templateRef', { read: TemplateRef }) templateRef: TemplateRef<any>;\n\n  selectedPortal: Portal<any>|undefined;\n  fruit: string = 'Banana';\n  fruits = ['Apple', 'Pineapple', 'Durian'];\n  attachedSpy = jasmine.createSpy('attached spy');\n\n  constructor(public injector: Injector) { }\n\n  get cakePortal() {\n    return this.portals.first;\n  }\n\n  get piePortal() {\n    return this.portals.toArray()[1];\n  }\n\n  get portalWithBinding() {\n    return this.portals.toArray()[2];\n  }\n\n  get portalWithTemplate() {\n    return this.portals.toArray()[3];\n  }\n\n}\n\n/** Test-bed component that contains a portal outlet and a couple of template portals. */\n@Component({\n  template: `\n    <div class=\"portal-container\">\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>\n  `,\n})\nclass UnboundPortalTestApp {\n  @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n}\n\n// Create a real (non-test) NgModule as a workaround for\n// https://github.com/angular/angular/issues/10760\nconst TEST_COMPONENTS = [\n  PortalTestApp,\n  UnboundPortalTestApp,\n  ArbitraryViewContainerRefComponent,\n  PizzaMsg\n];\n\n@NgModule({\n  imports: [CommonModule, PortalModule],\n  exports: TEST_COMPONENTS,\n  declarations: TEST_COMPONENTS,\n  entryComponents: TEST_COMPONENTS,\n})\nclass PortalTestModule { }\n"]}