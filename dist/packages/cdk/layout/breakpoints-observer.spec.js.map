{"version":3,"file":"breakpoints-observer.spec.js","sourceRoot":"","sources":["../../../../src/cdk/layout/breakpoints-observer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LayoutModule} from './layout-module';\nimport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nimport {MediaMatcher} from './media-matcher';\nimport {fakeAsync, TestBed, inject, flush} from '@angular/core/testing';\nimport {Injectable} from '@angular/core';\n\ndescribe('BreakpointObserver', () => {\n  let breakpointManager: BreakpointObserver;\n  let mediaMatcher: FakeMediaMatcher;\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [LayoutModule],\n      providers: [{provide: MediaMatcher, useClass: FakeMediaMatcher}]\n    });\n  }));\n\n  beforeEach(inject(\n    [BreakpointObserver, MediaMatcher],\n    (bm: BreakpointObserver, mm: FakeMediaMatcher) => {\n      breakpointManager = bm;\n      mediaMatcher = mm;\n    }));\n\n  afterEach(() => {\n    mediaMatcher.clear();\n  });\n\n  it('retrieves the whether a query is currently matched', fakeAsync(() => {\n    const query = 'everything starts as true in the FakeMediaMatcher';\n    expect(breakpointManager.isMatched(query)).toBeTruthy();\n  }));\n\n  it('reuses the same MediaQueryList for matching queries', fakeAsync(() => {\n    expect(mediaMatcher.queryCount).toBe(0);\n    breakpointManager.observe('query1');\n    expect(mediaMatcher.queryCount).toBe(1);\n    breakpointManager.observe('query1');\n    expect(mediaMatcher.queryCount).toBe(1);\n    breakpointManager.observe('query2');\n    expect(mediaMatcher.queryCount).toBe(2);\n    breakpointManager.observe('query1');\n    expect(mediaMatcher.queryCount).toBe(2);\n  }));\n\n  it('splits combined query strings into individual matchMedia listeners', fakeAsync(() => {\n    expect(mediaMatcher.queryCount).toBe(0);\n    breakpointManager.observe('query1, query2');\n    expect(mediaMatcher.queryCount).toBe(2);\n    breakpointManager.observe('query1');\n    expect(mediaMatcher.queryCount).toBe(2);\n    breakpointManager.observe('query2, query3');\n    expect(mediaMatcher.queryCount).toBe(3);\n  }));\n\n  it('accepts an array of queries', fakeAsync(() => {\n    const queries = ['1 query', '2 query', 'red query', 'blue query'];\n    breakpointManager.observe(queries);\n    expect(mediaMatcher.queryCount).toBe(queries.length);\n  }));\n\n  it('completes all events when the breakpoint manager is destroyed', fakeAsync(() => {\n    const firstTest = jasmine.createSpy('test1');\n    breakpointManager.observe('test1').subscribe(undefined, undefined, firstTest);\n    const secondTest = jasmine.createSpy('test2');\n    breakpointManager.observe('test2').subscribe(undefined, undefined, secondTest);\n\n    flush();\n    expect(firstTest).not.toHaveBeenCalled();\n    expect(secondTest).not.toHaveBeenCalled();\n\n    breakpointManager.ngOnDestroy();\n    flush();\n\n    expect(firstTest).toHaveBeenCalled();\n    expect(secondTest).toHaveBeenCalled();\n  }));\n\n  it('emits an event on the observable when values change', fakeAsync(() => {\n    const query = '(width: 999px)';\n    let queryMatchState = false;\n    breakpointManager.observe(query).subscribe((state: BreakpointState) => {\n      queryMatchState = state.matches;\n    });\n\n    flush();\n    expect(queryMatchState).toBeTruthy();\n    mediaMatcher.setMatchesQuery(query, false);\n    flush();\n    expect(queryMatchState).toBeFalsy();\n  }));\n\n  it('emits an event on the observable with the matching state of all queries provided',\n    fakeAsync(() => {\n      const queryOne = '(width: 999px)';\n      const queryTwo = '(width: 700px)';\n      let state: BreakpointState = {matches: false, breakpoints: {}};\n      breakpointManager.observe([queryOne, queryTwo]).subscribe((breakpoint: BreakpointState) => {\n        state = breakpoint;\n      });\n\n      mediaMatcher.setMatchesQuery(queryOne, false);\n      mediaMatcher.setMatchesQuery(queryTwo, false);\n      flush();\n      expect(state.breakpoints).toEqual({[queryOne]: false, [queryTwo]: false});\n\n      mediaMatcher.setMatchesQuery(queryOne, true);\n      mediaMatcher.setMatchesQuery(queryTwo, false);\n      flush();\n      expect(state.breakpoints).toEqual({[queryOne]: true, [queryTwo]: false});\n  }));\n\n  it('emits a true matches state when the query is matched', fakeAsync(() => {\n    const query = '(width: 999px)';\n    breakpointManager.observe(query).subscribe();\n    mediaMatcher.setMatchesQuery(query, true);\n    expect(breakpointManager.isMatched(query)).toBeTruthy();\n  }));\n\n  it('emits a false matches state when the query is not matched', fakeAsync(() => {\n    const query = '(width: 999px)';\n    breakpointManager.observe(query).subscribe();\n    mediaMatcher.setMatchesQuery(query, false);\n    expect(breakpointManager.isMatched(query)).toBeFalsy();\n  }));\n});\n\nexport class FakeMediaQueryList {\n  /** The callback for change events. */\n  addListenerCallback?: (mql: MediaQueryListEvent) => void;\n\n  constructor(public matches: boolean, public media: string) {}\n\n  /** Toggles the matches state and \"emits\" a change event. */\n  setMatches(matches: boolean) {\n    this.matches = matches;\n    this.addListenerCallback!(this as any);\n  }\n\n  /** Registers the callback method for change events. */\n  addListener(callback: (mql: MediaQueryListEvent) => void) {\n    this.addListenerCallback = callback;\n  }\n\n  // Noop removal method for testing.\n  removeListener() { }\n}\n\n@Injectable()\nexport class FakeMediaMatcher {\n  /** A map of match media queries. */\n  private queries = new Map<string, FakeMediaQueryList>();\n\n  /** The number of distinct queries created in the media matcher during a test. */\n  get queryCount(): number {\n    return this.queries.size;\n  }\n\n  /** Fakes the match media response to be controlled in tests. */\n  matchMedia(query: string): FakeMediaQueryList {\n    const mql = new FakeMediaQueryList(true, query);\n    this.queries.set(query, mql);\n    return mql;\n  }\n\n  /** Clears all queries from the map of queries. */\n  clear() {\n    this.queries.clear();\n  }\n\n  /** Toggles the matching state of the provided query. */\n  setMatchesQuery(query: string, matches: boolean) {\n    if (this.queries.has(query)) {\n      this.queries.get(query)!.setMatches(matches);\n    } else {\n      throw Error('This query is not being observed.');\n    }\n  }\n}\n"]}