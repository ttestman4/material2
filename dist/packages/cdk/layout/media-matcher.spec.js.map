{"version":3,"file":"media-matcher.spec.js","sourceRoot":"","sources":["../../../../src/cdk/layout/media-matcher.spec.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,iCAAqC;AACrC,iDAA6C;AAC7C,iDAA6D;AAC7D,kDAA+C;AAE/C,QAAQ,CAAC,cAAc,EAAE;IACvB,IAAI,YAA0B,CAAC;IAE/B,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,oBAAY,CAAC;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,gBAAM,CAAC,CAAC,4BAAY,CAAC,EAAE,UAAC,EAAgB;QACjD,YAAY,GAAG,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,yDAAyD,EAAE;QAC5D,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;QACzE,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EACxE,gBAAM,CAAC,CAAC,mBAAQ,CAAC,EAAE,UAAC,QAAkB;QACpC,IAAM,WAAW,GAAM,IAAI,CAAC,MAAM,EAAE,OAAI,CAAC;QAEzC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QACrD,YAAY,CAAC,UAAU,CAAC,aAAW,WAAW,MAAG,CAAC,CAAC;QAEnD,IAAI,QAAQ,CAAC,MAAM,EAAE;YACnB,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;SACvD;aAAM;YACL,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;SACtD;QAED,SAAS,mBAAmB,CAAC,GAAW;YACtC,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;gBAClE,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAE,GAAG,CAAC,KAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjF,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {LayoutModule} from './index';\nimport {MediaMatcher} from './media-matcher';\nimport {async, TestBed, inject} from '@angular/core/testing';\nimport {Platform} from '@angular/cdk/platform';\n\ndescribe('MediaMatcher', () => {\n  let mediaMatcher: MediaMatcher;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [LayoutModule]\n    });\n  }));\n\n  beforeEach(inject([MediaMatcher], (mm: MediaMatcher) => {\n    mediaMatcher = mm;\n  }));\n\n  it('correctly returns a MediaQueryList to check for matches', () => {\n    expect(mediaMatcher.matchMedia('(min-width: 1px)').matches).toBeTruthy();\n    expect(mediaMatcher.matchMedia('(max-width: 1px)').matches).toBeFalsy();\n  });\n\n  it('should add CSS rules for provided queries when the platform is webkit',\n    inject([Platform], (platform: Platform) => {\n      const randomWidth = `${Math.random()}px`;\n\n      expect(getStyleTagByString(randomWidth)).toBeFalsy();\n      mediaMatcher.matchMedia(`(width: ${randomWidth})`);\n\n      if (platform.WEBKIT) {\n        expect(getStyleTagByString(randomWidth)).toBeTruthy();\n      } else {\n        expect(getStyleTagByString(randomWidth)).toBeFalsy();\n      }\n\n      function getStyleTagByString(str: string): HTMLStyleElement | undefined {\n        return Array.from(document.head!.querySelectorAll('style')).find(tag => {\n          const rules = tag.sheet ? Array.from((tag.sheet as CSSStyleSheet).cssRules) : [];\n          return !!rules.find(rule => rule.cssText.includes(str));\n        });\n      }\n  }));\n});\n"]}