{"version":3,"file":"modifiers.spec.js","sourceRoot":"","sources":["../../../../src/cdk/keycodes/modifiers.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {createKeyboardEvent} from '@angular/cdk/testing';\nimport {hasModifierKey} from './modifiers';\n\ndescribe('keyboard modifiers', () => {\n  it('should check whether the alt key is pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n\n    expect(hasModifierKey(event)).toBe(false);\n    Object.defineProperty(event, 'altKey', {get: () => true});\n    expect(hasModifierKey(event)).toBe(true);\n  });\n\n  it('should check whether the shift key is pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n\n    expect(hasModifierKey(event)).toBe(false);\n    Object.defineProperty(event, 'shiftKey', {get: () => true});\n    expect(hasModifierKey(event)).toBe(true);\n  });\n\n  it('should check whether the meta key is pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n\n    expect(hasModifierKey(event)).toBe(false);\n    Object.defineProperty(event, 'metaKey', {get: () => true});\n    expect(hasModifierKey(event)).toBe(true);\n  });\n\n  it('should check whether the ctrl key is pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n\n    expect(hasModifierKey(event)).toBe(false);\n    Object.defineProperty(event, 'ctrlKey', {get: () => true});\n    expect(hasModifierKey(event)).toBe(true);\n  });\n\n  it('should check if a particular modifier key is pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n    Object.defineProperty(event, 'ctrlKey', {get: () => true});\n\n    expect(hasModifierKey(event, 'altKey')).toBe(false);\n    Object.defineProperty(event, 'altKey', {get: () => true});\n    expect(hasModifierKey(event, 'altKey')).toBe(true);\n  });\n\n  it('should check if multiple specific modifier keys are pressed', () => {\n    const event = createKeyboardEvent('keydown', 0);\n    Object.defineProperty(event, 'ctrlKey', {get: () => true});\n\n    expect(hasModifierKey(event, 'altKey', 'shiftKey')).toBe(false);\n    Object.defineProperty(event, 'altKey', {get: () => true});\n    Object.defineProperty(event, 'shiftKey', {get: () => true});\n    expect(hasModifierKey(event, 'altKey', 'shiftKey')).toBe(true);\n  });\n\n});\n"]}