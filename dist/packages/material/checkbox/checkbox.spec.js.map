{"version":3,"file":"checkbox.spec.js","sourceRoot":"","sources":["../../../../src/lib/checkbox/checkbox.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ComponentFixture,\n  fakeAsync,\n  TestBed,\n  flush,\n  flushMicrotasks,\n} from '@angular/core/testing';\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\nimport {Component, DebugElement, ViewChild, Type, ChangeDetectionStrategy} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\nimport {MatCheckbox, MatCheckboxChange, MatCheckboxModule} from './index';\nimport {MAT_CHECKBOX_CLICK_ACTION} from './checkbox-config';\nimport {MutationObserverFactory} from '@angular/cdk/observers';\n\n\ndescribe('MatCheckbox', () => {\n  let fixture: ComponentFixture<any>;\n\n  function createComponent<T>(componentType: Type<T>, extraDeclarations: Type<any>[] = []) {\n    TestBed.configureTestingModule({\n      imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\n      declarations: [componentType, ...extraDeclarations],\n    }).compileComponents();\n\n    return TestBed.createComponent<T>(componentType);\n  }\n\n  describe('basic behaviors', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let checkboxInstance: MatCheckbox;\n    let testComponent: SingleCheckbox;\n    let inputElement: HTMLInputElement;\n    let labelElement: HTMLLabelElement;\n\n    beforeEach(() => {\n      fixture = createComponent(SingleCheckbox);\n      fixture.detectChanges();\n\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      checkboxInstance = checkboxDebugElement.componentInstance;\n      testComponent = fixture.debugElement.componentInstance;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n      labelElement = <HTMLLabelElement>checkboxNativeElement.querySelector('label');\n    });\n\n    it('should add and remove the checked state', () => {\n      expect(checkboxInstance.checked).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n      expect(inputElement.checked).toBe(false);\n\n      testComponent.isChecked = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n      expect(inputElement.checked).toBe(true);\n\n      testComponent.isChecked = false;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n      expect(inputElement.checked).toBe(false);\n    });\n\n    it('should expose the ripple instance', () => {\n      expect(checkboxInstance.ripple).toBeTruthy();\n    });\n\n    it('should add and remove indeterminate state', () => {\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n      expect(inputElement.checked).toBe(false);\n      expect(inputElement.indeterminate).toBe(false);\n      expect(inputElement.getAttribute('aria-checked'))\n          .toBe('false', 'Expect aria-checked to be false');\n\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\n      expect(inputElement.checked).toBe(false);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(inputElement.getAttribute('aria-checked'))\n          .toBe('mixed', 'Expect aria checked to be mixed for indeterminate checkbox');\n\n      testComponent.isIndeterminate = false;\n      fixture.detectChanges();\n\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-indeterminate');\n      expect(inputElement.checked).toBe(false);\n      expect(inputElement.indeterminate).toBe(false);\n    });\n\n    it('should set indeterminate to false when input clicked', fakeAsync(() => {\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.indeterminate).toBe(true);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(testComponent.isIndeterminate).toBe(true);\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flush();\n\n      // The checked property has been updated from the model and now the view needs\n      // to reflect the state change.\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(inputElement.indeterminate).toBe(false);\n      expect(inputElement.checked).toBe(true);\n      expect(testComponent.isIndeterminate).toBe(false);\n\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.indeterminate).toBe(true);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(inputElement.checked).toBe(true);\n      expect(testComponent.isIndeterminate).toBe(true);\n      expect(inputElement.getAttribute('aria-checked'))\n          .toBe('true', 'Expect aria checked to be true');\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flush();\n\n      // The checked property has been updated from the model and now the view needs\n      // to reflect the state change.\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(inputElement.indeterminate).toBe(false);\n      expect(inputElement.checked).toBe(false);\n      expect(testComponent.isIndeterminate).toBe(false);\n    }));\n\n    it('should not set indeterminate to false when checked is set programmatically', () => {\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.indeterminate).toBe(true);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(testComponent.isIndeterminate).toBe(true);\n\n      testComponent.isChecked = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(inputElement.checked).toBe(true);\n      expect(testComponent.isIndeterminate).toBe(true);\n\n      testComponent.isChecked = false;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(inputElement.indeterminate).toBe(true);\n      expect(inputElement.checked).toBe(false);\n      expect(testComponent.isIndeterminate).toBe(true);\n    });\n\n    it('should change native element checked when check programmatically', () => {\n      expect(inputElement.checked).toBe(false);\n\n      checkboxInstance.checked = true;\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n    });\n\n    it('should toggle checked state on click', () => {\n      expect(checkboxInstance.checked).toBe(false);\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n    });\n\n    it('should change from indeterminate to checked on click', fakeAsync(() => {\n      testComponent.isChecked = false;\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(checkboxInstance.indeterminate).toBe(true);\n\n      checkboxInstance._onInputClick(<Event>{stopPropagation: () => {}});\n\n      // Flush the microtasks because the indeterminate state will be updated in the next tick.\n      flush();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(checkboxInstance.indeterminate).toBe(false);\n\n      checkboxInstance._onInputClick(<Event>{stopPropagation: () => {}});\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(checkboxInstance.indeterminate).toBe(false);\n\n      flush();\n    }));\n\n    it('should add and remove disabled state', () => {\n      expect(checkboxInstance.disabled).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\n      expect(inputElement.tabIndex).toBe(0);\n      expect(inputElement.disabled).toBe(false);\n\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(true);\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-disabled');\n      expect(inputElement.disabled).toBe(true);\n\n      testComponent.isDisabled = false;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\n      expect(inputElement.tabIndex).toBe(0);\n      expect(inputElement.disabled).toBe(false);\n    });\n\n    it('should not toggle `checked` state upon interation while disabled', () => {\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n\n      checkboxNativeElement.click();\n      expect(checkboxInstance.checked).toBe(false);\n    });\n\n    it('should overwrite indeterminate state when clicked', fakeAsync(() => {\n      testComponent.isIndeterminate = true;\n      fixture.detectChanges();\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      // Flush the microtasks because the indeterminate state will be updated in the next tick.\n      flush();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(checkboxInstance.indeterminate).toBe(false);\n    }));\n\n    it('should preserve the user-provided id', () => {\n      expect(checkboxNativeElement.id).toBe('simple-check');\n      expect(inputElement.id).toBe('simple-check-input');\n    });\n\n    it('should generate a unique id for the checkbox input if no id is set', () => {\n      testComponent.checkboxId = null;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.inputId).toMatch(/mat-checkbox-\\d+/);\n      expect(inputElement.id).toBe(checkboxInstance.inputId);\n    });\n\n    it('should project the checkbox content into the label element', () => {\n      let label = <HTMLLabelElement>checkboxNativeElement.querySelector('.mat-checkbox-label');\n      expect(label.textContent!.trim()).toBe('Simple checkbox');\n    });\n\n    it('should make the host element a tab stop', () => {\n      expect(inputElement.tabIndex).toBe(0);\n    });\n\n    it('should add a css class to position the label before the checkbox', () => {\n      testComponent.labelPos = 'before';\n      fixture.detectChanges();\n\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-label-before');\n    });\n\n    it('should not trigger the click event multiple times', () => {\n      // By default, when clicking on a label element, a generated click will be dispatched\n      // on the associated input element.\n      // Since we're using a label element and a visual hidden input, this behavior can led\n      // to an issue, where the click events on the checkbox are getting executed twice.\n\n      spyOn(testComponent, 'onCheckboxClick');\n\n      expect(inputElement.checked).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n      expect(inputElement.checked).toBe(true);\n\n      expect(testComponent.onCheckboxClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('should trigger a change event when the native input does', fakeAsync(() => {\n      spyOn(testComponent, 'onCheckboxChange');\n\n      expect(inputElement.checked).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n\n      fixture.detectChanges();\n      flush();\n\n      // The change event shouldn't fire, because the value change was not caused\n      // by any interaction.\n      expect(testComponent.onCheckboxChange).toHaveBeenCalledTimes(1);\n    }));\n\n    it('should not trigger the change event by changing the native value', fakeAsync(() => {\n      spyOn(testComponent, 'onCheckboxChange');\n\n      expect(inputElement.checked).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n\n      testComponent.isChecked = true;\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n\n      fixture.detectChanges();\n      flush();\n\n      // The change event shouldn't fire, because the value change was not caused\n      // by any interaction.\n      expect(testComponent.onCheckboxChange).not.toHaveBeenCalled();\n    }));\n\n    it('should forward the required attribute', () => {\n      testComponent.isRequired = true;\n      fixture.detectChanges();\n\n      expect(inputElement.required).toBe(true);\n\n      testComponent.isRequired = false;\n      fixture.detectChanges();\n\n      expect(inputElement.required).toBe(false);\n    });\n\n    it('should focus on underlying input element when focus() is called', () => {\n      expect(document.activeElement).not.toBe(inputElement);\n\n      checkboxInstance.focus();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(inputElement);\n    });\n\n    it('should forward the value to input element', () => {\n      testComponent.checkboxValue = 'basic_checkbox';\n      fixture.detectChanges();\n\n      expect(inputElement.value).toBe('basic_checkbox');\n    });\n\n    it('should remove the SVG checkmark from the tab order', () => {\n      expect(checkboxNativeElement.querySelector('svg')!.getAttribute('focusable')).toBe('false');\n    });\n\n    describe('ripple elements', () => {\n\n      it('should show ripples on label mousedown', () => {\n        const rippleSelector = '.mat-ripple-element:not(.mat-checkbox-persistent-ripple)';\n\n        expect(checkboxNativeElement.querySelector(rippleSelector)).toBeFalsy();\n\n        dispatchFakeEvent(labelElement, 'mousedown');\n        dispatchFakeEvent(labelElement, 'mouseup');\n\n        expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(1);\n      });\n\n      it('should not show ripples when disabled', () => {\n        const rippleSelector = '.mat-ripple-element:not(.mat-checkbox-persistent-ripple)';\n        testComponent.isDisabled = true;\n        fixture.detectChanges();\n\n        dispatchFakeEvent(labelElement, 'mousedown');\n        dispatchFakeEvent(labelElement, 'mouseup');\n\n        expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(0);\n\n        testComponent.isDisabled = false;\n        fixture.detectChanges();\n\n        dispatchFakeEvent(labelElement, 'mousedown');\n        dispatchFakeEvent(labelElement, 'mouseup');\n\n        expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(1);\n      });\n\n      it('should remove ripple if matRippleDisabled input is set', () => {\n        const rippleSelector = '.mat-ripple-element:not(.mat-checkbox-persistent-ripple)';\n        testComponent.disableRipple = true;\n        fixture.detectChanges();\n\n        dispatchFakeEvent(labelElement, 'mousedown');\n        dispatchFakeEvent(labelElement, 'mouseup');\n\n        expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(0);\n\n        testComponent.disableRipple = false;\n        fixture.detectChanges();\n\n        dispatchFakeEvent(labelElement, 'mousedown');\n        dispatchFakeEvent(labelElement, 'mouseup');\n\n        expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(1);\n      });\n    });\n\n    describe('color behaviour', () => {\n      it('should apply class based on color attribute', () => {\n        testComponent.checkboxColor = 'primary';\n        fixture.detectChanges();\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(true);\n\n        testComponent.checkboxColor = 'accent';\n        fixture.detectChanges();\n        expect(checkboxNativeElement.classList.contains('mat-accent')).toBe(true);\n      });\n\n      it('should not clear previous defined classes', () => {\n        checkboxNativeElement.classList.add('custom-class');\n\n        testComponent.checkboxColor = 'primary';\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(true);\n        expect(checkboxNativeElement.classList.contains('custom-class')).toBe(true);\n\n        testComponent.checkboxColor = 'accent';\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList.contains('mat-primary')).toBe(false);\n        expect(checkboxNativeElement.classList.contains('mat-accent')).toBe(true);\n        expect(checkboxNativeElement.classList.contains('custom-class')).toBe(true);\n\n      });\n    });\n\n    describe('state transition css classes', () => {\n      it('should transition unchecked -> checked -> unchecked', () => {\n        inputElement.click();\n        fixture.detectChanges();\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-anim-unchecked-checked');\n\n        inputElement.click();\n        fixture.detectChanges();\n        expect(checkboxNativeElement.classList)\n            .not.toContain('mat-checkbox-anim-unchecked-checked');\n        expect(checkboxNativeElement.classList)\n            .toContain('mat-checkbox-anim-checked-unchecked');\n      });\n\n      it('should transition unchecked -> indeterminate -> unchecked', () => {\n        testComponent.isIndeterminate = true;\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList)\n            .toContain('mat-checkbox-anim-unchecked-indeterminate');\n\n        testComponent.isIndeterminate = false;\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList)\n            .not.toContain('mat-checkbox-anim-unchecked-indeterminate');\n        expect(checkboxNativeElement.classList)\n            .toContain('mat-checkbox-anim-indeterminate-unchecked');\n      });\n\n      it('should transition indeterminate -> checked', () => {\n        testComponent.isIndeterminate = true;\n        fixture.detectChanges();\n\n        inputElement.click();\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList).not.toContain(\n            'mat-checkbox-anim-unchecked-indeterminate');\n        expect(checkboxNativeElement.classList)\n            .toContain('mat-checkbox-anim-indeterminate-checked');\n      });\n\n      it('should not apply transition classes when there is no state change', () => {\n        testComponent.isChecked = checkboxInstance.checked;\n        fixture.detectChanges();\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\n\n        testComponent.isIndeterminate = checkboxInstance.indeterminate;\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\n      });\n\n      it('should not initially have any transition classes', () => {\n        expect(checkboxNativeElement).not.toMatch(/^mat\\-checkbox\\-anim/g);\n      });\n\n      it('should not have transition classes when animation ends', fakeAsync(() => {\n        testComponent.isIndeterminate = true;\n        fixture.detectChanges();\n\n        expect(checkboxNativeElement.classList)\n          .toContain('mat-checkbox-anim-unchecked-indeterminate');\n\n        flush();\n\n        expect(checkboxNativeElement.classList)\n          .not.toContain('mat-checkbox-anim-unchecked-indeterminate');\n      }));\n    });\n\n    describe(`when MAT_CHECKBOX_CLICK_ACTION is 'check'`, () => {\n      beforeEach(() => {\n        TestBed.resetTestingModule();\n        TestBed.configureTestingModule({\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\n          declarations: [SingleCheckbox],\n          providers: [\n            {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'check'}\n          ]\n        });\n\n        fixture = createComponent(SingleCheckbox);\n        fixture.detectChanges();\n\n        checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n        checkboxNativeElement = checkboxDebugElement.nativeElement;\n        checkboxInstance = checkboxDebugElement.componentInstance;\n        testComponent = fixture.debugElement.componentInstance;\n\n        inputElement = checkboxNativeElement.querySelector('input') as HTMLInputElement;\n        labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\n      });\n\n      it('should not set `indeterminate` to false on click if check is set', fakeAsync(() => {\n        testComponent.isIndeterminate = true;\n        inputElement.click();\n\n        fixture.detectChanges();\n        flush();\n        fixture.detectChanges();\n        expect(inputElement.checked).toBe(true);\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n        expect(inputElement.indeterminate).toBe(true);\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\n      }));\n    });\n\n    describe(`when MAT_CHECKBOX_CLICK_ACTION is 'noop'`, () => {\n      beforeEach(() => {\n        TestBed.resetTestingModule();\n        TestBed.configureTestingModule({\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\n          declarations: [SingleCheckbox],\n          providers: [\n            {provide: MAT_CHECKBOX_CLICK_ACTION, useValue: 'noop'}\n          ]\n        });\n\n        fixture = createComponent(SingleCheckbox);\n        fixture.detectChanges();\n\n        checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n        checkboxNativeElement = checkboxDebugElement.nativeElement;\n        checkboxInstance = checkboxDebugElement.componentInstance;\n        testComponent = fixture.debugElement.componentInstance;\n        inputElement = checkboxNativeElement.querySelector('input') as HTMLInputElement;\n        labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\n      });\n\n      it('should not change `indeterminate` on click if noop is set', fakeAsync(() => {\n        testComponent.isIndeterminate = true;\n        inputElement.click();\n\n        fixture.detectChanges();\n        flush();\n        fixture.detectChanges();\n\n        expect(inputElement.checked).toBe(false);\n        expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n        expect(inputElement.indeterminate).toBe(true);\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\n      }));\n\n\n      it(`should not change 'checked' or 'indeterminate' on click if noop is set`, fakeAsync(() => {\n        testComponent.isChecked = true;\n        testComponent.isIndeterminate = true;\n        inputElement.click();\n\n        fixture.detectChanges();\n        flush();\n        fixture.detectChanges();\n\n        expect(inputElement.checked).toBe(true);\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-checked');\n        expect(inputElement.indeterminate).toBe(true);\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\n\n        testComponent.isChecked = false;\n        inputElement.click();\n\n        fixture.detectChanges();\n        flush();\n        fixture.detectChanges();\n\n        expect(inputElement.checked).toBe(false);\n        expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-checked');\n        expect(inputElement.indeterminate).toBe(true, 'indeterminate should not change');\n        expect(checkboxNativeElement.classList).toContain('mat-checkbox-indeterminate');\n      }));\n    });\n  });\n\n  describe('with change event and no initial value', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let checkboxInstance: MatCheckbox;\n    let testComponent: CheckboxWithChangeEvent;\n    let inputElement: HTMLInputElement;\n    let labelElement: HTMLLabelElement;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithChangeEvent);\n      fixture.detectChanges();\n\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      checkboxInstance = checkboxDebugElement.componentInstance;\n      testComponent = fixture.debugElement.componentInstance;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n      labelElement = <HTMLLabelElement>checkboxNativeElement.querySelector('label');\n    });\n\n    it('should emit the event to the change observable', () => {\n      let changeSpy = jasmine.createSpy('onChangeObservable');\n\n      checkboxInstance.change.subscribe(changeSpy);\n\n      fixture.detectChanges();\n      expect(changeSpy).not.toHaveBeenCalled();\n\n      // When changing the native `checked` property the checkbox will not fire a change event,\n      // because the element is not focused and it's not the native behavior of the input element.\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(changeSpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should not emit a DOM event to the change output', fakeAsync(() => {\n      fixture.detectChanges();\n      expect(testComponent.lastEvent).toBeUndefined();\n\n      // Trigger the click on the inputElement, because the input will probably\n      // emit a DOM event to the change output.\n      inputElement.click();\n      fixture.detectChanges();\n      flush();\n\n      // We're checking the arguments type / emitted value to be a boolean, because sometimes the\n      // emitted value can be a DOM Event, which is not valid.\n      // See angular/angular#4059\n      expect(testComponent.lastEvent.checked).toBe(true);\n    }));\n  });\n\n  describe('aria-label', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let inputElement: HTMLInputElement;\n\n    it('should use the provided aria-label', () => {\n      fixture = createComponent(CheckboxWithAriaLabel);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n\n      fixture.detectChanges();\n      expect(inputElement.getAttribute('aria-label')).toBe('Super effective');\n    });\n\n    it('should not set the aria-label attribute if no value is provided', () => {\n      fixture = createComponent(SingleCheckbox);\n      fixture.detectChanges();\n\n      expect(fixture.nativeElement.querySelector('input').hasAttribute('aria-label')).toBe(false);\n    });\n  });\n\n  describe('with provided aria-labelledby ', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let inputElement: HTMLInputElement;\n\n    it('should use the provided aria-labelledby', () => {\n      fixture = createComponent(CheckboxWithAriaLabelledby);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n\n      fixture.detectChanges();\n      expect(inputElement.getAttribute('aria-labelledby')).toBe('some-id');\n    });\n\n    it('should not assign aria-labelledby if none is provided', () => {\n      fixture = createComponent(SingleCheckbox);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n\n      fixture.detectChanges();\n      expect(inputElement.getAttribute('aria-labelledby')).toBe(null);\n    });\n  });\n\n  describe('with provided tabIndex', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let testComponent: CheckboxWithTabIndex;\n    let inputElement: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithTabIndex);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n    });\n\n    it('should preserve any given tabIndex', () => {\n      expect(inputElement.tabIndex).toBe(7);\n    });\n\n    it('should preserve given tabIndex when the checkbox is disabled then enabled', () => {\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n\n      testComponent.customTabIndex = 13;\n      fixture.detectChanges();\n\n      testComponent.isDisabled = false;\n      fixture.detectChanges();\n\n      expect(inputElement.tabIndex).toBe(13);\n    });\n\n  });\n\n  describe('with native tabindex attribute', () => {\n    it('should properly detect native tabindex attribute', fakeAsync(() => {\n      fixture = createComponent(CheckboxWithTabindexAttr);\n      fixture.detectChanges();\n\n      const checkbox = fixture.debugElement\n        .query(By.directive(MatCheckbox)).componentInstance as MatCheckbox;\n\n      expect(checkbox.tabIndex)\n        .toBe(5, 'Expected tabIndex property to have been set based on the native attribute');\n    }));\n\n    it('should clear the tabindex attribute from the host element', () => {\n      fixture = createComponent(CheckboxWithTabindexAttr);\n      fixture.detectChanges();\n\n      const checkbox = fixture.debugElement.query(By.directive(MatCheckbox)).nativeElement;\n      expect(checkbox.getAttribute('tabindex')).toBeFalsy();\n    });\n  });\n\n  describe('using ViewChild', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let testComponent: CheckboxUsingViewChild;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxUsingViewChild);\n      fixture.detectChanges();\n\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      testComponent = fixture.debugElement.componentInstance;\n    });\n\n    it('should toggle checkbox disabledness correctly', () => {\n      const checkboxInstance = checkboxDebugElement.componentInstance;\n      const inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n      expect(checkboxInstance.disabled).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\n      expect(inputElement.tabIndex).toBe(0);\n      expect(inputElement.disabled).toBe(false);\n\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(true);\n      expect(checkboxNativeElement.classList).toContain('mat-checkbox-disabled');\n      expect(inputElement.disabled).toBe(true);\n\n      testComponent.isDisabled = false;\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(false);\n      expect(checkboxNativeElement.classList).not.toContain('mat-checkbox-disabled');\n      expect(inputElement.tabIndex).toBe(0);\n      expect(inputElement.disabled).toBe(false);\n    });\n\n    it('should toggle checkbox ripple disabledness correctly', () => {\n      const rippleSelector = '.mat-ripple-element:not(.mat-checkbox-persistent-ripple)';\n      const labelElement = checkboxNativeElement.querySelector('label') as HTMLLabelElement;\n\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n      dispatchFakeEvent(labelElement, 'mousedown');\n      dispatchFakeEvent(labelElement, 'mouseup');\n      expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(0);\n\n      testComponent.isDisabled = false;\n      fixture.detectChanges();\n      dispatchFakeEvent(labelElement, 'mousedown');\n      dispatchFakeEvent(labelElement, 'mouseup');\n      expect(checkboxNativeElement.querySelectorAll(rippleSelector).length).toBe(1);\n    });\n  });\n\n  describe('with multiple checkboxes', () => {\n    beforeEach(() => {\n      fixture = createComponent(MultipleCheckboxes);\n      fixture.detectChanges();\n    });\n\n    it('should assign a unique id to each checkbox', () => {\n      let [firstId, secondId] =\n          fixture.debugElement.queryAll(By.directive(MatCheckbox))\n          .map(debugElement => debugElement.nativeElement.querySelector('input').id);\n\n      expect(firstId).toMatch(/mat-checkbox-\\d+-input/);\n      expect(secondId).toMatch(/mat-checkbox-\\d+-input/);\n      expect(firstId).not.toEqual(secondId);\n    });\n  });\n\n  describe('with ngModel', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let checkboxInstance: MatCheckbox;\n    let inputElement: HTMLInputElement;\n    let ngModel: NgModel;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithNgModel);\n\n      fixture.componentInstance.isRequired = false;\n      fixture.detectChanges();\n\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      checkboxInstance = checkboxDebugElement.componentInstance;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n      ngModel = checkboxDebugElement.injector.get<NgModel>(NgModel);\n    });\n\n    it('should be pristine, untouched, and valid initially', () => {\n      expect(ngModel.valid).toBe(true);\n      expect(ngModel.pristine).toBe(true);\n      expect(ngModel.touched).toBe(false);\n    });\n\n    it('should have correct control states after interaction', fakeAsync(() => {\n      inputElement.click();\n      fixture.detectChanges();\n\n      // Flush the timeout that is being created whenever a `click` event has been fired by\n      // the underlying input.\n      flush();\n\n      // After the value change through interaction, the control should be dirty, but remain\n      // untouched as long as the focus is still on the underlying input.\n      expect(ngModel.pristine).toBe(false);\n      expect(ngModel.touched).toBe(false);\n\n      // If the input element loses focus, the control should remain dirty but should\n      // also turn touched.\n      dispatchFakeEvent(inputElement, 'blur');\n      fixture.detectChanges();\n      flushMicrotasks();\n\n      expect(ngModel.pristine).toBe(false);\n      expect(ngModel.touched).toBe(true);\n    }));\n\n    it('should mark the element as touched on blur when inside an OnPush parent', fakeAsync(() => {\n      fixture.destroy();\n      TestBed.resetTestingModule();\n      fixture = createComponent(CheckboxWithNgModelAndOnPush);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      checkboxInstance = checkboxDebugElement.componentInstance;\n      inputElement = <HTMLInputElement>checkboxNativeElement.querySelector('input');\n      ngModel = checkboxDebugElement.injector.get<NgModel>(NgModel);\n\n      inputElement.click();\n      fixture.detectChanges();\n      flush();\n\n      expect(checkboxNativeElement.classList).not.toContain('ng-touched');\n\n      dispatchFakeEvent(inputElement, 'blur');\n      fixture.detectChanges();\n      flushMicrotasks();\n      fixture.detectChanges();\n\n      expect(checkboxNativeElement.classList).toContain('ng-touched');\n    }));\n\n\n    it('should not throw an error when disabling while focused', fakeAsync(() => {\n      expect(() => {\n        // Focus the input element because after disabling, the `blur` event should automatically\n        // fire and not result in a changed after checked exception. Related: #12323\n        inputElement.focus();\n\n        // Flush the two nested timeouts from the FocusMonitor that are being created on `focus`.\n        flush();\n\n        checkboxInstance.disabled = true;\n        fixture.detectChanges();\n        flushMicrotasks();\n      }).not.toThrow();\n    }));\n\n    it('should toggle checked state on click', () => {\n      expect(checkboxInstance.checked).toBe(false);\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n    });\n\n    it('should validate with RequiredTrue validator', () => {\n      fixture.componentInstance.isRequired = true;\n      inputElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(true);\n      expect(ngModel.valid).toBe(true);\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.checked).toBe(false);\n      expect(ngModel.valid).toBe(false);\n    });\n  });\n\n  describe('with name attribute', () => {\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithNameAttribute);\n      fixture.detectChanges();\n    });\n\n    it('should forward name value to input element', () => {\n      let checkboxElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      let inputElement = <HTMLInputElement> checkboxElement.nativeElement.querySelector('input');\n\n      expect(inputElement.getAttribute('name')).toBe('test-name');\n    });\n  });\n\n  describe('with form control', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxInstance: MatCheckbox;\n    let testComponent: CheckboxWithFormControl;\n    let inputElement: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithFormControl);\n      fixture.detectChanges();\n\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatCheckbox));\n      checkboxInstance = checkboxDebugElement.componentInstance;\n      testComponent = fixture.debugElement.componentInstance;\n      inputElement = <HTMLInputElement>checkboxDebugElement.nativeElement.querySelector('input');\n    });\n\n    it('should toggle the disabled state', () => {\n      expect(checkboxInstance.disabled).toBe(false);\n\n      testComponent.formControl.disable();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(true);\n      expect(inputElement.disabled).toBe(true);\n\n      testComponent.formControl.enable();\n      fixture.detectChanges();\n\n      expect(checkboxInstance.disabled).toBe(false);\n      expect(inputElement.disabled).toBe(false);\n    });\n  });\n\n  describe('without label', () => {\n    let testComponent: CheckboxWithoutLabel;\n    let checkboxInnerContainer: HTMLElement;\n\n    beforeEach(() => {\n      fixture = createComponent(CheckboxWithoutLabel);\n\n      const checkboxDebugEl = fixture.debugElement.query(By.directive(MatCheckbox));\n\n      testComponent = fixture.componentInstance;\n      checkboxInnerContainer = checkboxDebugEl\n        .query(By.css('.mat-checkbox-inner-container')).nativeElement;\n    });\n\n    it('should remove margin for checkbox without a label', () => {\n      fixture.detectChanges();\n\n      expect(checkboxInnerContainer.classList)\n        .toContain('mat-checkbox-inner-container-no-side-margin');\n    });\n\n    it('should not remove margin if initial label is set through binding', () => {\n      testComponent.label = 'Some content';\n      fixture.detectChanges();\n\n      expect(checkboxInnerContainer.classList)\n        .not.toContain('mat-checkbox-inner-container-no-side-margin');\n    });\n\n    it('should re-add margin if label is added asynchronously', () => {\n      fixture.destroy();\n\n      const mutationCallbacks: Function[] = [];\n\n      TestBed\n        .resetTestingModule()\n        .configureTestingModule({\n          imports: [MatCheckboxModule, FormsModule, ReactiveFormsModule],\n          declarations: [CheckboxWithoutLabel],\n          providers: [{\n            provide: MutationObserverFactory,\n            useValue: {\n              // Stub out the factory that creates mutation observers for the underlying directive\n              // to allows us to flush out the callbacks asynchronously.\n              create: (callback: Function) => {\n                mutationCallbacks.push(callback);\n\n                return {\n                  observe: () => {},\n                  disconnect: () => {}\n                };\n              }\n            }\n          }]\n        })\n        .compileComponents();\n\n      fixture = createComponent(CheckboxWithoutLabel);\n      checkboxInnerContainer = fixture.debugElement\n        .query(By.css('.mat-checkbox-inner-container')).nativeElement;\n\n      fixture.detectChanges();\n\n      expect(checkboxInnerContainer.classList)\n        .toContain('mat-checkbox-inner-container-no-side-margin');\n\n      fixture.componentInstance.label = 'Some content';\n      fixture.detectChanges();\n      mutationCallbacks.forEach(callback => callback());\n\n      // The MutationObserver from the cdkObserveContent directive detected the content change\n      // and notified the checkbox component. The checkbox then marks the component as dirty\n      // by calling `markForCheck()`. This needs to be reflected by the component template then.\n      fixture.detectChanges();\n\n      expect(checkboxInnerContainer.classList)\n        .not.toContain('mat-checkbox-inner-container-no-side-margin');\n    });\n\n    it('should not add the \"name\" attribute if it is not passed in', () => {\n      fixture.detectChanges();\n      expect(checkboxInnerContainer.querySelector('input')!.hasAttribute('name')).toBe(false);\n    });\n\n    it('should not add the \"value\" attribute if it is not passed in', () => {\n      fixture.detectChanges();\n      expect(checkboxInnerContainer.querySelector('input')!.hasAttribute('value')).toBe(false);\n    });\n  });\n\n  describe('label margin', () => {\n    it('should properly update margin if label content is projected', () => {\n      const mutationCallbacks: Function[] = [];\n\n      TestBed.configureTestingModule({\n        providers: [\n          {provide: MutationObserverFactory, useValue: {\n            create: (callback: Function) => {\n              mutationCallbacks.push(callback);\n              return {observe: () => {}, disconnect: () => {}};\n            }\n          }}\n        ]\n      });\n\n      fixture = createComponent(CheckboxWithProjectedLabel, [TextBindingComponent]);\n      fixture.detectChanges();\n\n      const checkboxInnerContainer = fixture.debugElement\n        .query(By.css('.mat-checkbox-inner-container')).nativeElement;\n\n      // Do not run the change detection for the fixture manually because we want to verify\n      // that the checkbox properly toggles the margin class even if the observe content output\n      // fires outside of the zone.\n      mutationCallbacks.forEach(callback => callback());\n\n      expect(checkboxInnerContainer.classList).not\n        .toContain('mat-checkbox-inner-container-no-side-margin');\n    });\n  });\n});\n\n/** Simple component for testing a single checkbox. */\n@Component({\n  template: `\n  <div (click)=\"parentElementClicked = true\" (keyup)=\"parentElementKeyedUp = true\">\n    <mat-checkbox\n        [id]=\"checkboxId\"\n        [required]=\"isRequired\"\n        [labelPosition]=\"labelPos\"\n        [checked]=\"isChecked\"\n        [(indeterminate)]=\"isIndeterminate\"\n        [disabled]=\"isDisabled\"\n        [color]=\"checkboxColor\"\n        [disableRipple]=\"disableRipple\"\n        [value]=\"checkboxValue\"\n        (click)=\"onCheckboxClick($event)\"\n        (change)=\"onCheckboxChange($event)\">\n      Simple checkbox\n    </mat-checkbox>\n  </div>`\n})\nclass SingleCheckbox {\n  labelPos: 'before' | 'after' = 'after';\n  isChecked: boolean = false;\n  isRequired: boolean = false;\n  isIndeterminate: boolean = false;\n  isDisabled: boolean = false;\n  disableRipple: boolean = false;\n  parentElementClicked: boolean = false;\n  parentElementKeyedUp: boolean = false;\n  checkboxId: string | null = 'simple-check';\n  checkboxColor: string = 'primary';\n  checkboxValue: string = 'single_checkbox';\n\n  onCheckboxClick: (event?: Event) => void = () => {};\n  onCheckboxChange: (event?: MatCheckboxChange) => void = () => {};\n}\n\n/** Simple component for testing an MatCheckbox with required ngModel. */\n@Component({\n  template: `<mat-checkbox [required]=\"isRequired\" [(ngModel)]=\"isGood\">Be good</mat-checkbox>`,\n})\nclass CheckboxWithNgModel {\n  isGood: boolean = false;\n  isRequired: boolean = true;\n}\n\n@Component({\n  template: `<mat-checkbox [required]=\"isRequired\" [(ngModel)]=\"isGood\">Be good</mat-checkbox>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nclass CheckboxWithNgModelAndOnPush extends CheckboxWithNgModel {}\n\n/** Simple test component with multiple checkboxes. */\n@Component(({\n  template: `\n    <mat-checkbox>Option 1</mat-checkbox>\n    <mat-checkbox>Option 2</mat-checkbox>\n  `\n}))\nclass MultipleCheckboxes { }\n\n\n/** Simple test component with tabIndex */\n@Component({\n  template: `\n    <mat-checkbox\n        [tabIndex]=\"customTabIndex\"\n        [disabled]=\"isDisabled\">\n    </mat-checkbox>`,\n})\nclass CheckboxWithTabIndex {\n  customTabIndex: number = 7;\n  isDisabled: boolean = false;\n}\n\n\n/** Simple test component that accesses MatCheckbox using ViewChild. */\n@Component({\n  template: `\n    <mat-checkbox></mat-checkbox>`,\n})\nclass CheckboxUsingViewChild {\n  @ViewChild(MatCheckbox) checkbox: MatCheckbox;\n\n  set isDisabled(value: boolean) {\n    this.checkbox.disabled = value;\n  }\n}\n\n/** Simple test component with an aria-label set. */\n@Component({\n  template: `<mat-checkbox aria-label=\"Super effective\"></mat-checkbox>`\n})\nclass CheckboxWithAriaLabel { }\n\n/** Simple test component with an aria-label set. */\n@Component({\n  template: `<mat-checkbox aria-labelledby=\"some-id\"></mat-checkbox>`\n})\nclass CheckboxWithAriaLabelledby {}\n\n/** Simple test component with name attribute */\n@Component({\n  template: `<mat-checkbox name=\"test-name\"></mat-checkbox>`\n})\nclass CheckboxWithNameAttribute {}\n\n/** Simple test component with change event */\n@Component({\n  template: `<mat-checkbox (change)=\"lastEvent = $event\"></mat-checkbox>`\n})\nclass CheckboxWithChangeEvent {\n  lastEvent: MatCheckboxChange;\n}\n\n/** Test component with reactive forms */\n@Component({\n  template: `<mat-checkbox [formControl]=\"formControl\"></mat-checkbox>`\n})\nclass CheckboxWithFormControl {\n  formControl = new FormControl();\n}\n\n/** Test component without label */\n@Component({\n  template: `<mat-checkbox>{{ label }}</mat-checkbox>`\n})\nclass CheckboxWithoutLabel {\n  label: string;\n}\n\n/** Test component with the native tabindex attribute. */\n@Component({\n  template: `<mat-checkbox tabindex=\"5\"></mat-checkbox>`\n})\nclass CheckboxWithTabindexAttr {}\n\n/** Test component that uses another component for its label. */\n@Component({\n  template: `<mat-checkbox><some-text></some-text></mat-checkbox>`\n})\nclass CheckboxWithProjectedLabel {}\n\n/** Component that renders some text through a binding. */\n@Component({\n  selector: 'some-text',\n  template: '<span>{{text}}</span>'\n})\nclass TextBindingComponent {\n  text: string = 'Some text';\n}\n"]}