{"version":3,"file":"expansion.spec.js","sourceRoot":"","sources":["../../../../src/lib/expansion/expansion.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, TestBed, fakeAsync, tick, ComponentFixture, flush} from '@angular/core/testing';\nimport {Component, ViewChild} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {\n  MatExpansionModule,\n  MatExpansionPanel,\n  MatExpansionPanelHeader,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './index';\nimport {SPACE, ENTER} from '@angular/cdk/keycodes';\nimport {dispatchKeyboardEvent, createKeyboardEvent, dispatchEvent} from '@angular/cdk/testing';\n\n\ndescribe('MatExpansionPanel', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        MatExpansionModule,\n        NoopAnimationsModule,\n      ],\n      declarations: [\n        PanelWithContent,\n        PanelWithContentInNgIf,\n        PanelWithCustomMargin,\n        LazyPanelWithContent,\n        LazyPanelOpenOnLoad,\n        PanelWithTwoWayBinding,\n      ],\n    });\n    TestBed.compileComponents();\n  }));\n\n  it('should expand and collapse the panel', fakeAsync(() => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\n    fixture.detectChanges();\n\n    expect(headerEl.classList).not.toContain('mat-expanded');\n\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    flush();\n\n    expect(headerEl.classList).toContain('mat-expanded');\n  }));\n\n  it('should be able to render panel content lazily', fakeAsync(() => {\n    const fixture = TestBed.createComponent(LazyPanelWithContent);\n    const content = fixture.debugElement.query(\n      By.css('.mat-expansion-panel-content')).nativeElement;\n    fixture.detectChanges();\n\n    expect(content.textContent.trim()).toBe('', 'Expected content element to be empty.');\n\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n\n    expect(content.textContent.trim())\n        .toContain('Some content', 'Expected content to be rendered.');\n  }));\n\n  it('should render the content for a lazy-loaded panel that is opened on init', fakeAsync(() => {\n    const fixture = TestBed.createComponent(LazyPanelOpenOnLoad);\n    const content = fixture.debugElement.query(\n      By.css('.mat-expansion-panel-content')).nativeElement;\n    fixture.detectChanges();\n\n    expect(content.textContent.trim())\n        .toContain('Some content', 'Expected content to be rendered.');\n  }));\n\n  it('emit correct events for change in panel expanded state', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    expect(fixture.componentInstance.openCallback).toHaveBeenCalled();\n\n    fixture.componentInstance.expanded = false;\n    fixture.detectChanges();\n    expect(fixture.componentInstance.closeCallback).toHaveBeenCalled();\n  });\n\n  it('should create a unique panel id for each panel', () => {\n    const fixtureOne = TestBed.createComponent(PanelWithContent);\n    const headerElOne = fixtureOne.nativeElement.querySelector('.mat-expansion-panel-header');\n    const fixtureTwo = TestBed.createComponent(PanelWithContent);\n    const headerElTwo = fixtureTwo.nativeElement.querySelector('.mat-expansion-panel-header');\n    fixtureOne.detectChanges();\n    fixtureTwo.detectChanges();\n\n    const panelIdOne = headerElOne.getAttribute('aria-controls');\n    const panelIdTwo = headerElTwo.getAttribute('aria-controls');\n    expect(panelIdOne).not.toBe(panelIdTwo);\n  });\n\n  it('should set `aria-labelledby` of the content to the header id', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\n\n    fixture.detectChanges();\n\n    const headerId = headerEl.getAttribute('id');\n    const contentLabel = contentEl.getAttribute('aria-labelledby');\n\n    expect(headerId).toBeTruthy();\n    expect(contentLabel).toBeTruthy();\n    expect(headerId).toBe(contentLabel);\n  });\n\n  it('should set the proper role on the content element', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const contentEl = fixture.nativeElement.querySelector('.mat-expansion-panel-content');\n\n    expect(contentEl.getAttribute('role')).toBe('region');\n  });\n\n  it('should toggle the panel when pressing SPACE on the header', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\n\n    spyOn(fixture.componentInstance.panel, 'toggle');\n\n    const event = dispatchKeyboardEvent(headerEl, 'keydown', SPACE);\n\n    fixture.detectChanges();\n\n    expect(fixture.componentInstance.panel.toggle).toHaveBeenCalled();\n    expect(event.defaultPrevented).toBe(true);\n  });\n\n  it('should toggle the panel when pressing ENTER on the header', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\n\n    spyOn(fixture.componentInstance.panel, 'toggle');\n\n    const event = dispatchKeyboardEvent(headerEl, 'keydown', ENTER);\n\n    fixture.detectChanges();\n\n    expect(fixture.componentInstance.panel.toggle).toHaveBeenCalled();\n    expect(event.defaultPrevented).toBe(true);\n  });\n\n  it('should not toggle if a modifier key is pressed', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const headerEl = fixture.nativeElement.querySelector('.mat-expansion-panel-header');\n\n    spyOn(fixture.componentInstance.panel, 'toggle');\n\n    ['altKey', 'metaKey', 'shiftKey', 'ctrlKey'].forEach(modifier => {\n      const event = createKeyboardEvent('keydown', ENTER);\n      Object.defineProperty(event, modifier, {get: () => true});\n\n      dispatchEvent(headerEl, event);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.panel.toggle).not.toHaveBeenCalled();\n      expect(event.defaultPrevented).toBe(false);\n    });\n  });\n\n  it('should not be able to focus content while closed', fakeAsync(() => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    tick(250);\n\n    const button = fixture.debugElement.query(By.css('button')).nativeElement;\n\n    button.focus();\n    expect(document.activeElement).toBe(button, 'Expected button to start off focusable.');\n\n    button.blur();\n    fixture.componentInstance.expanded = false;\n    fixture.detectChanges();\n    tick(250);\n\n    button.focus();\n    expect(document.activeElement).not.toBe(button, 'Expected button to no longer be focusable.');\n  }));\n\n  it('should restore focus to header if focused element is inside panel on close', fakeAsync(() => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    tick(250);\n\n    const button = fixture.debugElement.query(By.css('button')).nativeElement;\n    const header = fixture.debugElement.query(By.css('mat-expansion-panel-header')).nativeElement;\n\n    button.focus();\n    expect(document.activeElement).toBe(button, 'Expected button to start off focusable.');\n\n    fixture.componentInstance.expanded = false;\n    fixture.detectChanges();\n    tick(250);\n\n    expect(document.activeElement).toBe(header, 'Expected header to be focused.');\n  }));\n\n  it('should not override the panel margin if it is not inside an accordion', fakeAsync(() => {\n    const fixture = TestBed.createComponent(PanelWithCustomMargin);\n    fixture.detectChanges();\n\n    const panel = fixture.debugElement.query(By.css('mat-expansion-panel'));\n    let styles = getComputedStyle(panel.nativeElement);\n\n    expect(panel.componentInstance._hasSpacing()).toBe(false);\n    expect(styles.marginTop).toBe('13px');\n    expect(styles.marginBottom).toBe('13px');\n    expect(styles.marginLeft).toBe('37px');\n    expect(styles.marginRight).toBe('37px');\n\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    tick(250);\n\n    styles = getComputedStyle(panel.nativeElement);\n\n    expect(panel.componentInstance._hasSpacing()).toBe(false);\n    expect(styles.marginTop).toBe('13px');\n    expect(styles.marginBottom).toBe('13px');\n    expect(styles.marginLeft).toBe('37px');\n    expect(styles.marginRight).toBe('37px');\n  }));\n\n  it('should be able to hide the toggle', () => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    const header = fixture.debugElement.query(By.css('.mat-expansion-panel-header')).nativeElement;\n\n    fixture.detectChanges();\n\n    expect(header.querySelector('.mat-expansion-indicator'))\n        .toBeTruthy('Expected indicator to be shown.');\n\n    fixture.componentInstance.hideToggle = true;\n    fixture.detectChanges();\n\n    expect(header.querySelector('.mat-expansion-indicator'))\n        .toBeFalsy('Expected indicator to be hidden.');\n  });\n\n  it('should update the indicator rotation when the expanded state is toggled programmatically',\n    fakeAsync(() => {\n      const fixture = TestBed.createComponent(PanelWithContent);\n\n      fixture.detectChanges();\n      tick(250);\n\n      const arrow = fixture.debugElement.query(By.css('.mat-expansion-indicator')).nativeElement;\n\n      expect(arrow.style.transform).toBe('rotate(0deg)', 'Expected no rotation.');\n\n      fixture.componentInstance.expanded = true;\n      fixture.detectChanges();\n      tick(250);\n\n      expect(arrow.style.transform).toBe('rotate(180deg)', 'Expected 180 degree rotation.');\n    }));\n\n  it('should make sure accordion item runs ngOnDestroy when expansion panel is destroyed', () => {\n    const fixture = TestBed.createComponent(PanelWithContentInNgIf);\n    fixture.detectChanges();\n    let destroyedOk = false;\n    fixture.componentInstance.panel.destroyed.subscribe(() => destroyedOk = true);\n    fixture.componentInstance.expansionShown = false;\n    fixture.detectChanges();\n    expect(destroyedOk).toBe(true);\n  });\n\n  it('should support two-way binding of the `expanded` property', () => {\n    const fixture = TestBed.createComponent(PanelWithTwoWayBinding);\n    const header = fixture.debugElement.query(By.css('mat-expansion-panel-header')).nativeElement;\n\n    fixture.detectChanges();\n    expect(fixture.componentInstance.expanded).toBe(false);\n\n    header.click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.expanded).toBe(true);\n\n    header.click();\n    fixture.detectChanges();\n    expect(fixture.componentInstance.expanded).toBe(false);\n  });\n\n\n\n  it('should emit events for body expanding and collapsing animations', fakeAsync(() => {\n    const fixture = TestBed.createComponent(PanelWithContent);\n    fixture.detectChanges();\n    let afterExpand = 0;\n    let afterCollapse = 0;\n    fixture.componentInstance.panel.afterExpand.subscribe(() => afterExpand++);\n    fixture.componentInstance.panel.afterCollapse.subscribe(() => afterCollapse++);\n\n    fixture.componentInstance.expanded = true;\n    fixture.detectChanges();\n    flush();\n    expect(afterExpand).toBe(1);\n    expect(afterCollapse).toBe(0);\n\n    fixture.componentInstance.expanded = false;\n    fixture.detectChanges();\n    flush();\n    expect(afterExpand).toBe(1);\n    expect(afterCollapse).toBe(1);\n  }));\n\n  it('should be able to set the default options through the injection token', () => {\n    TestBed\n      .resetTestingModule()\n      .configureTestingModule({\n        imports: [MatExpansionModule, NoopAnimationsModule],\n        declarations: [PanelWithTwoWayBinding],\n        providers: [{\n          provide: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n          useValue: {\n            hideToggle: true,\n            expandedHeight: '10px',\n            collapsedHeight: '16px'\n          }\n        }]\n      })\n      .compileComponents();\n\n    const fixture = TestBed.createComponent(PanelWithTwoWayBinding);\n    fixture.detectChanges();\n\n    const panel = fixture.debugElement.query(By.directive(MatExpansionPanel));\n    const header = fixture.debugElement.query(By.directive(MatExpansionPanelHeader));\n\n    expect(panel.componentInstance.hideToggle).toBe(true);\n    expect(header.componentInstance.expandedHeight).toBe('10px');\n    expect(header.componentInstance.collapsedHeight).toBe('16px');\n  });\n\n  describe('disabled state', () => {\n    let fixture: ComponentFixture<PanelWithContent>;\n    let panel: HTMLElement;\n    let header: HTMLElement;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(PanelWithContent);\n      fixture.detectChanges();\n      panel = fixture.debugElement.query(By.css('mat-expansion-panel')).nativeElement;\n      header = fixture.debugElement.query(By.css('mat-expansion-panel-header')).nativeElement;\n    });\n\n    it('should toggle the aria-disabled attribute on the header', () => {\n      expect(header.getAttribute('aria-disabled')).toBe('false');\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      expect(header.getAttribute('aria-disabled')).toBe('true');\n    });\n\n    it('should toggle the expansion indicator', () => {\n      expect(panel.querySelector('.mat-expansion-indicator')).toBeTruthy();\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      expect(panel.querySelector('.mat-expansion-indicator')).toBeFalsy();\n    });\n\n    it('should not be able to toggle the panel via a user action if disabled', () => {\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\n      expect(header.classList).not.toContain('mat-expanded');\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      header.click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\n      expect(header.classList).not.toContain('mat-expanded');\n    });\n\n    it('should be able to toggle a disabled expansion panel programmatically', () => {\n      expect(fixture.componentInstance.panel.expanded).toBe(false);\n      expect(header.classList).not.toContain('mat-expanded');\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      fixture.componentInstance.expanded = true;\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.panel.expanded).toBe(true);\n      expect(header.classList).toContain('mat-expanded');\n    });\n\n  });\n});\n\n\n@Component({\n  template: `\n  <mat-expansion-panel [expanded]=\"expanded\"\n                      [hideToggle]=\"hideToggle\"\n                      [disabled]=\"disabled\"\n                      (opened)=\"openCallback()\"\n                      (closed)=\"closeCallback()\">\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\n    <p>Some content</p>\n    <button>I am a button</button>\n  </mat-expansion-panel>`\n})\nclass PanelWithContent {\n  expanded = false;\n  hideToggle = false;\n  disabled = false;\n  openCallback = jasmine.createSpy('openCallback');\n  closeCallback = jasmine.createSpy('closeCallback');\n  @ViewChild(MatExpansionPanel) panel: MatExpansionPanel;\n}\n\n@Component({\n  template: `\n  <div *ngIf=\"expansionShown\">\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\n    </mat-expansion-panel>\n  </div>`\n})\nclass PanelWithContentInNgIf {\n  expansionShown = true;\n  @ViewChild(MatExpansionPanel) panel: MatExpansionPanel;\n}\n\n@Component({\n  styles: [\n    `mat-expansion-panel {\n      margin: 13px 37px;\n    }`\n  ],\n  template: `\n  <mat-expansion-panel [expanded]=\"expanded\">\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores officia, aliquam dicta\n    corrupti maxime voluptate accusamus impedit atque incidunt pariatur.\n  </mat-expansion-panel>`\n})\nclass PanelWithCustomMargin {\n  expanded = false;\n}\n\n@Component({\n  template: `\n  <mat-expansion-panel [expanded]=\"expanded\">\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      <p>Some content</p>\n      <button>I am a button</button>\n    </ng-template>\n  </mat-expansion-panel>`\n})\nclass LazyPanelWithContent {\n  expanded = false;\n}\n\n@Component({\n  template: `\n  <mat-expansion-panel [expanded]=\"true\">\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\n\n    <ng-template matExpansionPanelContent>\n      <p>Some content</p>\n    </ng-template>\n  </mat-expansion-panel>`\n})\nclass LazyPanelOpenOnLoad {}\n\n\n@Component({\n  template: `\n  <mat-expansion-panel [(expanded)]=\"expanded\">\n    <mat-expansion-panel-header>Panel Title</mat-expansion-panel-header>\n  </mat-expansion-panel>`\n})\nclass PanelWithTwoWayBinding {\n  expanded = false;\n}\n"]}