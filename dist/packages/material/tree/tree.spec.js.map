{"version":3,"file":"tree.spec.js","sourceRoot":"","sources":["../../../../src/lib/tree/tree.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FlatTreeControl, NestedTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Component, ViewChild, Type} from '@angular/core';\nimport {ComponentFixture, TestBed} from '@angular/core/testing';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {\n  MatTree,\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n  MatTreeModule,\n  MatTreeNestedDataSource\n} from './index';\n\n\ndescribe('MatTree', () => {\n  /** Represents an indent for expectNestedTreeToMatch */\n  const _ = {};\n\n  let treeElement: HTMLElement;\n  let underlyingDataSource: FakeDataSource;\n\n  function configureMatTreeTestingModule(declarations: Type<any>[]) {\n    TestBed.configureTestingModule({\n      imports: [MatTreeModule],\n      declarations: declarations,\n    }).compileComponents();\n  }\n\n  describe('flat tree', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<SimpleMatTreeApp>;\n      let component: SimpleMatTreeApp;\n\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([SimpleMatTreeApp]);\n        fixture = TestBed.createComponent(SimpleMatTreeApp);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n\n      it('with the right accessibility roles', () => {\n        expect(treeElement.getAttribute('role')).toBe('tree');\n\n        getNodes(treeElement).forEach(node => {\n          expect(node.getAttribute('role')).toBe('treeitem');\n        });\n      });\n\n      it('with the right data', () => {\n        expect(underlyingDataSource.data.length).toBe(3);\n\n        let data = underlyingDataSource.data;\n        expectFlatTreeToMatch(treeElement, 28,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`]);\n\n        underlyingDataSource.addChild(data[2]);\n        fixture.detectChanges();\n\n        expectFlatTreeToMatch(treeElement, 28,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`],\n            [`_, topping_4 - cheese_4 + base_4`]);\n      });\n    });\n\n    describe('with toggle', () => {\n      let fixture: ComponentFixture<MatTreeAppWithToggle>;\n      let component: MatTreeAppWithToggle;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([MatTreeAppWithToggle]);\n        fixture = TestBed.createComponent(MatTreeAppWithToggle);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('should expand/collapse the node', () => {\n        expect(underlyingDataSource.data.length).toBe(3);\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect no expanded node`);\n\n        component.toggleRecursively = false;\n        const data = underlyingDataSource.data;\n        const child = underlyingDataSource.addChild(data[2]);\n        underlyingDataSource.addChild(child);\n        fixture.detectChanges();\n\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`]);\n\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(1, `Expect node expanded one level`);\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`],\n            [_, `topping_4 - cheese_4 + base_4`]);\n\n        (getNodes(treeElement)[3] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(2, `Expect node expanded`);\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`],\n            [_, `topping_4 - cheese_4 + base_4`],\n            [_, _, `topping_5 - cheese_5 + base_5`]);\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`]);\n      });\n\n      it('should expand/collapse the node recursively', () => {\n        expect(underlyingDataSource.data.length).toBe(3);\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect no expanded node`);\n\n        const data = underlyingDataSource.data;\n        const child = underlyingDataSource.addChild(data[2]);\n        underlyingDataSource.addChild(child);\n        fixture.detectChanges();\n\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(3, `Expect nodes expanded`);\n        expectFlatTreeToMatch(treeElement, 40,\n            [`topping_1 - cheese_1 + base_1`],\n            [`topping_2 - cheese_2 + base_2`],\n            [`topping_3 - cheese_3 + base_3`],\n            [_, `topping_4 - cheese_4 + base_4`],\n            [_, _, `topping_5 - cheese_5 + base_5`]);\n\n\n        (getNodes(treeElement)[2] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n\n        expectFlatTreeToMatch(treeElement, 40,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n\n    describe('with when node template', () => {\n      let fixture: ComponentFixture<WhenNodeMatTreeApp>;\n      let component: WhenNodeMatTreeApp;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([WhenNodeMatTreeApp]);\n        fixture = TestBed.createComponent(WhenNodeMatTreeApp);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expectFlatTreeToMatch(treeElement, 28,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`],\n          [`>>> topping_4 - cheese_4 + base_4`]);\n      });\n    });\n  });\n\n  describe('flat tree with undefined or null children', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<MatTreeWithNullOrUndefinedChild >;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([MatTreeWithNullOrUndefinedChild ]);\n        fixture = TestBed.createComponent(MatTreeWithNullOrUndefinedChild );\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n    });\n  });\n\n  describe('nested tree with undefined or null children', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<MatNestedTreeWithNullOrUndefinedChild >;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([MatNestedTreeWithNullOrUndefinedChild]);\n        fixture = TestBed.createComponent(MatNestedTreeWithNullOrUndefinedChild);\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n    });\n  });\n  describe('nested tree', () => {\n    describe('should initialize', () => {\n      let fixture: ComponentFixture<NestedMatTreeApp>;\n      let component: NestedMatTreeApp;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([NestedMatTreeApp]);\n        fixture = TestBed.createComponent(NestedMatTreeApp);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with rendered dataNodes', () => {\n        const nodes = getNodes(treeElement);\n\n        expect(nodes).toBeDefined('Expect nodes to be defined');\n        expect(nodes[0].classList).toContain('customNodeClass');\n      });\n\n      it('with the right accessibility roles', () => {\n        expect(treeElement.getAttribute('role')).toBe('tree');\n\n        getNodes(treeElement).forEach(node => {\n          expect(node.getAttribute('role')).toBe('treeitem');\n        });\n      });\n\n      it('with the right data', () => {\n        expect(underlyingDataSource.data.length).toBe(3);\n\n        let data = underlyingDataSource.data;\n        expectNestedTreeToMatch(treeElement,\n          [`${data[0].pizzaTopping} - ${data[0].pizzaCheese} + ${data[0].pizzaBase}`],\n          [`${data[1].pizzaTopping} - ${data[1].pizzaCheese} + ${data[1].pizzaBase}`],\n          [`${data[2].pizzaTopping} - ${data[2].pizzaCheese} + ${data[2].pizzaBase}`]);\n\n        underlyingDataSource.addChild(data[1]);\n        fixture.detectChanges();\n\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n        data = underlyingDataSource.data;\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n\n      it('with nested child data', () => {\n        expect(underlyingDataSource.data.length).toBe(3);\n\n        let data = underlyingDataSource.data;\n        const child = underlyingDataSource.addChild(data[1]);\n        underlyingDataSource.addChild(child);\n        fixture.detectChanges();\n\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [_, _, `topping_5 - cheese_5 + base_5`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        underlyingDataSource.addChild(child);\n        fixture.detectChanges();\n\n        expect(data.length).toBe(3);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [_, _, `topping_5 - cheese_5 + base_5`],\n          [_, _, `topping_6 - cheese_6 + base_6`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n\n    describe('with when node', () => {\n      let fixture: ComponentFixture<WhenNodeNestedMatTreeApp>;\n      let component: WhenNodeNestedMatTreeApp;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([WhenNodeNestedMatTreeApp]);\n        fixture = TestBed.createComponent(WhenNodeNestedMatTreeApp);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('with the right data', () => {\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`],\n          [`>>> topping_4 - cheese_4 + base_4`]);\n      });\n    });\n\n    describe('with toggle', () => {\n      let fixture: ComponentFixture<NestedMatTreeAppWithToggle>;\n      let component: NestedMatTreeAppWithToggle;\n\n      beforeEach(() => {\n        configureMatTreeTestingModule([NestedMatTreeAppWithToggle]);\n        fixture = TestBed.createComponent(NestedMatTreeAppWithToggle);\n\n        component = fixture.componentInstance;\n        underlyingDataSource = component.underlyingDataSource;\n        treeElement = fixture.nativeElement.querySelector('mat-tree');\n\n        fixture.detectChanges();\n      });\n\n      it('should expand/collapse the node', () => {\n        component.toggleRecursively = false;\n        let data = underlyingDataSource.data;\n        const child = underlyingDataSource.addChild(data[1]);\n        underlyingDataSource.addChild(child);\n\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        fixture.detectChanges();\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(1, `Expect node expanded`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n      });\n\n      it('should expand/collapse the node recursively', () => {\n        let data = underlyingDataSource.data;\n        const child = underlyingDataSource.addChild(data[1]);\n        underlyingDataSource.addChild(child);\n        fixture.detectChanges();\n\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(3, `Expect node expanded`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [_, `topping_4 - cheese_4 + base_4`],\n          [_, _, `topping_5 - cheese_5 + base_5`],\n          [`topping_3 - cheese_3 + base_3`]);\n\n        (getNodes(treeElement)[1] as HTMLElement).click();\n        fixture.detectChanges();\n\n        expect(component.treeControl.expansionModel.selected.length)\n          .toBe(0, `Expect node collapsed`);\n        expectNestedTreeToMatch(treeElement,\n          [`topping_1 - cheese_1 + base_1`],\n          [`topping_2 - cheese_2 + base_2`],\n          [`topping_3 - cheese_3 + base_3`]);\n      });\n    });\n  });\n});\n\nexport class TestData {\n  pizzaTopping: string;\n  pizzaCheese: string;\n  pizzaBase: string;\n  level: number;\n  children: TestData[];\n  observableChildren: BehaviorSubject<TestData[]>;\n  isSpecial: boolean;\n\n  constructor(pizzaTopping: string, pizzaCheese: string, pizzaBase: string,\n              children: TestData[] = [], isSpecial: boolean = false) {\n    this.pizzaTopping = pizzaTopping;\n    this.pizzaCheese = pizzaCheese;\n    this.pizzaBase = pizzaBase;\n    this.isSpecial = isSpecial;\n    this.children = children;\n    this.observableChildren = new BehaviorSubject<TestData[]>(this.children);\n  }\n}\n\nclass FakeDataSource {\n  dataIndex = 0;\n  _dataChange = new BehaviorSubject<TestData[]>([]);\n  get data() { return this._dataChange.getValue(); }\n  set data(data: TestData[]) { this._dataChange.next(data); }\n\n  connect(): Observable<TestData[]> {\n    return this._dataChange;\n  }\n\n  disconnect() {}\n\n  constructor() {\n    for (let i = 0; i < 3; i++) {\n      this.addData();\n    }\n  }\n\n  addChild(parent: TestData, isSpecial: boolean = false) {\n    const nextIndex = ++this.dataIndex;\n    const child = new TestData(`topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`);\n\n    const index = this.data.indexOf(parent);\n    if (index > -1) {\n      parent = new TestData(\n          parent.pizzaTopping, parent.pizzaCheese, parent.pizzaBase, parent.children, isSpecial);\n    }\n    parent.children.push(child);\n    parent.observableChildren.next(parent.children);\n\n    let copiedData = this.data.slice();\n    if (index > -1) {\n      copiedData.splice(index, 1, parent);\n    }\n    this.data = copiedData;\n    return child;\n  }\n\n  addData(isSpecial: boolean = false) {\n    const nextIndex = ++this.dataIndex;\n    let copiedData = this.data.slice();\n    copiedData.push(new TestData(\n      `topping_${nextIndex}`, `cheese_${nextIndex}`, `base_${nextIndex}`, [], isSpecial));\n\n    this.data = copiedData;\n  }\n}\n\nfunction getNodes(treeElement: Element): Element[] {\n  return [].slice.call(treeElement.querySelectorAll('.mat-tree-node, .mat-nested-tree-node'))!;\n}\n\nfunction expectFlatTreeToMatch(treeElement: Element, expectedPaddingIndent: number = 28,\n                               ...expectedTree: any[]) {\n  const missedExpectations: string[] = [];\n\n  function checkNode(node: Element, expectedNode: any[]) {\n    const actualTextContent = node.textContent!.trim();\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\n    if (actualTextContent !== expectedTextContent) {\n      missedExpectations.push(\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\n    }\n  }\n\n  function checkLevel(node: Element, expectedNode: any[]) {\n\n    const actualLevel = (node as HTMLElement).style.paddingLeft;\n    if (expectedNode.length === 1) {\n      if (actualLevel !== ``) {\n        missedExpectations.push(\n          `Expected node level to be 0 but was ${actualLevel}`);\n      }\n    } else {\n      const expectedLevel = `${(expectedNode.length - 1) * expectedPaddingIndent}px`;\n      if (actualLevel != expectedLevel) {\n        missedExpectations.push(\n          `Expected node level to be ${expectedLevel} but was ${actualLevel}`);\n      }\n    }\n  }\n\n  getNodes(treeElement).forEach((node, index) => {\n    const expected = expectedTree ?\n      expectedTree[index] :\n      null;\n\n    checkLevel(node, expected);\n    checkNode(node, expected);\n  });\n\n  if (missedExpectations.length) {\n    fail(missedExpectations.join('\\n'));\n  }\n}\n\nfunction expectNestedTreeToMatch(treeElement: Element, ...expectedTree: any[]) {\n  const missedExpectations: string[] = [];\n  function checkNodeContent(node: Element, expectedNode: any[]) {\n    const expectedTextContent = expectedNode[expectedNode.length - 1];\n    const actualTextContent = node.childNodes.item(0).textContent!.trim();\n    if (actualTextContent !== expectedTextContent) {\n      missedExpectations.push(\n        `Expected node contents to be ${expectedTextContent} but was ${actualTextContent}`);\n    }\n  }\n\n  function checkNodeDescendants(node: Element, expectedNode: any[], currentIndex: number) {\n    let expectedDescendant = 0;\n\n    for (let i = currentIndex + 1; i < expectedTree.length; ++i) {\n      if (expectedTree[i].length > expectedNode.length) {\n        ++expectedDescendant;\n      } else if (expectedTree[i].length === expectedNode.length) {\n        break;\n      }\n    }\n\n    const actualDescendant = getNodes(node).length;\n    if (actualDescendant !== expectedDescendant) {\n      missedExpectations.push(\n        `Expected node descendant num to be ${expectedDescendant} but was ${actualDescendant}`);\n    }\n  }\n\n  getNodes(treeElement).forEach((node, index) => {\n\n    const expected = expectedTree ?\n      expectedTree[index] :\n      null;\n\n    checkNodeDescendants(node, expected, index);\n    checkNodeContent(node, expected);\n  });\n\n  if (missedExpectations.length) {\n    fail(missedExpectations.join('\\n'));\n  }\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\n                     matTreeNodeToggle>\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </mat-tree-node>\n    </mat-tree>\n  `\n})\nclass SimpleMatTreeApp {\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n  getChildren = (node: TestData) => node.observableChildren;\n  transformer = (node: TestData, level: number) => {\n    node.level = level;\n    return node;\n  }\n\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[] | null;\n}\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops',\n       children: null},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussel sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     matTreeNodePadding matTreeNodeToggle>\n        {{node.name}}\n      </mat-tree-node>\n    </mat-tree>\n  `\n})\nclass MatTreeWithNullOrUndefinedChild {\n  private transformer = (node: FoodNode, level: number) => {\n    return {\n      expandable: !!node.children,\n      name: node.name,\n      level: level,\n    };\n  }\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    node => node.level, node => node.expandable);\n\n  treeFlattener = new MatTreeFlattener(\n     this.transformer, node => node.level, node => node.expandable, node => node.children);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener, TREE_DATA);\n\n  constructor() {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\">\n        {{node.name}}\n        <ng-template matTreeNodeOutlet></ng-template>\n      </mat-nested-tree-node>\n    </mat-tree>\n  `\n})\nclass MatNestedTreeWithNullOrUndefinedChild {\n  treeControl: NestedTreeControl<FoodNode>;\n  dataSource: MatTreeNestedDataSource<FoodNode>;\n\n  constructor() {\n    this.treeControl = new NestedTreeControl<FoodNode>(this.getChildren);\n    this.dataSource = new MatTreeNestedDataSource();\n    this.dataSource.data = TREE_DATA;\n  }\n\n  private getChildren = (node: FoodNode) => node.children;\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template matTreeNodeOutlet></ng-template>\n      </mat-nested-tree-node>\n    </mat-tree>\n  `\n})\nclass NestedMatTreeApp {\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl = new NestedTreeControl(this.getChildren);\n\n  dataSource = new MatTreeNestedDataSource();\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <ng-template matTreeNodeOutlet></ng-template>\n      </mat-nested-tree-node>\n       <mat-nested-tree-node *matTreeNodeDef=\"let node; when: isSpecial\"\n                             matTreeNodeToggle>\n                     >>> {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n         <div *ngIf=\"treeControl.isExpanded(node)\">\n            <ng-template matTreeNodeOutlet></ng-template>\n         </div>\n      </mat-nested-tree-node>\n    </mat-tree>\n  `\n})\nclass WhenNodeNestedMatTreeApp {\n  isSpecial = (_: number, node: TestData) =>  node.isSpecial;\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl: TreeControl<TestData> = new NestedTreeControl(this.getChildren);\n\n  dataSource = new MatTreeNestedDataSource();\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     matTreeNodePadding\n                     matTreeNodeToggle [matTreeNodeToggleRecursive]=\"toggleRecursively\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </mat-tree-node>\n    </mat-tree>\n  `\n})\nclass MatTreeAppWithToggle {\n  toggleRecursively: boolean = true;\n\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n  getChildren = (node: TestData) => node.observableChildren;\n  transformer = (node: TestData, level: number) => {\n    node.level = level;\n    return node;\n  }\n\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-nested-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                            matTreeNodeToggle [matTreeNodeToggleRecursive]=\"toggleRecursively\">\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n        <div *ngIf=\"treeControl.isExpanded(node)\">\n          <ng-template matTreeNodeOutlet></ng-template>\n        </div>\n      </mat-nested-tree-node>\n    </mat-tree>\n  `\n})\nclass NestedMatTreeAppWithToggle {\n  toggleRecursively: boolean = true;\n\n  getChildren = (node: TestData) => node.observableChildren;\n\n  treeControl = new NestedTreeControl(this.getChildren);\n  dataSource = new MatTreeNestedDataSource();\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n\n@Component({\n  template: `\n    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n      <mat-tree-node *matTreeNodeDef=\"let node\" class=\"customNodeClass\"\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\n                     matTreeNodeToggle>\n                     {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </mat-tree-node>\n       <mat-tree-node *matTreeNodeDef=\"let node; when: isSpecial\" class=\"customNodeClass\"\n                     matTreeNodePadding [matTreeNodePaddingIndent]=\"28\"\n                     matTreeNodeToggle>\n                     >>> {{node.pizzaTopping}} - {{node.pizzaCheese}} + {{node.pizzaBase}}\n      </mat-tree-node>\n    </mat-tree>\n  `\n})\nclass WhenNodeMatTreeApp {\n  isSpecial = (_: number, node: TestData) => node.isSpecial;\n\n  getLevel = (node: TestData) => node.level;\n  isExpandable = (node: TestData) => node.children.length > 0;\n  getChildren = (node: TestData) => node.observableChildren;\n  transformer = (node: TestData, level: number) => {\n    node.level = level;\n    return node;\n  }\n\n  treeFlattener = new MatTreeFlattener<TestData, TestData>(\n    this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n\n  treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  underlyingDataSource = new FakeDataSource();\n\n  @ViewChild(MatTree) tree: MatTree<TestData>;\n\n  constructor() {\n    this.underlyingDataSource.connect().subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n}\n"]}