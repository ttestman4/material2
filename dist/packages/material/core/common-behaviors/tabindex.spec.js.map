{"version":3,"file":"tabindex.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/tabindex.spec.ts"],"names":[],"mappings":";;AAAA,uCAAyC;AAEzC,QAAQ,CAAC,eAAe,EAAE;IAExB,EAAE,CAAC,2DAA2D,EAAE;QAC9D,IAAM,cAAc,GAAG,wBAAa,CAAC,SAAS,CAAC,CAAC;QAChD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,CAAC,EAAE,2DAA2D,CAAC,CAAC;QAExE,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;QAEtB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,CAAC,EAAE,oEAAoE,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE;QACxE,IAAM,cAAc,GAAG,wBAAa,CAAC,SAAS,CAAC,CAAC;QAChD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,CAAC,EAAE,4CAA4C,CAAC,CAAC;QAEzD,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;QAEzB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,CAAC,CAAC,EAAE,2EAA2E,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,IAAM,cAAc,GAAG,wBAAa,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACpD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,EAAE,EAAE,6CAA6C,CAAC,CAAC;QAE3D,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;QAEtB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACtB,IAAI,CAAC,CAAC,EAAE,+CAA+C,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAEH;IAAA;QACE,aAAQ,GAAG,KAAK,CAAC;IACnB,CAAC;IAAD,gBAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {mixinTabIndex} from './tabindex';\n\ndescribe('mixinTabIndex', () => {\n\n  it('should augment an existing class with a tabIndex property', () => {\n    const classWithMixin = mixinTabIndex(TestClass);\n    const instance = new classWithMixin();\n\n    expect(instance.tabIndex)\n      .toBe(0, 'Expected the mixed-into class to have a tabIndex property');\n\n    instance.tabIndex = 4;\n\n    expect(instance.tabIndex)\n      .toBe(4, 'Expected the mixed-into class to have an updated tabIndex property');\n  });\n\n  it('should set tabIndex to `-1` if the disabled property is set to true', () => {\n    const classWithMixin = mixinTabIndex(TestClass);\n    const instance = new classWithMixin();\n\n    expect(instance.tabIndex)\n      .toBe(0, 'Expected tabIndex to be set to 0 initially');\n\n    instance.disabled = true;\n\n    expect(instance.tabIndex)\n      .toBe(-1, 'Expected tabIndex to be set to -1 if the disabled property is set to true');\n  });\n\n  it('should allow having a custom default tabIndex value', () => {\n    const classWithMixin = mixinTabIndex(TestClass, 20);\n    const instance = new classWithMixin();\n\n    expect(instance.tabIndex)\n      .toBe(20, 'Expected tabIndex to be set to 20 initially');\n\n    instance.tabIndex = 0;\n\n    expect(instance.tabIndex)\n      .toBe(0, 'Expected tabIndex to still support 0 as value');\n  });\n\n});\n\nclass TestClass {\n  disabled = false;\n}\n"]}