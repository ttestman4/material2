{"version":3,"file":"color.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/color.spec.ts"],"names":[],"mappings":";;AAAA,iCAAmC;AACnC,sCAAyC;AAEzC,QAAQ,CAAC,YAAY,EAAE;IAErB,EAAE,CAAC,wDAAwD,EAAE;QAC3D,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;aACjB,SAAS,CAAC,wDAAwD,CAAC,CAAC;QAEzE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;aACjB,IAAI,CAAC,QAAQ,EAAE,iEAAiE,CAAC,CAAC;IACzF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE;QACxD,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,gEAAgE,CAAC,CAAC;QAE7E,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,aAAa,EAAE,0DAA0D,CAAC,CAAC;QAExF,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,2DAA2D,CAAC,CAAC;QAC7F,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,yDAAyD,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACrC,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,gEAAgE,CAAC,CAAC;QAE7E,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,aAAa,EAAE,0DAA0D,CAAC,CAAC;QAExF,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;aAC1C,IAAI,CAAC,CAAC,EAAE,kDAAkD,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;QACrD,IAAM,cAAc,GAAG,kBAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,iEAAiE,CAAC,CAAC;QAE9F,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;QAE3B,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;aACnC,SAAS,CAAC,YAAY,EAAE,oDAAoD,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAEH;IAAA;QACE,gBAAW,GAAgB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEzD,sCAAsC;QACtC,gBAAW,GAAG,IAAI,iBAAU,CAAc,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC;IAAD,gBAAC;AAAD,CAAC,AALD,IAKC","sourcesContent":["import {mixinColor} from './color';\nimport {ElementRef} from '@angular/core';\n\ndescribe('MixinColor', () => {\n\n  it('should augment an existing class with a color property', () => {\n    const classWithColor = mixinColor(TestClass);\n    const instance = new classWithColor();\n\n    expect(instance.color)\n        .toBeFalsy('Expected the mixed-into class to have a color property');\n\n    instance.color = 'accent';\n\n    expect(instance.color)\n        .toBe('accent', 'Expected the mixed-into class to have an updated color property');\n  });\n\n  it('should remove old color classes if new color is set', () => {\n    const classWithColor = mixinColor(TestClass);\n    const instance = new classWithColor();\n\n    expect(instance.testElement.classList.length)\n      .toBe(0, 'Expected the element to not have any classes at initialization');\n\n    instance.color = 'primary';\n\n    expect(instance.testElement.classList)\n      .toContain('mat-primary', 'Expected the element to have the \"mat-primary\" class set');\n\n    instance.color = 'accent';\n\n    expect(instance.testElement.classList)\n      .not.toContain('mat-primary', 'Expected the element to no longer have \"mat-primary\" set.');\n    expect(instance.testElement.classList)\n      .toContain('mat-accent', 'Expected the element to have the \"mat-accent\" class set');\n  });\n\n  it('should allow having no color set', () => {\n    const classWithColor = mixinColor(TestClass);\n    const instance = new classWithColor();\n\n    expect(instance.testElement.classList.length)\n      .toBe(0, 'Expected the element to not have any classes at initialization');\n\n    instance.color = 'primary';\n\n    expect(instance.testElement.classList)\n      .toContain('mat-primary', 'Expected the element to have the \"mat-primary\" class set');\n\n    instance.color = undefined;\n\n    expect(instance.testElement.classList.length)\n      .toBe(0, 'Expected the element to have no color class set.');\n  });\n\n  it('should allow having a default color if specified', () => {\n    const classWithColor = mixinColor(TestClass, 'accent');\n    const instance = new classWithColor();\n\n    expect(instance.testElement.classList)\n      .toContain('mat-accent', 'Expected the element to have the \"mat-accent\" class by default.');\n\n    instance.color = undefined;\n\n    expect(instance.testElement.classList)\n      .toContain('mat-accent', 'Expected the default color \"mat-accent\" to be set.');\n  });\n\n});\n\nclass TestClass {\n  testElement: HTMLElement = document.createElement('div');\n\n  /** Fake instance of an ElementRef. */\n  _elementRef = new ElementRef<HTMLElement>(this.testElement);\n}\n"]}