{"version":3,"file":"disable-ripple.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/disable-ripple.spec.ts"],"names":[],"mappings":";;AAAA,mDAAoD;AAEpD,QAAQ,CAAC,oBAAoB,EAAE;IAE7B,EAAE,CAAC,gEAAgE,EAAE;QACnE,IAAM,cAAc,GAAG,mCAAkB,CAAC,SAAS,CAAC,CAAC;QACrD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;aAC3B,IAAI,CAAC,KAAK,EAAE,iEAAiE,CAAC,CAAC;QAElF,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC;QAE9B,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;aAC3B,IAAI,CAAC,IAAI,EAAE,0EAA0E,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE;QACpE,IAAM,cAAc,GAAG,mCAAkB,CAAC,SAAS,CAAC,CAAC;QACrD,IAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;aAC3B,IAAI,CAAC,KAAK,EAAE,qDAAqD,CAAC,CAAC;QAEtE,0FAA0F;QAC1F,0FAA0F;QACzF,QAAgB,CAAC,aAAa,GAAG,EAAE,CAAC;QAErC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;aAC3B,IAAI,CAAC,IAAI,EAAE,6EAA6E,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAEH;IAAA;IAAiB,CAAC;IAAD,gBAAC;AAAD,CAAC,AAAlB,IAAkB","sourcesContent":["import {mixinDisableRipple} from './disable-ripple';\n\ndescribe('mixinDisableRipple', () => {\n\n  it('should augment an existing class with a disableRipple property', () => {\n    const classWithMixin = mixinDisableRipple(TestClass);\n    const instance = new classWithMixin();\n\n    expect(instance.disableRipple)\n      .toBe(false, 'Expected the mixed-into class to have a disable-ripple property');\n\n    instance.disableRipple = true;\n\n    expect(instance.disableRipple)\n      .toBe(true, 'Expected the mixed-into class to have an updated disable-ripple property');\n  });\n\n  it('should coerce values being passed to the disableRipple property', () => {\n    const classWithMixin = mixinDisableRipple(TestClass);\n    const instance = new classWithMixin();\n\n    expect(instance.disableRipple)\n      .toBe(false, 'Expected disableRipple to be set to false initially');\n\n    // Setting string values to the disableRipple property should be prevented by TypeScript's\n    // type checking, but developers can still set string values from their template bindings.\n    (instance as any).disableRipple = '';\n\n    expect(instance.disableRipple)\n      .toBe(true, 'Expected disableRipple to be set to true if an empty string is set as value');\n  });\n\n});\n\nclass TestClass {}\n"]}