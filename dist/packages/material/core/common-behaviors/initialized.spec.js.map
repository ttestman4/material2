{"version":3,"file":"initialized.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/common-behaviors/initialized.spec.ts"],"names":[],"mappings":";;AAAA,6CAA+C;AAG/C,QAAQ,CAAC,qBAAqB,EAAE;IAC9B;QAAA;QAAmB,CAAC;QAAD,iBAAC;IAAD,CAAC,AAApB,IAAoB;IACpB,IAAI,QAAwB,CAAC;IAE7B,UAAU,CAAC;QACT,IAAM,uBAAuB,GAAG,8BAAgB,CAAC,UAAU,CAAC,CAAC;QAC7D,QAAQ,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mFAAmF,EAAE,UAAA,IAAI;QAC1F,2FAA2F;QAC3F,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;QAE7C,iFAAiF;QACjF,QAAQ,CAAC,gBAAgB,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kFAAkF,EAAE,UAAA,IAAI;QACzF,4FAA4F;QAC5F,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAE5B,2FAA2F;QAC3F,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,cAAM,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oFAAoF,EAAE,UAAA,IAAI;QAC3F,kFAAkF;QAClF,IAAM,yBAAyB,GAAG,CAAC,CAAC;QACpC,IAAI,wBAAwB,GAAG,CAAC,CAAC;QAEjC,2FAA2F;QAC3F,SAAS,UAAU;YACjB,wBAAwB,EAAE,CAAC;YAC3B,IAAI,wBAAwB,KAAK,yBAAyB,EAAE;gBAC1D,IAAI,EAAE,CAAC;aACR;QACH,CAAC;QAED,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAE,iBAAiB;QAC9D,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAE,iBAAiB;QAE9D,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAE5B,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAE,iBAAiB;QAC9D,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAE,iBAAiB;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {mixinInitialized} from './initialized';\nimport {HasInitialized} from '@angular/material/core';\n\ndescribe('MixinHasInitialized', () => {\n  class EmptyClass { }\n  let instance: HasInitialized;\n\n  beforeEach(() => {\n    const classWithHasInitialized = mixinInitialized(EmptyClass);\n    instance = new classWithHasInitialized();\n  });\n\n  it('should emit for subscriptions made before the directive was marked as initialized', done => {\n    // Listen for an event from the initialized stream and mark the test as done when it emits.\n    instance.initialized.subscribe(() => done());\n\n    // Mark the class as initialized so that the stream emits and the test completes.\n    instance._markInitialized();\n  });\n\n  it('should emit for subscriptions made after the directive was marked as initialized', done => {\n    // Mark the class as initialized so the stream emits when subscribed and the test completes.\n    instance._markInitialized();\n\n    // Listen for an event from the initialized stream and mark the test as done when it emits.\n    instance.initialized.subscribe(() => done());\n  });\n\n  it('should emit for multiple subscriptions made before and after marked as initialized', done => {\n    // Should expect the number of notifications to match the number of subscriptions.\n    const expectedNotificationCount = 4;\n    let currentNotificationCount = 0;\n\n    // Function that completes the test when the number of notifications meets the expectation.\n    function onNotified() {\n      currentNotificationCount++;\n      if (currentNotificationCount === expectedNotificationCount) {\n        done();\n      }\n    }\n\n    instance.initialized.subscribe(onNotified);  // Subscription 1\n    instance.initialized.subscribe(onNotified);  // Subscription 2\n\n    instance._markInitialized();\n\n    instance.initialized.subscribe(onNotified);  // Subscription 3\n    instance.initialized.subscribe(onNotified);  // Subscription 4\n  });\n});\n"]}