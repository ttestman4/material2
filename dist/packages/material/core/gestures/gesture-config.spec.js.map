{"version":3,"file":"gesture-config.spec.js","sourceRoot":"","sources":["../../../../../src/lib/core/gestures/gesture-config.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TestBed, async} from '@angular/core/testing';\nimport {Component} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {GestureConfig, MAT_HAMMER_OPTIONS} from './gesture-config';\n\ndescribe('GestureConfig', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ButtonWithLongpressHander],\n      providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n    }).compileComponents();\n  }));\n\n  it('should instantiate HammerJS', () => {\n    spyOn(window, 'Hammer' as any).and.callThrough();\n\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\n    fixture.detectChanges();\n\n    expect((window as any).Hammer).toHaveBeenCalled();\n  });\n\n  it('should be able to pass options to HammerJS', () => {\n    TestBed\n      .resetTestingModule()\n      .configureTestingModule({\n        declarations: [ButtonWithLongpressHander],\n        providers: [\n          {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n          {provide: MAT_HAMMER_OPTIONS, useValue: {cssProps: {touchAction: 'auto'}}}\n        ]\n      })\n      .compileComponents();\n\n    spyOn(window, 'Hammer' as any).and.callThrough();\n\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\n    fixture.detectChanges();\n\n    const button = fixture.debugElement.nativeElement.querySelector('button');\n    const firstCallArgs = (window as any).Hammer.calls.first().args;\n\n    expect(firstCallArgs[0]).toBe(button);\n    expect(firstCallArgs[1].cssProps.touchAction).toBe('auto');\n  });\n\n  it('should not error when HammerJS is not loaded', () => {\n    // Remove the Hammer global from the environment, storing it to restore at the end of the test.\n    const hammerGlobal = (window as any).Hammer;\n    (window as any).Hammer = undefined;\n\n    // Stub out `console.warn` so the warnings don't pollute our logs.\n    spyOn(console, 'warn');\n\n    TestBed\n      .resetTestingModule()\n      .configureTestingModule({\n        declarations: [ButtonWithLongpressHander],\n        providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}],\n      }).compileComponents();\n\n    const fixture = TestBed.createComponent(ButtonWithLongpressHander);\n    fixture.detectChanges();\n\n    // No assertions here; the absense of errors satisfies this test.\n\n    // Restore the global Hammer.\n    (window as any).Hammer = hammerGlobal;\n  });\n\n  // TODO(jelbourn): add a test for use of HAMMER_LOADER when we can depend on Angular 6.1+.\n\n});\n\n\n@Component({\n  template: `<button (longpress)=\"noop()\">Long press me</button>`\n})\nclass ButtonWithLongpressHander {\n  noop() {}\n}\n"]}