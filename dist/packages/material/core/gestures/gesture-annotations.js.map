{"version":3,"file":"gesture-annotations.js","sourceRoot":"","sources":["../../../../../src/lib/core/gestures/gesture-annotations.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAeA,iCAKC;;;IAJC,qCAAyB;;IACzB,6BAAe;;IACf,6BAAe;;IACf,6BAAkC;;;;;;AAIpC,kCAMC;;;IAHC,2BAAgB;;IAChB,6BAAkB;;IAClB,6BAAkB;;;;;;;AAIpB,gCAGC;;;;;;;IADC,oEAAgE;;;;;;AAIlE,sCAEC;;;;;AAGD,oCAGC;;;;;;;IAFC,iEAAgD;;;;;;IAChD,kEAAiD;;;;;;AAInD,mCAMC;;;;;;IALC,wDAAuD;;;;;IACvD,qDAAiC;;;;;;IACjC,0DAAqC;;;;;;IACrC,6DAA8C;;;;;;IAC9C,4DAA4C;;;;;;AAI9C,mCAUC;;;IATC,iCAAmC;;IACnC,kCAAoB;;IACpB,+BAAyD;;IACzD,+BAAe;;IACf,oCAAqB;;IACrB,oCAAoB;;IAEpB,mCAAyB;;IACzB,oCAA0B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/hammerjs/index.d.ts\n */\n\n/** @docs-private */\nexport interface HammerInput {\n  preventDefault: () => {};\n  deltaX: number;\n  deltaY: number;\n  center: { x: number; y: number; };\n}\n\n/** @docs-private */\nexport interface HammerStatic {\n  new(element: HTMLElement | SVGElement, options?: any): HammerManager;\n\n  Pan: Recognizer;\n  Swipe: Recognizer;\n  Press: Recognizer;\n}\n\n/** @docs-private */\nexport interface Recognizer {\n  new(options?: any): Recognizer;\n  recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\n}\n\n/** @docs-private */\nexport interface RecognizerStatic {\n  new(options?: any): Recognizer;\n}\n\n/** @docs-private */\nexport interface HammerInstance {\n  on(eventName: string, callback: Function): void;\n  off(eventName: string, callback: Function): void;\n}\n\n/** @docs-private */\nexport interface HammerManager {\n  add(recogniser: Recognizer | Recognizer[]): Recognizer;\n  set(options: any): HammerManager;\n  emit(event: string, data: any): void;\n  off(events: string, handler?: Function): void;\n  on(events: string, handler: Function): void;\n}\n\n/** @docs-private */\nexport interface HammerOptions {\n  cssProps?: {[key: string]: string};\n  domEvents?: boolean;\n  enable?: boolean | ((manager: HammerManager) => boolean);\n  preset?: any[];\n  touchAction?: string;\n  recognizers?: any[];\n\n  inputClass?: HammerInput;\n  inputTarget?: EventTarget;\n}\n"]}