{"version":3,"file":"chip-list.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {animate, style, transition, trigger} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {\n  BACKSPACE,\n  DELETE,\n  ENTER,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  TAB,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {\n  createKeyboardEvent,\n  dispatchFakeEvent,\n  dispatchKeyboardEvent,\n  dispatchMouseEvent,\n  typeInElement,\n  MockNgZone,\n} from '@angular/cdk/testing';\nimport {\n  Component,\n  DebugElement,\n  NgZone,\n  Provider,\n  QueryList,\n  Type,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport {ComponentFixture, fakeAsync, TestBed, tick} from '@angular/core/testing';\nimport {FormControl, FormsModule, NgForm, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {By} from '@angular/platform-browser';\nimport {BrowserAnimationsModule, NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {MatInputModule} from '../input/index';\nimport {MatChip} from './chip';\nimport {MatChipInputEvent} from './chip-input';\nimport {MatChipEvent, MatChipList, MatChipRemove, MatChipsModule} from './index';\n\n\ndescribe('MatChipList', () => {\n  let fixture: ComponentFixture<any>;\n  let chipListDebugElement: DebugElement;\n  let chipListNativeElement: HTMLElement;\n  let chipListInstance: MatChipList;\n  let testComponent: StandardChipList;\n  let chips: QueryList<MatChip>;\n  let manager: FocusKeyManager<MatChip>;\n  let zone: MockNgZone;\n  let dirChange: Subject<Direction>;\n\n  describe('StandardChipList', () => {\n    describe('basic behaviors', () => {\n      beforeEach(() => {\n        setupStandardList();\n      });\n\n      it('should add the `mat-chip-list` class', () => {\n        expect(chipListNativeElement.classList).toContain('mat-chip-list');\n      });\n\n      it('should not have the aria-selected attribute when is not selectable', () => {\n        testComponent.selectable = false;\n        fixture.detectChanges();\n\n        const chipsValid = chips.toArray().every(chip =>\n            !chip.selectable && !chip._elementRef.nativeElement.hasAttribute('aria-selected'));\n\n        expect(chipsValid).toBe(true);\n      });\n\n      it('should toggle the chips disabled state based on whether it is disabled', () => {\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(false);\n\n        chipListInstance.disabled = true;\n        fixture.detectChanges();\n\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(true);\n\n        chipListInstance.disabled = false;\n        fixture.detectChanges();\n\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(false);\n      });\n\n      it('should disable a chip that is added after the list became disabled', fakeAsync(() => {\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(false);\n\n        chipListInstance.disabled = true;\n        fixture.detectChanges();\n\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(true);\n\n        fixture.componentInstance.items.push(5, 6);\n        fixture.detectChanges();\n        tick();\n        fixture.detectChanges();\n\n        expect(chips.toArray().every(chip => chip.disabled)).toBe(true);\n      }));\n\n    });\n\n    describe('with selected chips', () => {\n      beforeEach(() => {\n        fixture = createComponent(SelectedChipList);\n        fixture.detectChanges();\n        chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n        chipListNativeElement = chipListDebugElement.nativeElement;\n      });\n\n      it('should not override chips selected', () => {\n        const instanceChips = fixture.componentInstance.chips.toArray();\n\n        expect(instanceChips[0].selected).toBe(true, 'Expected first option to be selected.');\n        expect(instanceChips[1].selected).toBe(false, 'Expected second option to be not selected.');\n        expect(instanceChips[2].selected).toBe(true, 'Expected third option to be selected.');\n      });\n\n      it('should have role listbox', () => {\n        expect(chipListNativeElement.getAttribute('role')).toBe('listbox');\n      });\n\n      it('should not have role when empty', () => {\n        fixture.componentInstance.foods = [];\n        fixture.detectChanges();\n\n        expect(chipListNativeElement.getAttribute('role')).toBeNull('Expect no role attribute');\n      });\n    });\n\n    describe('focus behaviors', () => {\n      beforeEach(() => {\n        setupStandardList();\n        manager = chipListInstance._keyManager;\n      });\n\n      it('should focus the first chip on focus', () => {\n        chipListInstance.focus();\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(0);\n      });\n\n      it('should watch for chip focus', () => {\n        let array = chips.toArray();\n        let lastIndex = array.length - 1;\n        let lastItem = array[lastIndex];\n        lastItem.focus();\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(lastIndex);\n      });\n\n      it('should watch for chip focus', () => {\n        let array = chips.toArray();\n        let lastIndex = array.length - 1;\n        let lastItem = array[lastIndex];\n\n        lastItem.focus();\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(lastIndex);\n      });\n\n      it('should be able to become focused when disabled', () => {\n        expect(chipListInstance.focused).toBe(false, 'Expected list to not be focused.');\n\n        chipListInstance.disabled = true;\n        fixture.detectChanges();\n\n        chipListInstance.focus();\n        fixture.detectChanges();\n\n        expect(chipListInstance.focused).toBe(false, 'Expected list to continue not to be focused');\n      });\n\n      it('should remove the tabindex from the list if it is disabled', () => {\n        expect(chipListNativeElement.getAttribute('tabindex')).toBeTruthy();\n\n        chipListInstance.disabled = true;\n        fixture.detectChanges();\n\n        expect(chipListNativeElement.hasAttribute('tabindex')).toBeFalsy();\n      });\n\n      describe('on chip destroy', () => {\n\n        it('should focus the next item', () => {\n          let array = chips.toArray();\n          let midItem = array[2];\n\n          // Focus the middle item\n          midItem.focus();\n\n          // Destroy the middle item\n          testComponent.remove = 2;\n          fixture.detectChanges();\n\n          // It focuses the 4th item (now at index 2)\n          expect(manager.activeItemIndex).toEqual(2);\n        });\n\n        it('should focus the previous item', () => {\n          let array = chips.toArray();\n          let lastIndex = array.length - 1;\n          let lastItem = array[lastIndex];\n\n          // Focus the last item\n          lastItem.focus();\n\n          // Destroy the last item\n          testComponent.remove = lastIndex;\n          fixture.detectChanges();\n\n          // It focuses the next-to-last item\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\n        });\n\n        it('should not focus if chip list is not focused', () => {\n          let array = chips.toArray();\n          let midItem = array[2];\n\n          // Focus and blur the middle item\n          midItem.focus();\n          midItem._blur();\n          zone.simulateZoneExit();\n\n          // Destroy the middle item\n          testComponent.remove = 2;\n          fixture.detectChanges();\n\n          // Should not have focus\n          expect(chipListInstance._keyManager.activeItemIndex).toEqual(-1);\n        });\n\n        it('should move focus to the last chip when the focused chip was deleted inside a' +\n          'component with animations', fakeAsync(() => {\n            fixture.destroy();\n            TestBed.resetTestingModule();\n            fixture = createComponent(StandardChipListWithAnimations, [], BrowserAnimationsModule);\n            fixture.detectChanges();\n\n            chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n            chipListNativeElement = chipListDebugElement.nativeElement;\n            chipListInstance = chipListDebugElement.componentInstance;\n            testComponent = fixture.debugElement.componentInstance;\n            chips = chipListInstance.chips;\n\n            chips.last.focus();\n            fixture.detectChanges();\n\n            expect(chipListInstance._keyManager.activeItemIndex).toBe(chips.length - 1);\n\n            dispatchKeyboardEvent(chips.last._elementRef.nativeElement, 'keydown', BACKSPACE);\n            fixture.detectChanges();\n            tick(500);\n\n            expect(chipListInstance._keyManager.activeItemIndex).toBe(chips.length - 1);\n          }));\n\n      });\n    });\n\n    describe('keyboard behavior', () => {\n      describe('LTR (default)', () => {\n        beforeEach(() => {\n          setupStandardList();\n          manager = chipListInstance._keyManager;\n        });\n\n        it('should focus previous item when press LEFT ARROW', () => {\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          let lastNativeChip = nativeChips[nativeChips.length - 1] as HTMLElement;\n\n          let LEFT_EVENT = createKeyboardEvent('keydown', LEFT_ARROW, lastNativeChip);\n          let array = chips.toArray();\n          let lastIndex = array.length - 1;\n          let lastItem = array[lastIndex];\n\n          // Focus the last item in the array\n          lastItem.focus();\n          expect(manager.activeItemIndex).toEqual(lastIndex);\n\n          // Press the LEFT arrow\n          chipListInstance._keydown(LEFT_EVENT);\n          chipListInstance._blur(); // Simulate focus leaving the list and going to the chip.\n          fixture.detectChanges();\n\n          // It focuses the next-to-last item\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\n        });\n\n        it('should focus next item when press RIGHT ARROW', () => {\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          let firstNativeChip = nativeChips[0] as HTMLElement;\n\n          let RIGHT_EVENT: KeyboardEvent =\n            createKeyboardEvent('keydown', RIGHT_ARROW, firstNativeChip);\n          let array = chips.toArray();\n          let firstItem = array[0];\n\n          // Focus the last item in the array\n          firstItem.focus();\n          expect(manager.activeItemIndex).toEqual(0);\n\n          // Press the RIGHT arrow\n          chipListInstance._keydown(RIGHT_EVENT);\n          chipListInstance._blur(); // Simulate focus leaving the list and going to the chip.\n          fixture.detectChanges();\n\n          // It focuses the next-to-last item\n          expect(manager.activeItemIndex).toEqual(1);\n        });\n\n        it('should not handle arrow key events from non-chip elements', () => {\n          const event: KeyboardEvent =\n              createKeyboardEvent('keydown', RIGHT_ARROW, chipListNativeElement);\n          const initialActiveIndex = manager.activeItemIndex;\n\n          chipListInstance._keydown(event);\n          fixture.detectChanges();\n\n          expect(manager.activeItemIndex)\n              .toBe(initialActiveIndex, 'Expected focused item not to have changed.');\n        });\n\n        it('should focus the first item when pressing HOME', () => {\n          const nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          const lastNativeChip = nativeChips[nativeChips.length - 1] as HTMLElement;\n          const HOME_EVENT = createKeyboardEvent('keydown', HOME, lastNativeChip);\n          const array = chips.toArray();\n          const lastItem = array[array.length - 1];\n\n          lastItem.focus();\n          expect(manager.activeItemIndex).toBe(array.length - 1);\n\n          chipListInstance._keydown(HOME_EVENT);\n          fixture.detectChanges();\n\n          expect(manager.activeItemIndex).toBe(0);\n          expect(HOME_EVENT.defaultPrevented).toBe(true);\n        });\n\n        it('should focus the last item when pressing END', () => {\n          const nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          const END_EVENT = createKeyboardEvent('keydown', END, nativeChips[0]);\n\n          expect(manager.activeItemIndex).toBe(-1);\n\n          chipListInstance._keydown(END_EVENT);\n          fixture.detectChanges();\n\n          expect(manager.activeItemIndex).toBe(chips.length - 1);\n          expect(END_EVENT.defaultPrevented).toBe(true);\n        });\n\n      });\n\n      describe('RTL', () => {\n        beforeEach(() => {\n          setupStandardList('rtl');\n          manager = chipListInstance._keyManager;\n        });\n\n        it('should focus previous item when press RIGHT ARROW', () => {\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          let lastNativeChip = nativeChips[nativeChips.length - 1] as HTMLElement;\n\n          let RIGHT_EVENT: KeyboardEvent =\n              createKeyboardEvent('keydown', RIGHT_ARROW, lastNativeChip);\n          let array = chips.toArray();\n          let lastIndex = array.length - 1;\n          let lastItem = array[lastIndex];\n\n          // Focus the last item in the array\n          lastItem.focus();\n          expect(manager.activeItemIndex).toEqual(lastIndex);\n\n          // Press the RIGHT arrow\n          chipListInstance._keydown(RIGHT_EVENT);\n          chipListInstance._blur(); // Simulate focus leaving the list and going to the chip.\n          fixture.detectChanges();\n\n          // It focuses the next-to-last item\n          expect(manager.activeItemIndex).toEqual(lastIndex - 1);\n        });\n\n        it('should focus next item when press LEFT ARROW', () => {\n          let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n          let firstNativeChip = nativeChips[0] as HTMLElement;\n\n          let LEFT_EVENT: KeyboardEvent =\n              createKeyboardEvent('keydown', LEFT_ARROW, firstNativeChip);\n          let array = chips.toArray();\n          let firstItem = array[0];\n\n          // Focus the last item in the array\n          firstItem.focus();\n          expect(manager.activeItemIndex).toEqual(0);\n\n          // Press the LEFT arrow\n          chipListInstance._keydown(LEFT_EVENT);\n          chipListInstance._blur(); // Simulate focus leaving the list and going to the chip.\n          fixture.detectChanges();\n\n          // It focuses the next-to-last item\n          expect(manager.activeItemIndex).toEqual(1);\n        });\n\n        it('should allow focus to escape when tabbing away', fakeAsync(() => {\n          chipListInstance._keyManager.onKeydown(createKeyboardEvent('keydown', TAB));\n\n          expect(chipListInstance._tabIndex)\n            .toBe(-1, 'Expected tabIndex to be set to -1 temporarily.');\n\n          tick();\n\n          expect(chipListInstance._tabIndex).toBe(0, 'Expected tabIndex to be reset back to 0');\n        }));\n\n        it(`should use user defined tabIndex`, fakeAsync(() => {\n          chipListInstance.tabIndex = 4;\n\n          fixture.detectChanges();\n\n          expect(chipListInstance._tabIndex)\n            .toBe(4, 'Expected tabIndex to be set to user defined value 4.');\n\n          chipListInstance._keyManager.onKeydown(createKeyboardEvent('keydown', TAB));\n\n          expect(chipListInstance._tabIndex)\n            .toBe(-1, 'Expected tabIndex to be set to -1 temporarily.');\n\n          tick();\n\n          expect(chipListInstance._tabIndex).toBe(4, 'Expected tabIndex to be reset back to 4');\n        }));\n      });\n\n      it('should account for the direction changing', () => {\n        setupStandardList();\n        manager = chipListInstance._keyManager;\n\n        let nativeChips = chipListNativeElement.querySelectorAll('mat-chip');\n        let firstNativeChip = nativeChips[0] as HTMLElement;\n\n        let RIGHT_EVENT: KeyboardEvent =\n          createKeyboardEvent('keydown', RIGHT_ARROW, firstNativeChip);\n        let array = chips.toArray();\n        let firstItem = array[0];\n\n        firstItem.focus();\n        expect(manager.activeItemIndex).toBe(0);\n\n        chipListInstance._keydown(RIGHT_EVENT);\n        chipListInstance._blur();\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(1);\n\n        dirChange.next('rtl');\n        fixture.detectChanges();\n\n        chipListInstance._keydown(RIGHT_EVENT);\n        chipListInstance._blur();\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(0);\n      });\n\n    });\n  });\n\n  describe('FormFieldChipList', () => {\n\n    beforeEach(() => {\n      setupInputList();\n    });\n\n    describe('keyboard behavior', () => {\n      beforeEach(() => {\n        manager = chipListInstance._keyManager;\n      });\n\n      it('should maintain focus if the active chip is deleted', () => {\n        const secondChip = fixture.nativeElement.querySelectorAll('.mat-chip')[1];\n\n        secondChip.focus();\n        fixture.detectChanges();\n\n        expect(chipListInstance.chips.toArray().findIndex(chip => chip._hasFocus)).toBe(1);\n\n        dispatchKeyboardEvent(secondChip, 'keydown', DELETE);\n        fixture.detectChanges();\n\n        expect(chipListInstance.chips.toArray().findIndex(chip => chip._hasFocus)).toBe(1);\n      });\n\n      describe('when the input has focus', () => {\n\n        it('should not focus the last chip when press DELETE', () => {\n          let nativeInput = fixture.nativeElement.querySelector('input');\n          let DELETE_EVENT: KeyboardEvent =\n              createKeyboardEvent('keydown', DELETE, nativeInput);\n\n          // Focus the input\n          nativeInput.focus();\n          expect(manager.activeItemIndex).toBe(-1);\n\n          // Press the DELETE key\n          chipListInstance._keydown(DELETE_EVENT);\n          fixture.detectChanges();\n\n          // It doesn't focus the last chip\n          expect(manager.activeItemIndex).toEqual(-1);\n        });\n\n        it('should focus the last chip when press BACKSPACE', () => {\n          let nativeInput = fixture.nativeElement.querySelector('input');\n          let BACKSPACE_EVENT: KeyboardEvent =\n              createKeyboardEvent('keydown', BACKSPACE, nativeInput);\n\n          // Focus the input\n          nativeInput.focus();\n          expect(manager.activeItemIndex).toBe(-1);\n\n          // Press the BACKSPACE key\n          chipListInstance._keydown(BACKSPACE_EVENT);\n          fixture.detectChanges();\n\n          // It focuses the last chip\n          expect(manager.activeItemIndex).toEqual(chips.length - 1);\n        });\n\n      });\n    });\n\n    it('should complete the stateChanges stream on destroy', () => {\n      const spy = jasmine.createSpy('stateChanges complete');\n      const subscription = chipListInstance.stateChanges.subscribe(undefined, undefined, spy);\n\n      fixture.destroy();\n      expect(spy).toHaveBeenCalled();\n      subscription.unsubscribe();\n    });\n\n    it('should point the label id to the chip input', () => {\n      const label = fixture.nativeElement.querySelector('label');\n      const input = fixture.nativeElement.querySelector('input');\n\n      fixture.detectChanges();\n\n      expect(label.getAttribute('for')).toBeTruthy();\n      expect(label.getAttribute('for')).toBe(input.getAttribute('id'));\n      expect(label.getAttribute('aria-owns')).toBe(input.getAttribute('id'));\n    });\n\n  });\n\n  describe('with chip remove', () => {\n    let chipList: MatChipList;\n    let chipRemoveDebugElements: DebugElement[];\n\n    beforeEach(() => {\n      fixture = createComponent(ChipListWithRemove);\n      fixture.detectChanges();\n\n      chipList = fixture.debugElement.query(By.directive(MatChipList)).componentInstance;\n      chipRemoveDebugElements = fixture.debugElement.queryAll(By.directive(MatChipRemove));\n      chips = chipList.chips;\n    });\n\n    it('should properly focus next item if chip is removed through click', () => {\n      chips.toArray()[2].focus();\n\n      // Destroy the third focused chip by dispatching a bubbling click event on the\n      // associated chip remove element.\n      dispatchMouseEvent(chipRemoveDebugElements[2].nativeElement, 'click');\n      fixture.detectChanges();\n\n      expect(chips.toArray()[2].value).not.toBe(2, 'Expected the third chip to be removed.');\n      expect(chipList._keyManager.activeItemIndex).toBe(2);\n    });\n  });\n\n  describe('selection logic', () => {\n    let formField: HTMLElement;\n    let nativeChips: HTMLElement[];\n\n    beforeEach(() => {\n      fixture = createComponent(BasicChipList);\n      fixture.detectChanges();\n\n      formField = fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\n          .map((chip) => chip.nativeElement);\n\n\n      chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n      chipListInstance = chipListDebugElement.componentInstance;\n      chips = chipListInstance.chips;\n\n    });\n\n    it('should float placeholder if chip is selected', () => {\n      expect(formField.classList.contains('mat-form-field-should-float'))\n        .toBe(true, 'placeholder should be floating');\n    });\n\n    it('should remove selection if chip has been removed', fakeAsync(() => {\n      const instanceChips = fixture.componentInstance.chips;\n      const chipList = fixture.componentInstance.chipList;\n      const firstChip = nativeChips[0];\n      dispatchKeyboardEvent(firstChip, 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(instanceChips.first.selected).toBe(true, 'Expected first option to be selected.');\n      expect(chipList.selected).toBe(chips.first, 'Expected first option to be selected.');\n\n      fixture.componentInstance.foods = [];\n      fixture.detectChanges();\n      tick();\n\n      expect(chipList.selected)\n        .toBe(undefined, 'Expected selection to be removed when option no longer exists.');\n    }));\n\n\n    it('should select an option that was added after initialization', () => {\n      fixture.componentInstance.foods.push({viewValue: 'Potatoes', value: 'potatoes-8'});\n      fixture.detectChanges();\n\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\n        .map((chip) => chip.nativeElement);\n      const lastChip = nativeChips[8];\n      dispatchKeyboardEvent(lastChip, 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.chipList.value)\n        .toContain('potatoes-8', 'Expect value contain the value of the last option');\n      expect(fixture.componentInstance.chips.last.selected)\n        .toBeTruthy('Expect last option selected');\n    });\n\n    it('should not select disabled chips', () => {\n      const array = chips.toArray();\n      const disabledChip = nativeChips[2];\n      dispatchKeyboardEvent(disabledChip, 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.chipList.value)\n        .toBeUndefined('Expect value to be undefined');\n      expect(array[2].selected).toBeFalsy('Expect disabled chip not selected');\n      expect(fixture.componentInstance.chipList.selected)\n        .toBeUndefined('Expect no selected chips');\n    });\n\n  });\n\n  describe('forms integration', () => {\n    let nativeChips: HTMLElement[];\n\n    describe('single selection', () => {\n      beforeEach(() => {\n        fixture = createComponent(BasicChipList);\n        fixture.detectChanges();\n\n        nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\n          .map((chip) => chip.nativeElement);\n        chips = fixture.componentInstance.chips;\n      });\n\n      it('should take an initial view value with reactive forms', () => {\n        fixture.componentInstance.control = new FormControl('pizza-1');\n        fixture.detectChanges();\n\n        const array = chips.toArray();\n\n        expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\n\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\n        fixture.detectChanges();\n\n        expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\n      });\n\n      it('should set the view value from the form', () => {\n        const chipList = fixture.componentInstance.chipList;\n        const array = chips.toArray();\n\n        expect(chipList.value).toBeFalsy('Expect chip list to have no initial value');\n\n        fixture.componentInstance.control.setValue('pizza-1');\n        fixture.detectChanges();\n\n        expect(array[1].selected).toBeTruthy('Expect chip to be selected');\n      });\n\n      it('should update the form value when the view changes', () => {\n\n        expect(fixture.componentInstance.control.value)\n          .toEqual(null, `Expected the control's value to be empty initially.`);\n\n        dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\n        fixture.detectChanges();\n\n        expect(fixture.componentInstance.control.value)\n          .toEqual('steak-0', `Expected control's value to be set to the new option.`);\n      });\n\n      it('should clear the selection when a nonexistent option value is selected', () => {\n        const array = chips.toArray();\n\n        fixture.componentInstance.control.setValue('pizza-1');\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeTruthy(`Expected chip with the value to be selected.`);\n\n        fixture.componentInstance.control.setValue('gibberish');\n\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\n      });\n\n\n      it('should clear the selection when the control is reset', () => {\n        const array = chips.toArray();\n\n        fixture.componentInstance.control.setValue('pizza-1');\n        fixture.detectChanges();\n\n        fixture.componentInstance.control.reset();\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\n      });\n\n      it('should set the control to touched when the chip list is touched', () => {\n        expect(fixture.componentInstance.control.touched)\n          .toBe(false, 'Expected the control to start off as untouched.');\n\n        const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\n        dispatchFakeEvent(nativeChipList, 'blur');\n\n        expect(fixture.componentInstance.control.touched)\n          .toBe(true, 'Expected the control to be touched.');\n      });\n\n      it('should not set touched when a disabled chip list is touched', () => {\n        expect(fixture.componentInstance.control.touched)\n          .toBe(false, 'Expected the control to start off as untouched.');\n\n        fixture.componentInstance.control.disable();\n        const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\n        dispatchFakeEvent(nativeChipList, 'blur');\n\n        expect(fixture.componentInstance.control.touched)\n          .toBe(false, 'Expected the control to stay untouched.');\n      });\n\n      it('should set the control to dirty when the chip list\\'s value changes in the DOM', () => {\n        expect(fixture.componentInstance.control.dirty)\n          .toEqual(false, `Expected control to start out pristine.`);\n\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\n        fixture.detectChanges();\n\n        expect(fixture.componentInstance.control.dirty)\n          .toEqual(true, `Expected control to be dirty after value was changed by user.`);\n      });\n\n      it('should not set the control to dirty when the value changes programmatically', () => {\n        expect(fixture.componentInstance.control.dirty)\n          .toEqual(false, `Expected control to start out pristine.`);\n\n        fixture.componentInstance.control.setValue('pizza-1');\n\n        expect(fixture.componentInstance.control.dirty)\n          .toEqual(false, `Expected control to stay pristine after programmatic change.`);\n      });\n\n\n      it('should set an asterisk after the placeholder if the control is required', () => {\n        let requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\n        expect(requiredMarker)\n          .toBeNull(`Expected placeholder not to have an asterisk, as control was not required.`);\n\n        fixture.componentInstance.isRequired = true;\n        fixture.detectChanges();\n\n        requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\n        expect(requiredMarker)\n          .not.toBeNull(`Expected placeholder to have an asterisk, as control was required.`);\n      });\n\n      it('should be able to programmatically select a falsy option', () => {\n        fixture.destroy();\n        TestBed.resetTestingModule();\n\n        const falsyFixture = createComponent(FalsyValueChipList);\n        falsyFixture.detectChanges();\n\n        falsyFixture.componentInstance.control.setValue([0]);\n        falsyFixture.detectChanges();\n        falsyFixture.detectChanges();\n\n        expect(falsyFixture.componentInstance.chips.first.selected)\n          .toBe(true, 'Expected first option to be selected');\n      });\n\n      it('should not focus the active chip when the value is set programmatically', () => {\n        const chipArray = fixture.componentInstance.chips.toArray();\n\n        spyOn(chipArray[4], 'focus').and.callThrough();\n\n        fixture.componentInstance.control.setValue('chips-4');\n        fixture.detectChanges();\n\n        expect(chipArray[4].focus).not.toHaveBeenCalled();\n      });\n\n      it('should blur the form field when the active chip is blurred', fakeAsync(() => {\n        const formField: HTMLElement = fixture.nativeElement.querySelector('.mat-form-field');\n\n        nativeChips[0].focus();\n        fixture.detectChanges();\n\n        expect(formField.classList).toContain('mat-focused');\n\n        nativeChips[0].blur();\n        fixture.detectChanges();\n        zone.simulateZoneExit();\n        fixture.detectChanges();\n\n        expect(formField.classList).not.toContain('mat-focused');\n      }));\n    });\n\n    describe('multiple selection', () => {\n      beforeEach(() => {\n        fixture = createComponent(MultiSelectionChipList);\n        fixture.detectChanges();\n\n        nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\n          .map((chip) => chip.nativeElement);\n        chips = fixture.componentInstance.chips;\n      });\n\n      it('should take an initial view value with reactive forms', () => {\n        fixture.componentInstance.control = new FormControl(['pizza-1']);\n        fixture.detectChanges();\n\n        const array = chips.toArray();\n\n        expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\n\n        dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\n        fixture.detectChanges();\n\n        expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\n      });\n\n      it('should set the view value from the form', () => {\n        const chipList = fixture.componentInstance.chipList;\n        const array = chips.toArray();\n\n        expect(chipList.value).toBeFalsy('Expect chip list to have no initial value');\n\n        fixture.componentInstance.control.setValue(['pizza-1']);\n        fixture.detectChanges();\n\n        expect(array[1].selected).toBeTruthy('Expect chip to be selected');\n      });\n\n      it('should update the form value when the view changes', () => {\n\n        expect(fixture.componentInstance.control.value)\n          .toEqual(null, `Expected the control's value to be empty initially.`);\n\n        dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\n        fixture.detectChanges();\n\n        expect(fixture.componentInstance.control.value)\n          .toEqual(['steak-0'], `Expected control's value to be set to the new option.`);\n      });\n\n      it('should clear the selection when a nonexistent option value is selected', () => {\n        const array = chips.toArray();\n\n        fixture.componentInstance.control.setValue(['pizza-1']);\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeTruthy(`Expected chip with the value to be selected.`);\n\n        fixture.componentInstance.control.setValue(['gibberish']);\n\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\n      });\n\n\n      it('should clear the selection when the control is reset', () => {\n        const array = chips.toArray();\n\n        fixture.componentInstance.control.setValue(['pizza-1']);\n        fixture.detectChanges();\n\n        fixture.componentInstance.control.reset();\n        fixture.detectChanges();\n\n        expect(array[1].selected)\n          .toBeFalsy(`Expected chip with the old value not to be selected.`);\n      });\n    });\n  });\n\n  describe('chip list with chip input', () => {\n    let nativeChips: HTMLElement[];\n\n    beforeEach(() => {\n      fixture = createComponent(InputChipList);\n      fixture.detectChanges();\n\n      nativeChips = fixture.debugElement.queryAll(By.css('mat-chip'))\n        .map((chip) => chip.nativeElement);\n    });\n\n    it('should take an initial view value with reactive forms', () => {\n      fixture.componentInstance.control = new FormControl(['pizza-1']);\n      fixture.detectChanges();\n\n      const array = fixture.componentInstance.chips.toArray();\n\n      expect(array[1].selected).toBeTruthy('Expect pizza-1 chip to be selected');\n\n      dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(array[1].selected).toBeFalsy('Expect chip to be not selected after toggle selected');\n    });\n\n    it('should set the view value from the form', () => {\n      const array = fixture.componentInstance.chips.toArray();\n\n      expect(array[1].selected).toBeFalsy('Expect chip to not be selected');\n\n      fixture.componentInstance.control.setValue(['pizza-1']);\n      fixture.detectChanges();\n\n      expect(array[1].selected).toBeTruthy('Expect chip to be selected');\n    });\n\n    it('should update the form value when the view changes', () => {\n\n      expect(fixture.componentInstance.control.value)\n        .toEqual(null, `Expected the control's value to be empty initially.`);\n\n      dispatchKeyboardEvent(nativeChips[0], 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.control.value)\n        .toEqual(['steak-0'], `Expected control's value to be set to the new option.`);\n    });\n\n    it('should clear the selection when a nonexistent option value is selected', () => {\n      const array = fixture.componentInstance.chips.toArray();\n\n      fixture.componentInstance.control.setValue(['pizza-1']);\n      fixture.detectChanges();\n\n      expect(array[1].selected)\n        .toBeTruthy(`Expected chip with the value to be selected.`);\n\n      fixture.componentInstance.control.setValue(['gibberish']);\n\n      fixture.detectChanges();\n\n      expect(array[1].selected)\n        .toBeFalsy(`Expected chip with the old value not to be selected.`);\n    });\n\n\n    it('should clear the selection when the control is reset', () => {\n      const array = fixture.componentInstance.chips.toArray();\n\n      fixture.componentInstance.control.setValue(['pizza-1']);\n      fixture.detectChanges();\n\n      fixture.componentInstance.control.reset();\n      fixture.detectChanges();\n\n      expect(array[1].selected)\n        .toBeFalsy(`Expected chip with the old value not to be selected.`);\n    });\n\n    it('should set the control to touched when the chip list is touched', fakeAsync(() => {\n      expect(fixture.componentInstance.control.touched)\n        .toBe(false, 'Expected the control to start off as untouched.');\n\n      const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\n\n      dispatchFakeEvent(nativeChipList, 'blur');\n      tick();\n\n      expect(fixture.componentInstance.control.touched)\n        .toBe(true, 'Expected the control to be touched.');\n    }));\n\n    it('should not set touched when a disabled chip list is touched', () => {\n      expect(fixture.componentInstance.control.touched)\n        .toBe(false, 'Expected the control to start off as untouched.');\n\n      fixture.componentInstance.control.disable();\n      const nativeChipList = fixture.debugElement.query(By.css('.mat-chip-list')).nativeElement;\n      dispatchFakeEvent(nativeChipList, 'blur');\n\n      expect(fixture.componentInstance.control.touched)\n        .toBe(false, 'Expected the control to stay untouched.');\n    });\n\n    it('should set the control to dirty when the chip list\\'s value changes in the DOM', () => {\n      expect(fixture.componentInstance.control.dirty)\n        .toEqual(false, `Expected control to start out pristine.`);\n\n      dispatchKeyboardEvent(nativeChips[1], 'keydown', SPACE);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.control.dirty)\n        .toEqual(true, `Expected control to be dirty after value was changed by user.`);\n    });\n\n    it('should not set the control to dirty when the value changes programmatically', () => {\n      expect(fixture.componentInstance.control.dirty)\n        .toEqual(false, `Expected control to start out pristine.`);\n\n      fixture.componentInstance.control.setValue(['pizza-1']);\n\n      expect(fixture.componentInstance.control.dirty)\n        .toEqual(false, `Expected control to stay pristine after programmatic change.`);\n    });\n\n\n    it('should set an asterisk after the placeholder if the control is required', () => {\n      let requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\n      expect(requiredMarker)\n        .toBeNull(`Expected placeholder not to have an asterisk, as control was not required.`);\n\n      fixture.componentInstance.isRequired = true;\n      fixture.detectChanges();\n\n      requiredMarker = fixture.debugElement.query(By.css('.mat-form-field-required-marker'));\n      expect(requiredMarker)\n        .not.toBeNull(`Expected placeholder to have an asterisk, as control was required.`);\n    });\n\n    it('should keep focus on the input after adding the first chip', fakeAsync(() => {\n      const nativeInput = fixture.nativeElement.querySelector('input');\n      const chipEls = Array.from<HTMLElement>(\n          fixture.nativeElement.querySelectorAll('.mat-chip')).reverse();\n\n      // Remove the chips via backspace to simulate the user removing them.\n      chipEls.forEach(chip => {\n        chip.focus();\n        dispatchKeyboardEvent(chip, 'keydown', BACKSPACE);\n        fixture.detectChanges();\n        tick();\n      });\n\n      nativeInput.focus();\n      expect(fixture.componentInstance.foods).toEqual([], 'Expected all chips to be removed.');\n      expect(document.activeElement).toBe(nativeInput, 'Expected input to be focused.');\n\n      typeInElement('123', nativeInput);\n      fixture.detectChanges();\n      dispatchKeyboardEvent(nativeInput, 'keydown', ENTER);\n      fixture.detectChanges();\n      tick();\n\n      expect(document.activeElement).toBe(nativeInput, 'Expected input to remain focused.');\n    }));\n\n    it('should set aria-invalid if the form field is invalid', () => {\n      fixture.componentInstance.control = new FormControl(undefined, [Validators.required]);\n      fixture.detectChanges();\n\n      const input: HTMLInputElement = fixture.nativeElement.querySelector('input');\n\n      expect(input.getAttribute('aria-invalid')).toBe('true');\n\n      fixture.componentInstance.chips.first.selectViaInteraction();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-invalid')).toBe('false');\n    });\n\n    describe('keyboard behavior', () => {\n      beforeEach(() => {\n        chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n        chipListInstance = chipListDebugElement.componentInstance;\n        chips = chipListInstance.chips;\n        manager = fixture.componentInstance.chipList._keyManager;\n      });\n\n      describe('when the input has focus', () => {\n\n        it('should not focus the last chip when press DELETE', () => {\n          let nativeInput = fixture.nativeElement.querySelector('input');\n          let DELETE_EVENT: KeyboardEvent =\n            createKeyboardEvent('keydown', DELETE, nativeInput);\n\n          // Focus the input\n          nativeInput.focus();\n          expect(manager.activeItemIndex).toBe(-1);\n\n          // Press the DELETE key\n          chipListInstance._keydown(DELETE_EVENT);\n          fixture.detectChanges();\n\n          // It doesn't focus the last chip\n          expect(manager.activeItemIndex).toEqual(-1);\n        });\n\n        it('should focus the last chip when press BACKSPACE', () => {\n          let nativeInput = fixture.nativeElement.querySelector('input');\n          let BACKSPACE_EVENT: KeyboardEvent =\n            createKeyboardEvent('keydown', BACKSPACE, nativeInput);\n\n          // Focus the input\n          nativeInput.focus();\n          expect(manager.activeItemIndex).toBe(-1);\n\n          // Press the BACKSPACE key\n          chipListInstance._keydown(BACKSPACE_EVENT);\n          fixture.detectChanges();\n\n          // It focuses the last chip\n          expect(manager.activeItemIndex).toEqual(chips.length - 1);\n        });\n\n      });\n    });\n  });\n\n  describe('error messages', () => {\n    let errorTestComponent: ChipListWithFormErrorMessages;\n    let containerEl: HTMLElement;\n    let chipListEl: HTMLElement;\n\n    beforeEach(() => {\n      fixture = createComponent(ChipListWithFormErrorMessages);\n      fixture.detectChanges();\n      errorTestComponent = fixture.componentInstance;\n      containerEl = fixture.debugElement.query(By.css('mat-form-field')).nativeElement;\n      chipListEl = fixture.debugElement.query(By.css('mat-chip-list')).nativeElement;\n    });\n\n    it('should not show any errors if the user has not interacted', () => {\n      expect(errorTestComponent.formControl.untouched)\n        .toBe(true, 'Expected untouched form control');\n      expect(containerEl.querySelectorAll('mat-error').length).toBe(0, 'Expected no error message');\n      expect(chipListEl.getAttribute('aria-invalid'))\n        .toBe('false', 'Expected aria-invalid to be set to \"false\".');\n    });\n\n    it('should display an error message when the list is touched and invalid', fakeAsync(() => {\n      expect(errorTestComponent.formControl.invalid)\n        .toBe(true, 'Expected form control to be invalid');\n      expect(containerEl.querySelectorAll('mat-error').length)\n        .toBe(0, 'Expected no error message');\n\n      errorTestComponent.formControl.markAsTouched();\n      fixture.detectChanges();\n      tick();\n\n      expect(containerEl.classList)\n        .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\n      expect(containerEl.querySelectorAll('mat-error').length)\n        .toBe(1, 'Expected one error message to have been rendered.');\n      expect(chipListEl.getAttribute('aria-invalid'))\n        .toBe('true', 'Expected aria-invalid to be set to \"true\".');\n    }));\n\n    it('should display an error message when the parent form is submitted', fakeAsync(() => {\n      expect(errorTestComponent.form.submitted)\n        .toBe(false, 'Expected form not to have been submitted');\n      expect(errorTestComponent.formControl.invalid)\n        .toBe(true, 'Expected form control to be invalid');\n      expect(containerEl.querySelectorAll('mat-error').length).toBe(0, 'Expected no error message');\n\n      dispatchFakeEvent(fixture.debugElement.query(By.css('form')).nativeElement, 'submit');\n      fixture.detectChanges();\n\n      fixture.whenStable().then(() => {\n        expect(errorTestComponent.form.submitted)\n          .toBe(true, 'Expected form to have been submitted');\n        expect(containerEl.classList)\n          .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\n        expect(containerEl.querySelectorAll('mat-error').length)\n          .toBe(1, 'Expected one error message to have been rendered.');\n        expect(chipListEl.getAttribute('aria-invalid'))\n          .toBe('true', 'Expected aria-invalid to be set to \"true\".');\n      });\n    }));\n\n    it('should hide the errors and show the hints once the chip list becomes valid',\n        fakeAsync(() => {\n      errorTestComponent.formControl.markAsTouched();\n      fixture.detectChanges();\n\n      fixture.whenStable().then(() => {\n        expect(containerEl.classList)\n          .toContain('mat-form-field-invalid', 'Expected container to have the invalid CSS class.');\n        expect(containerEl.querySelectorAll('mat-error').length)\n          .toBe(1, 'Expected one error message to have been rendered.');\n        expect(containerEl.querySelectorAll('mat-hint').length)\n          .toBe(0, 'Expected no hints to be shown.');\n\n        errorTestComponent.formControl.setValue('something');\n        fixture.detectChanges();\n\n        fixture.whenStable().then(() => {\n          expect(containerEl.classList).not.toContain('mat-form-field-invalid',\n            'Expected container not to have the invalid class when valid.');\n          expect(containerEl.querySelectorAll('mat-error').length)\n            .toBe(0, 'Expected no error messages when the input is valid.');\n          expect(containerEl.querySelectorAll('mat-hint').length)\n            .toBe(1, 'Expected one hint to be shown once the input is valid.');\n        });\n      });\n    }));\n\n    it('should set the proper role on the error messages', () => {\n      errorTestComponent.formControl.markAsTouched();\n      fixture.detectChanges();\n\n      expect(containerEl.querySelector('mat-error')!.getAttribute('role')).toBe('alert');\n    });\n\n    it('sets the aria-describedby to reference errors when in error state', () => {\n      let hintId = fixture.debugElement.query(By.css('.mat-hint')).nativeElement.getAttribute('id');\n      let describedBy = chipListEl.getAttribute('aria-describedby');\n\n      expect(hintId).toBeTruthy('hint should be shown');\n      expect(describedBy).toBe(hintId);\n\n      fixture.componentInstance.formControl.markAsTouched();\n      fixture.detectChanges();\n\n      let errorIds = fixture.debugElement.queryAll(By.css('.mat-error'))\n        .map(el => el.nativeElement.getAttribute('id')).join(' ');\n      describedBy = chipListEl.getAttribute('aria-describedby');\n\n      expect(errorIds).toBeTruthy('errors should be shown');\n      expect(describedBy).toBe(errorIds);\n    });\n  });\n\n  function createComponent<T>(component: Type<T>, providers: Provider[] = [], animationsModule:\n      Type<NoopAnimationsModule> | Type<BrowserAnimationsModule> = NoopAnimationsModule):\n          ComponentFixture<T> {\n    TestBed.configureTestingModule({\n      imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MatChipsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        animationsModule,\n      ],\n      declarations: [component],\n      providers: [\n        {provide: NgZone, useFactory: () => zone = new MockNgZone()},\n        ...providers\n      ]\n    }).compileComponents();\n\n    return TestBed.createComponent<T>(component);\n  }\n\n  function setupStandardList(direction: Direction = 'ltr') {\n    dirChange = new Subject();\n    fixture = createComponent(StandardChipList, [{\n      provide: Directionality, useFactory: () => ({\n        value: direction.toLowerCase(),\n        change: dirChange\n      })\n    }]);\n    fixture.detectChanges();\n\n    chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n    chipListNativeElement = chipListDebugElement.nativeElement;\n    chipListInstance = chipListDebugElement.componentInstance;\n    testComponent = fixture.debugElement.componentInstance;\n    chips = chipListInstance.chips;\n  }\n\n  function setupInputList() {\n    fixture = createComponent(FormFieldChipList);\n    fixture.detectChanges();\n\n    chipListDebugElement = fixture.debugElement.query(By.directive(MatChipList));\n    chipListNativeElement = chipListDebugElement.nativeElement;\n    chipListInstance = chipListDebugElement.componentInstance;\n    testComponent = fixture.debugElement.componentInstance;\n    chips = chipListInstance.chips;\n  }\n\n});\n\n@Component({\n  template: `\n    <mat-chip-list [tabIndex]=\"tabIndex\" [selectable]=\"selectable\">\n      <div *ngFor=\"let i of items\">\n       <div *ngIf=\"remove != i\">\n          <mat-chip (select)=\"chipSelect(i)\" (deselect)=\"chipDeselect(i)\">\n            {{name}} {{i + 1}}\n          </mat-chip>\n        </div>\n      </div>\n    </mat-chip-list>`\n})\nclass StandardChipList {\n  items = [0, 1, 2, 3, 4];\n  name: string = 'Test';\n  selectable: boolean = true;\n  remove: number;\n  chipSelect: (index?: number) => void = () => {};\n  chipDeselect: (index?: number) => void = () => {};\n  tabIndex: number = 0;\n}\n\n@Component({\n  template: `\n    <mat-form-field>\n      <mat-label>Add a chip</mat-label>\n      <mat-chip-list #chipList>\n        <mat-chip *ngFor=\"let chip of chips\" (removed)=\"remove(chip)\">{{chip}}</mat-chip>\n      </mat-chip-list>\n      <input name=\"test\" [matChipInputFor]=\"chipList\"/>\n    </mat-form-field>\n  `\n})\nclass FormFieldChipList {\n  chips = ['Chip 0', 'Chip 1', 'Chip 2'];\n\n  remove(chip: string) {\n    const index = this.chips.indexOf(chip);\n\n    if (index > -1) {\n      this.chips.splice(index, 1);\n    }\n  }\n}\n\n\n@Component({\n  selector: 'basic-chip-list',\n  template: `\n    <mat-form-field>\n      <mat-chip-list placeholder=\"Food\" [formControl]=\"control\" [required]=\"isRequired\"\n        [tabIndex]=\"tabIndexOverride\" [selectable]=\"selectable\">\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [disabled]=\"food.disabled\">\n          {{ food.viewValue }}\n        </mat-chip>\n      </mat-chip-list>\n    </mat-form-field>\n  `\n})\nclass BasicChipList {\n  foods: any[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\n    {value: 'chips-4', viewValue: 'Chips'},\n    {value: 'eggs-5', viewValue: 'Eggs'},\n    {value: 'pasta-6', viewValue: 'Pasta'},\n    {value: 'sushi-7', viewValue: 'Sushi'},\n  ];\n  control = new FormControl();\n  isRequired: boolean;\n  tabIndexOverride: number;\n  selectable: boolean;\n\n  @ViewChild(MatChipList) chipList: MatChipList;\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n}\n\n\n@Component({\n  selector: 'multi-selection-chip-list',\n  template: `\n    <mat-form-field>\n      <mat-chip-list [multiple]=\"true\" placeholder=\"Food\" [formControl]=\"control\"\n        [required]=\"isRequired\"\n        [tabIndex]=\"tabIndexOverride\" [selectable]=\"selectable\">\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [disabled]=\"food.disabled\">\n          {{ food.viewValue }}\n        </mat-chip>\n      </mat-chip-list>\n    </mat-form-field>\n  `\n})\nclass MultiSelectionChipList {\n  foods: any[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\n    {value: 'chips-4', viewValue: 'Chips'},\n    {value: 'eggs-5', viewValue: 'Eggs'},\n    {value: 'pasta-6', viewValue: 'Pasta'},\n    {value: 'sushi-7', viewValue: 'Sushi'},\n  ];\n  control = new FormControl();\n  isRequired: boolean;\n  tabIndexOverride: number;\n  selectable: boolean;\n\n  @ViewChild(MatChipList) chipList: MatChipList;\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n}\n\n@Component({\n  selector: 'input-chip-list',\n  template: `\n    <mat-form-field>\n      <mat-chip-list [multiple]=\"true\"\n                    placeholder=\"Food\" [formControl]=\"control\" [required]=\"isRequired\" #chipList1>\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" (removed)=\"remove(food)\">\n          {{ food.viewValue }}\n        </mat-chip>\n      </mat-chip-list>\n      <input placeholder=\"New food...\"\n          [matChipInputFor]=\"chipList1\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeyCodes\"\n          [matChipInputAddOnBlur]=\"addOnBlur\"\n          (matChipInputTokenEnd)=\"add($event)\" />/>\n    </mat-form-field>\n  `\n})\nclass InputChipList {\n  foods: any[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos', disabled: true},\n    {value: 'sandwich-3', viewValue: 'Sandwich'},\n    {value: 'chips-4', viewValue: 'Chips'},\n    {value: 'eggs-5', viewValue: 'Eggs'},\n    {value: 'pasta-6', viewValue: 'Pasta'},\n    {value: 'sushi-7', viewValue: 'Sushi'},\n  ];\n  control = new FormControl();\n\n  separatorKeyCodes = [ENTER, SPACE];\n  addOnBlur: boolean = true;\n  isRequired: boolean;\n\n  add(event: MatChipInputEvent): void {\n    let input = event.input;\n    let value = event.value;\n\n    // Add our foods\n    if ((value || '').trim()) {\n      this.foods.push({\n        value: `${value.trim().toLowerCase()}-${this.foods.length}`,\n        viewValue: value.trim()\n      });\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n  }\n\n  remove(food: any): void {\n    const index = this.foods.indexOf(food);\n\n    if (index > -1) {\n      this.foods.splice(index, 1);\n    }\n  }\n\n  @ViewChild(MatChipList) chipList: MatChipList;\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n}\n\n@Component({\n  template: `\n    <mat-form-field>\n      <mat-chip-list [formControl]=\"control\">\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\">{{ food.viewValue }}</mat-chip>\n      </mat-chip-list>\n    </mat-form-field>\n  `\n})\nclass FalsyValueChipList {\n  foods: any[] = [\n    {value: 0, viewValue: 'Steak'},\n    {value: 1, viewValue: 'Pizza'},\n  ];\n  control = new FormControl();\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n}\n\n@Component({\n  template: `\n    <mat-chip-list>\n        <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [selected]=\"food.selected\">\n            {{ food.viewValue }}\n        </mat-chip>\n    </mat-chip-list>\n  `\n})\nclass SelectedChipList {\n  foods: any[] = [\n    {value: 0, viewValue: 'Steak', selected: true},\n    {value: 1, viewValue: 'Pizza', selected: false},\n    {value: 2, viewValue: 'Pasta', selected: true},\n  ];\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n}\n\n@Component({\n  template: `\n<form #form=\"ngForm\" novalidate>\n  <mat-form-field>\n    <mat-chip-list [formControl]=\"formControl\">\n      <mat-chip *ngFor=\"let food of foods\" [value]=\"food.value\" [selected]=\"food.selected\">\n      {{food.viewValue}}\n      </mat-chip>\n    </mat-chip-list>\n    <mat-hint>Please select a chip, or type to add a new chip</mat-hint>\n    <mat-error>Should have value</mat-error>\n  </mat-form-field>\n</form>\n  `\n})\nclass ChipListWithFormErrorMessages {\n  foods: any[] = [\n    {value: 0, viewValue: 'Steak', selected: true},\n    {value: 1, viewValue: 'Pizza', selected: false},\n    {value: 2, viewValue: 'Pasta', selected: true},\n  ];\n  @ViewChildren(MatChip) chips: QueryList<MatChip>;\n\n  @ViewChild('form') form: NgForm;\n  formControl = new FormControl('', Validators.required);\n}\n\n\n@Component({\n  template: `\n    <mat-chip-list>\n      <mat-chip *ngFor=\"let i of numbers\" (removed)=\"remove(i)\">{{i}}</mat-chip>\n    </mat-chip-list>`,\n  animations: [\n    // For the case we're testing this animation doesn't\n    // have to be used anywhere, it just has to be defined.\n    trigger('dummyAnimation', [\n      transition(':leave', [\n        style({opacity: 0}),\n        animate('500ms', style({opacity: 1}))\n      ])\n    ])\n  ]\n})\nclass StandardChipListWithAnimations {\n  numbers = [0, 1, 2, 3, 4];\n\n  remove(item: number): void {\n    const index = this.numbers.indexOf(item);\n\n    if (index > -1) {\n      this.numbers.splice(index, 1);\n    }\n  }\n}\n\n@Component({\n  template: `\n    <mat-form-field>\n      <mat-chip-list>\n        <div *ngFor=\"let i of chips\">\n          <mat-chip [value]=\"i\" (removed)=\"removeChip($event)\">\n            Chip {{i + 1}}\n            <span matChipRemove>Remove</span>\n          </mat-chip>\n        </div>\n      </mat-chip-list>\n    </mat-form-field>\n  `\n})\nclass ChipListWithRemove {\n  chips = [0, 1, 2, 3, 4];\n\n  removeChip(event: MatChipEvent) {\n    this.chips.splice(event.chip.value, 1);\n  }\n}\n"]}