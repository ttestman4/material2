{"version":3,"file":"chip-remove.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-remove.spec.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAsD;AACtD,8DAA6C;AAC7C,iDAAuE;AACvE,iCAAgD;AAEhD,QAAQ,CAAC,aAAa,EAAE;IACtB,IAAI,OAAmC,CAAC;IACxC,IAAI,QAAkB,CAAC;IACvB,IAAI,gBAA8B,CAAC;IACnC,IAAI,iBAA8B,CAAC;IAEnC,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,sBAAc,CAAC;YACzB,YAAY,EAAE;gBACZ,QAAQ;aACT;SACF,CAAC,CAAC;QAEH,iBAAO,CAAC,iBAAiB,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC,eAAK,CAAC;QACf,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC5C,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;QAClD,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,SAAS,CAAC,eAAO,CAAC,CAAC,CAAC;QACrE,iBAAiB,GAAG,gBAAgB,CAAC,aAAa,CAAC;IACrD,CAAC,CAAC,CAAC,CAAC;IAEJ,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAI,WAAW,GAAG,iBAAiB,CAAC,aAAa,CAAC,GAAG,CAAE,CAAC;YAExD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE;YACpC,IAAI,WAAW,GAAG,iBAAiB,CAAC,aAAa,CAAC,GAAG,CAAE,CAAC;YAExD,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;YAC1B,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE7B,WAAW,CAAC,KAAK,EAAE,CAAC;YAEpB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAOH;IAAA;IAIA,CAAC;IADC,4BAAS,GAAT,cAAa,CAAC;IAHV,QAAQ;QALb,gBAAS,CAAC;YACT,QAAQ,EAAE,0GAET;SACF,CAAC;OACI,QAAQ,CAIb;IAAD,eAAC;CAAA,AAJD,IAIC","sourcesContent":["import {Component, DebugElement} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {MatChip, MatChipsModule} from './index';\n\ndescribe('Chip Remove', () => {\n  let fixture: ComponentFixture<TestChip>;\n  let testChip: TestChip;\n  let chipDebugElement: DebugElement;\n  let chipNativeElement: HTMLElement;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatChipsModule],\n      declarations: [\n        TestChip\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(async(() => {\n    fixture = TestBed.createComponent(TestChip);\n    testChip = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n\n    chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\n    chipNativeElement = chipDebugElement.nativeElement;\n  }));\n\n  describe('basic behavior', () => {\n    it('should applies the `mat-chip-remove` CSS class', () => {\n      let hrefElement = chipNativeElement.querySelector('a')!;\n\n      expect(hrefElement.classList).toContain('mat-chip-remove');\n    });\n\n    it('should emits (removed) on click', () => {\n      let hrefElement = chipNativeElement.querySelector('a')!;\n\n      testChip.removable = true;\n      fixture.detectChanges();\n\n      spyOn(testChip, 'didRemove');\n\n      hrefElement.click();\n\n      expect(testChip.didRemove).toHaveBeenCalled();\n    });\n  });\n});\n\n@Component({\n  template: `\n    <mat-chip [removable]=\"removable\" (removed)=\"didRemove()\"><a matChipRemove></a></mat-chip>\n  `\n})\nclass TestChip {\n  removable: boolean;\n\n  didRemove() {}\n}\n"]}