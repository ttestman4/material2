{"version":3,"file":"chip.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {createKeyboardEvent, dispatchFakeEvent} from '@angular/cdk/testing';\nimport {Component, DebugElement} from '@angular/core';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions} from '@angular/material/core';\nimport {By} from '@angular/platform-browser';\nimport {Subject} from 'rxjs';\nimport {MatChip, MatChipEvent, MatChipSelectionChange, MatChipsModule} from './index';\n\n\ndescribe('Chips', () => {\n  let fixture: ComponentFixture<any>;\n  let chipDebugElement: DebugElement;\n  let chipNativeElement: HTMLElement;\n  let chipInstance: MatChip;\n  let globalRippleOptions: RippleGlobalOptions;\n\n  let dir = 'ltr';\n\n  beforeEach(async(() => {\n    globalRippleOptions = {};\n    TestBed.configureTestingModule({\n      imports: [MatChipsModule],\n      declarations: [BasicChip, SingleChip],\n      providers: [\n        {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useFactory: () => globalRippleOptions},\n        {provide: Directionality, useFactory: () => ({\n          value: dir,\n          change: new Subject()\n        })},\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('MatBasicChip', () => {\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(BasicChip);\n      fixture.detectChanges();\n\n      chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\n      chipNativeElement = chipDebugElement.nativeElement;\n      chipInstance = chipDebugElement.injector.get<MatChip>(MatChip);\n\n      document.body.appendChild(chipNativeElement);\n    });\n\n    afterEach(() => {\n      document.body.removeChild(chipNativeElement);\n    });\n\n    it('adds the `mat-basic-chip` class', () => {\n      expect(chipNativeElement.classList).toContain('mat-chip');\n      expect(chipNativeElement.classList).toContain('mat-basic-chip');\n    });\n  });\n\n  describe('MatChip', () => {\n    let testComponent: SingleChip;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SingleChip);\n      fixture.detectChanges();\n\n      chipDebugElement = fixture.debugElement.query(By.directive(MatChip));\n      chipNativeElement = chipDebugElement.nativeElement;\n      chipInstance = chipDebugElement.injector.get<MatChip>(MatChip);\n      testComponent = fixture.debugElement.componentInstance;\n\n      document.body.appendChild(chipNativeElement);\n    });\n\n    afterEach(() => {\n      document.body.removeChild(chipNativeElement);\n    });\n\n    describe('basic behaviors', () => {\n\n      it('adds the `mat-chip` class', () => {\n        expect(chipNativeElement.classList).toContain('mat-chip');\n      });\n\n      it('does not add the `mat-basic-chip` class', () => {\n        expect(chipNativeElement.classList).not.toContain('mat-basic-chip');\n      });\n\n      it('emits focus only once for multiple clicks', () => {\n        let counter = 0;\n        chipInstance._onFocus.subscribe(() => {\n          counter ++ ;\n        });\n\n        chipNativeElement.focus();\n        chipNativeElement.focus();\n        fixture.detectChanges();\n\n        expect(counter).toBe(1);\n      });\n\n      it('emits destroy on destruction', () => {\n        spyOn(testComponent, 'chipDestroy').and.callThrough();\n\n        // Force a destroy callback\n        testComponent.shouldShow = false;\n        fixture.detectChanges();\n\n        expect(testComponent.chipDestroy).toHaveBeenCalledTimes(1);\n      });\n\n      it('allows color customization', () => {\n        expect(chipNativeElement.classList).toContain('mat-primary');\n\n        testComponent.color = 'warn';\n        fixture.detectChanges();\n\n        expect(chipNativeElement.classList).not.toContain('mat-primary');\n        expect(chipNativeElement.classList).toContain('mat-warn');\n      });\n\n      it('allows selection', () => {\n        spyOn(testComponent, 'chipSelectionChange');\n        expect(chipNativeElement.classList).not.toContain('mat-chip-selected');\n\n        testComponent.selected = true;\n        fixture.detectChanges();\n\n        expect(chipNativeElement.classList).toContain('mat-chip-selected');\n        expect(testComponent.chipSelectionChange)\n            .toHaveBeenCalledWith({source: chipInstance, isUserInput: false, selected: true});\n      });\n\n      it('allows removal', () => {\n        spyOn(testComponent, 'chipRemove');\n\n        chipInstance.remove();\n        fixture.detectChanges();\n\n        expect(testComponent.chipRemove).toHaveBeenCalledWith({chip: chipInstance});\n      });\n\n      it('should not prevent the default click action', () => {\n        const event = dispatchFakeEvent(chipNativeElement, 'click');\n        fixture.detectChanges();\n\n        expect(event.defaultPrevented).toBe(false);\n      });\n\n      it('should prevent the default click action when the chip is disabled', () => {\n        chipInstance.disabled = true;\n        fixture.detectChanges();\n\n        const event = dispatchFakeEvent(chipNativeElement, 'click');\n        fixture.detectChanges();\n\n        expect(event.defaultPrevented).toBe(true);\n      });\n\n      it('should not dispatch `selectionChange` event when deselecting a non-selected chip', () => {\n        chipInstance.deselect();\n\n        const spy = jasmine.createSpy('selectionChange spy');\n        const subscription = chipInstance.selectionChange.subscribe(spy);\n\n        chipInstance.deselect();\n\n        expect(spy).not.toHaveBeenCalled();\n        subscription.unsubscribe();\n      });\n\n      it('should not dispatch `selectionChange` event when selecting a selected chip', () => {\n        chipInstance.select();\n\n        const spy = jasmine.createSpy('selectionChange spy');\n        const subscription = chipInstance.selectionChange.subscribe(spy);\n\n        chipInstance.select();\n\n        expect(spy).not.toHaveBeenCalled();\n        subscription.unsubscribe();\n      });\n\n      it('should not dispatch `selectionChange` event when selecting a selected chip via ' +\n        'user interaction', () => {\n          chipInstance.select();\n\n          const spy = jasmine.createSpy('selectionChange spy');\n          const subscription = chipInstance.selectionChange.subscribe(spy);\n\n          chipInstance.selectViaInteraction();\n\n          expect(spy).not.toHaveBeenCalled();\n          subscription.unsubscribe();\n        });\n\n      it('should not dispatch `selectionChange` through setter if the value did not change', () => {\n        chipInstance.selected = false;\n\n        const spy = jasmine.createSpy('selectionChange spy');\n        const subscription = chipInstance.selectionChange.subscribe(spy);\n\n        chipInstance.selected = false;\n\n        expect(spy).not.toHaveBeenCalled();\n        subscription.unsubscribe();\n      });\n\n      it('should be able to disable ripples through ripple global options at runtime', () => {\n        expect(chipInstance.rippleDisabled).toBe(false, 'Expected chip ripples to be enabled.');\n\n        globalRippleOptions.disabled = true;\n\n        expect(chipInstance.rippleDisabled).toBe(true, 'Expected chip ripples to be disabled.');\n      });\n    });\n\n    describe('keyboard behavior', () => {\n\n      describe('when selectable is true', () => {\n        beforeEach(() => {\n          testComponent.selectable = true;\n          fixture.detectChanges();\n        });\n\n        it('should selects/deselects the currently focused chip on SPACE', () => {\n          const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE) as KeyboardEvent;\n          const CHIP_SELECTED_EVENT: MatChipSelectionChange = {\n            source: chipInstance,\n            isUserInput: true,\n            selected: true\n          };\n\n          const CHIP_DESELECTED_EVENT: MatChipSelectionChange = {\n            source: chipInstance,\n            isUserInput: true,\n            selected: false\n          };\n\n          spyOn(testComponent, 'chipSelectionChange');\n\n          // Use the spacebar to select the chip\n          chipInstance._handleKeydown(SPACE_EVENT);\n          fixture.detectChanges();\n\n          expect(chipInstance.selected).toBeTruthy();\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledTimes(1);\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledWith(CHIP_SELECTED_EVENT);\n\n          // Use the spacebar to deselect the chip\n          chipInstance._handleKeydown(SPACE_EVENT);\n          fixture.detectChanges();\n\n          expect(chipInstance.selected).toBeFalsy();\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledTimes(2);\n          expect(testComponent.chipSelectionChange).toHaveBeenCalledWith(CHIP_DESELECTED_EVENT);\n        });\n\n        it('should have correct aria-selected', () => {\n          expect(chipNativeElement.getAttribute('aria-selected')).toBe('false');\n\n          testComponent.selected = true;\n          fixture.detectChanges();\n\n          expect(chipNativeElement.getAttribute('aria-selected')).toBe('true');\n        });\n      });\n\n      describe('when selectable is false', () => {\n        beforeEach(() => {\n          testComponent.selectable = false;\n          fixture.detectChanges();\n        });\n\n        it('SPACE ignores selection', () => {\n          const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE) as KeyboardEvent;\n\n          spyOn(testComponent, 'chipSelectionChange');\n\n          // Use the spacebar to attempt to select the chip\n          chipInstance._handleKeydown(SPACE_EVENT);\n          fixture.detectChanges();\n\n          expect(chipInstance.selected).toBeFalsy();\n          expect(testComponent.chipSelectionChange).not.toHaveBeenCalled();\n        });\n\n        it('should not have the aria-selected attribute', () => {\n          expect(chipNativeElement.hasAttribute('aria-selected')).toBe(false);\n        });\n      });\n\n      describe('when removable is true', () => {\n        beforeEach(() => {\n          testComponent.removable = true;\n          fixture.detectChanges();\n        });\n\n        it('DELETE emits the (removed) event', () => {\n          const DELETE_EVENT = createKeyboardEvent('keydown', DELETE) as KeyboardEvent;\n\n          spyOn(testComponent, 'chipRemove');\n\n          // Use the delete to remove the chip\n          chipInstance._handleKeydown(DELETE_EVENT);\n          fixture.detectChanges();\n\n          expect(testComponent.chipRemove).toHaveBeenCalled();\n        });\n\n        it('BACKSPACE emits the (removed) event', () => {\n          const BACKSPACE_EVENT = createKeyboardEvent('keydown', BACKSPACE) as KeyboardEvent;\n\n          spyOn(testComponent, 'chipRemove');\n\n          // Use the delete to remove the chip\n          chipInstance._handleKeydown(BACKSPACE_EVENT);\n          fixture.detectChanges();\n\n          expect(testComponent.chipRemove).toHaveBeenCalled();\n        });\n      });\n\n      describe('when removable is false', () => {\n        beforeEach(() => {\n          testComponent.removable = false;\n          fixture.detectChanges();\n        });\n\n        it('DELETE does not emit the (removed) event', () => {\n          const DELETE_EVENT = createKeyboardEvent('keydown', DELETE) as KeyboardEvent;\n\n          spyOn(testComponent, 'chipRemove');\n\n          // Use the delete to remove the chip\n          chipInstance._handleKeydown(DELETE_EVENT);\n          fixture.detectChanges();\n\n          expect(testComponent.chipRemove).not.toHaveBeenCalled();\n        });\n\n        it('BACKSPACE does not emit the (removed) event', () => {\n          const BACKSPACE_EVENT = createKeyboardEvent('keydown', BACKSPACE) as KeyboardEvent;\n\n          spyOn(testComponent, 'chipRemove');\n\n          // Use the delete to remove the chip\n          chipInstance._handleKeydown(BACKSPACE_EVENT);\n          fixture.detectChanges();\n\n          expect(testComponent.chipRemove).not.toHaveBeenCalled();\n        });\n      });\n\n      it('should update the aria-label for disabled chips', () => {\n        expect(chipNativeElement.getAttribute('aria-disabled')).toBe('false');\n\n        testComponent.disabled = true;\n        fixture.detectChanges();\n\n        expect(chipNativeElement.getAttribute('aria-disabled')).toBe('true');\n      });\n\n      it('should make disabled chips non-focusable', () => {\n        expect(chipNativeElement.getAttribute('tabindex')).toBe('-1');\n\n        testComponent.disabled = true;\n        fixture.detectChanges();\n\n        expect(chipNativeElement.getAttribute('tabindex')).toBeFalsy();\n      });\n\n    });\n  });\n});\n\n@Component({\n  template: `\n    <mat-chip-list>\n      <div *ngIf=\"shouldShow\">\n        <mat-chip [selectable]=\"selectable\" [removable]=\"removable\"\n                 [color]=\"color\" [selected]=\"selected\" [disabled]=\"disabled\"\n                 (focus)=\"chipFocus($event)\" (destroyed)=\"chipDestroy($event)\"\n                 (selectionChange)=\"chipSelectionChange($event)\"\n                 (removed)=\"chipRemove($event)\">\n          {{name}}\n        </mat-chip>\n      </div>\n    </mat-chip-list>`\n})\nclass SingleChip {\n  disabled: boolean = false;\n  name: string = 'Test';\n  color: string = 'primary';\n  selected: boolean = false;\n  selectable: boolean = true;\n  removable: boolean = true;\n  shouldShow: boolean = true;\n\n  chipFocus: (event?: MatChipEvent) => void = () => {};\n  chipDestroy: (event?: MatChipEvent) => void = () => {};\n  chipSelectionChange: (event?: MatChipSelectionChange) => void = () => {};\n  chipRemove: (event?: MatChipEvent) => void = () => {};\n}\n\n@Component({\n  template: `<mat-basic-chip>{{name}}</mat-basic-chip>`\n})\nclass BasicChip {\n}\n"]}