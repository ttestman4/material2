{"version":3,"file":"chip-input.spec.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip-input.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\nimport {ENTER, COMMA} from '@angular/cdk/keycodes';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {createKeyboardEvent} from '@angular/cdk/testing';\nimport {Component, DebugElement, ViewChild} from '@angular/core';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {MatChipInput, MatChipInputEvent} from './chip-input';\nimport {MatChipsModule} from './index';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\n\n\ndescribe('MatChipInput', () => {\n  let fixture: ComponentFixture<any>;\n  let testChipInput: TestChipInput;\n  let inputDebugElement: DebugElement;\n  let inputNativeElement: HTMLElement;\n  let chipInputDirective: MatChipInput;\n  let dir = 'ltr';\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [PlatformModule, MatChipsModule, MatFormFieldModule, NoopAnimationsModule],\n      declarations: [TestChipInput],\n      providers: [{\n        provide: Directionality, useFactory: () => {\n          return {\n            value: dir.toLowerCase(),\n            change: new Subject()\n          };\n        }\n      }]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(async(() => {\n    fixture = TestBed.createComponent(TestChipInput);\n    testChipInput = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n\n    inputDebugElement = fixture.debugElement.query(By.directive(MatChipInput));\n    chipInputDirective = inputDebugElement.injector.get<MatChipInput>(MatChipInput);\n    inputNativeElement = inputDebugElement.nativeElement;\n  }));\n\n  describe('basic behavior', () => {\n    it('emits the (chipEnd) on enter keyup', () => {\n      let ENTER_EVENT = createKeyboardEvent('keydown', ENTER, inputNativeElement);\n\n      spyOn(testChipInput, 'add');\n\n      chipInputDirective._keydown(ENTER_EVENT);\n      expect(testChipInput.add).toHaveBeenCalled();\n    });\n\n    it('should have a default id', () => {\n      expect(inputNativeElement.getAttribute('id')).toBeTruthy();\n    });\n\n    it('should allow binding to the `placeholder` input', () => {\n      expect(inputNativeElement.hasAttribute('placeholder')).toBe(false);\n\n      testChipInput.placeholder = 'bound placeholder';\n      fixture.detectChanges();\n\n      expect(inputNativeElement.getAttribute('placeholder')).toBe('bound placeholder');\n    });\n\n    it('should propagate the dynamic `placeholder` value to the form field', () => {\n      fixture.componentInstance.placeholder = 'add a chip';\n      fixture.detectChanges();\n\n      const label: HTMLElement = fixture.nativeElement.querySelector('.mat-form-field-label');\n\n      expect(label).toBeTruthy();\n      expect(label.textContent).toContain('add a chip');\n\n      fixture.componentInstance.placeholder = 'or don\\'t';\n      fixture.detectChanges();\n\n      expect(label.textContent).toContain('or don\\'t');\n    });\n\n    it('should become disabled if the chip list is disabled', () => {\n      expect(inputNativeElement.hasAttribute('disabled')).toBe(false);\n      expect(chipInputDirective.disabled).toBe(false);\n\n      fixture.componentInstance.chipListInstance.disabled = true;\n      fixture.detectChanges();\n\n      expect(inputNativeElement.getAttribute('disabled')).toBe('true');\n      expect(chipInputDirective.disabled).toBe(true);\n    });\n\n  });\n\n  describe('[addOnBlur]', () => {\n    it('allows (chipEnd) when true', () => {\n      spyOn(testChipInput, 'add');\n\n      testChipInput.addOnBlur = true;\n      fixture.detectChanges();\n\n      chipInputDirective._blur();\n      expect(testChipInput.add).toHaveBeenCalled();\n    });\n\n    it('disallows (chipEnd) when false', () => {\n      spyOn(testChipInput, 'add');\n\n      testChipInput.addOnBlur = false;\n      fixture.detectChanges();\n\n      chipInputDirective._blur();\n      expect(testChipInput.add).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('[separatorKeyCodes]', () => {\n    it('does not emit (chipEnd) when a non-separator key is pressed', () => {\n      let ENTER_EVENT = createKeyboardEvent('keydown', ENTER, inputNativeElement);\n      spyOn(testChipInput, 'add');\n\n      chipInputDirective.separatorKeyCodes = [COMMA];\n      fixture.detectChanges();\n\n      chipInputDirective._keydown(ENTER_EVENT);\n      expect(testChipInput.add).not.toHaveBeenCalled();\n    });\n\n    it('emits (chipEnd) when a custom separator keys is pressed', () => {\n      let COMMA_EVENT = createKeyboardEvent('keydown', COMMA, inputNativeElement);\n      spyOn(testChipInput, 'add');\n\n      chipInputDirective.separatorKeyCodes = [COMMA];\n      fixture.detectChanges();\n\n      chipInputDirective._keydown(COMMA_EVENT);\n      expect(testChipInput.add).toHaveBeenCalled();\n    });\n\n    it('emits accepts the custom separator keys in a Set', () => {\n      let COMMA_EVENT = createKeyboardEvent('keydown', COMMA, inputNativeElement);\n      spyOn(testChipInput, 'add');\n\n      chipInputDirective.separatorKeyCodes = new Set([COMMA]);\n      fixture.detectChanges();\n\n      chipInputDirective._keydown(COMMA_EVENT);\n      expect(testChipInput.add).toHaveBeenCalled();\n    });\n\n    it('emits (chipEnd) when the separator keys are configured globally', () => {\n      fixture.destroy();\n\n      TestBed\n        .resetTestingModule()\n        .configureTestingModule({\n          imports: [MatChipsModule, MatFormFieldModule, PlatformModule, NoopAnimationsModule],\n          declarations: [TestChipInput],\n          providers: [{\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ({separatorKeyCodes: [COMMA]} as MatChipsDefaultOptions)\n          }]\n        })\n        .compileComponents();\n\n      fixture = TestBed.createComponent(TestChipInput);\n      testChipInput = fixture.debugElement.componentInstance;\n      fixture.detectChanges();\n\n      inputDebugElement = fixture.debugElement.query(By.directive(MatChipInput));\n      chipInputDirective = inputDebugElement.injector.get<MatChipInput>(MatChipInput);\n      inputNativeElement = inputDebugElement.nativeElement;\n\n      spyOn(testChipInput, 'add');\n      fixture.detectChanges();\n\n      chipInputDirective._keydown(createKeyboardEvent('keydown', COMMA, inputNativeElement));\n      expect(testChipInput.add).toHaveBeenCalled();\n    });\n\n    it('should not emit the chipEnd event if a separator is pressed with a modifier key', () => {\n      const ENTER_EVENT = createKeyboardEvent('keydown', ENTER, inputNativeElement);\n      Object.defineProperty(ENTER_EVENT, 'shiftKey', {get: () => true});\n      spyOn(testChipInput, 'add');\n\n      chipInputDirective.separatorKeyCodes = [ENTER];\n      fixture.detectChanges();\n\n      chipInputDirective._keydown(ENTER_EVENT);\n      expect(testChipInput.add).not.toHaveBeenCalled();\n    });\n\n  });\n});\n\n@Component({\n  template: `\n    <mat-form-field>\n      <mat-chip-list #chipList>\n      </mat-chip-list>\n      <input matInput [matChipInputFor]=\"chipList\"\n                [matChipInputAddOnBlur]=\"addOnBlur\"\n                (matChipInputTokenEnd)=\"add($event)\"\n                [placeholder]=\"placeholder\" />\n    </mat-form-field>\n  `\n})\nclass TestChipInput {\n  @ViewChild(MatChipList) chipListInstance: MatChipList;\n  addOnBlur: boolean = false;\n  placeholder = '';\n\n  add(_: MatChipInputEvent) {\n  }\n}\n"]}