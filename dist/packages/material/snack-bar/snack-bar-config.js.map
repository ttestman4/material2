{"version":3,"file":"snack-bar-config.js","sourceRoot":"","sources":["../../../../src/lib/snack-bar/snack-bar-config.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAmB,cAAc,EAAC,MAAM,eAAe,CAAC;;;;;AAK/D,MAAM,OAAO,kBAAkB,GAAG,IAAI,cAAc,CAAM,iBAAiB,CAAC;;;;;AAW5E,MAAM,OAAO,iBAAiB;IAA9B;;;;QAEE,eAAU,GAAwB,WAAW,CAAC;;;;;QAM9C,wBAAmB,GAAY,EAAE,CAAC;;;;QAMlC,aAAQ,GAAY,CAAC,CAAC;;;;QAStB,SAAI,GAAc,IAAI,CAAC;;;;QAGvB,uBAAkB,GAAmC,QAAQ,CAAC;;;;QAG9D,qBAAgB,GAAiC,QAAQ,CAAC;IAC5D,CAAC;CAAA;;;;;;IA5BC,uCAA8C;;;;;;IAM9C,gDAAkC;;;;;IAGlC,6CAAoC;;;;;IAGpC,qCAAsB;;;;;IAGtB,uCAA+B;;;;;IAG/B,sCAAsB;;;;;IAGtB,iCAAuB;;;;;IAGvB,+CAA8D;;;;;IAG9D,6CAA0D","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n"]}