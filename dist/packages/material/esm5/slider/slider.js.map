{"version":3,"file":"slider.js","sourceRoot":"","sources":["../../../../../src/lib/slider/slider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n"]}