{"version":3,"file":"dialog-config.js","sourceRoot":"","sources":["../../../../../src/lib/dialog/dialog-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,oCAYC;;;;;;IAVC,6BAAa;;;;;IAGb,gCAAgB;;;;;IAGhB,8BAAc;;;;;IAGd,+BAAe;;;;;;AAMjB;;;;;IAAA;;;;QAcE,SAAI,GAAgB,QAAQ,CAAC;;;;QAG7B,eAAU,GAAuB,EAAE,CAAC;;;;QAGpC,gBAAW,GAAa,IAAI,CAAC;;;;QAG7B,kBAAa,GAAY,EAAE,CAAC;;;;QAG5B,iBAAY,GAAa,KAAK,CAAC;;;;QAG/B,UAAK,GAAY,EAAE,CAAC;;;;QAGpB,WAAM,GAAY,EAAE,CAAC;;;;QASrB,aAAQ,GAAqB,MAAM,CAAC;;;;QASpC,SAAI,GAAc,IAAI,CAAC;;;;QAMvB,oBAAe,GAAmB,IAAI,CAAC;;;;QAGvC,cAAS,GAAmB,IAAI,CAAC;;;;QAGjC,cAAS,GAAa,IAAI,CAAC;;;;;QAM3B,iBAAY,GAAa,IAAI,CAAC;;;;;;QAU9B,sBAAiB,GAAa,IAAI,CAAC;QAEnC,yEAAyE;IAC3E,CAAC;IAAD,sBAAC;AAAD,CAAC,AAjFD,IAiFC;;;;;;;;;;;;;;IAzEC,2CAAoC;;;;;IAGpC,6BAAY;;;;;IAGZ,+BAA6B;;;;;IAG7B,qCAAoC;;;;;IAGpC,sCAA6B;;;;;IAG7B,wCAA4B;;;;;IAG5B,uCAA+B;;;;;IAG/B,gCAAoB;;;;;IAGpB,iCAAqB;;;;;IAGrB,mCAA2B;;;;;IAG3B,oCAA4B;;;;;IAG5B,mCAAoC;;;;;IAGpC,oCAA4B;;;;;IAG5B,mCAA0B;;;;;IAG1B,+BAAuB;;;;;IAGvB,oCAAsB;;;;;IAGtB,0CAAuC;;;;;IAGvC,oCAAiC;;;;;IAGjC,oCAA2B;;;;;;IAM3B,uCAA8B;;;;;IAG9B,yCAAgC;;;;;;;IAOhC,4CAAmC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n"]}