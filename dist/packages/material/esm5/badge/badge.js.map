{"version":3,"file":"badge.js","sourceRoot":"","sources":["../../../../../src/lib/badge/badge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n"]}