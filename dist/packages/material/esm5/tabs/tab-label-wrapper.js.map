{"version":3,"file":"tab-label-wrapper.js","sourceRoot":"","sources":["../../../../../src/lib/tabs/tab-label-wrapper.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AACpD,OAAO,EAA6B,aAAa,EAAC,MAAM,wBAAwB,CAAC;;;;;AAKjF;;;;;;IAAA;IAAqC,CAAC;IAAD,6BAAC;AAAD,CAAC,AAAtC,IAAsC;;;;;;;AACtC,MAAM,KAAO,4BAA4B,GACrC,aAAa,CAAC,sBAAsB,CAAC;;;;;AAMzC;IAQwC,8CAA4B;IAClE,4BAAmB,UAAsB;QAAzC,YACE,iBAAO,SACR;QAFkB,gBAAU,GAAV,UAAU,CAAY;;IAEzC,CAAC;IAED,wCAAwC;;;;;IACxC,kCAAK;;;;IAAL;QACE,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;;;;IAED,0CAAa;;;IAAb;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC;IAClD,CAAC;;;;IAED,2CAAc;;;IAAd;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC;IACnD,CAAC;;gBAxBF,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,MAAM,EAAE,CAAC,UAAU,CAAC;oBACpB,IAAI,EAAE;wBACJ,0BAA0B,EAAE,UAAU;wBACtC,sBAAsB,EAAE,YAAY;qBACrC;iBACF;;;;gBArBkB,UAAU;;IAuC7B,yBAAC;CAAA,AAzBD,CAQwC,4BAA4B,GAiBnE;SAjBY,kBAAkB;;;IACjB,wCAA6B","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n"]}