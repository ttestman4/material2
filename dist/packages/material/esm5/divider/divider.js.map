{"version":3,"file":"divider.js","sourceRoot":"","sources":["../../../../../src/lib/divider/divider.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAC,MAAM,eAAe,CAAC;AAC3F,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAE5D;IAAA;QAqBU,cAAS,GAAY,KAAK,CAAC;QAM3B,WAAM,GAAY,KAAK,CAAC;IAClC,CAAC;IAVC,sBACI,gCAAQ;QAFZ,iDAAiD;;;;;QACjD,cAC0B,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;;;;QAClD,UAAa,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAD7B;IAKlD,sBACI,6BAAK;QAFT,+CAA+C;;;;;QAC/C,cACuB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;QAC5C,UAAU,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAD7B;;gBAzB7C,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE;wBACJ,MAAM,EAAE,WAAW;wBACnB,yBAAyB,EAAE,sCAAsC;wBACjE,8BAA8B,EAAE,UAAU;wBAC1C,gCAAgC,EAAE,WAAW;wBAC7C,2BAA2B,EAAE,OAAO;wBACpC,OAAO,EAAE,aAAa;qBACvB;oBACD,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,CAAC,aAAa,CAAC;oBAC1B,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;2BAGE,KAAK;wBAML,KAAK;;IAIR,iBAAC;CAAA,AA5BD,IA4BC;SAZY,UAAU;;;;;;IAKrB,+BAAmC;;;;;IAMnC,4BAAgC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n"]}