{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n"]}