{"version":3,"file":"error-state.js","sourceRoot":"","sources":["../../../../../../src/lib/core/common-behaviors/error-state.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;;;;;AAM7B,yCAKC;;;IAHC,2CAAqC;;IACrC,yCAAoB;;IACpB,gDAAqC;;;;IAHrC,iEAAyB;;;;;;AAU3B,mCAKC;;;IAJC,yCAAqC;;IACrC,oCAAoB;;IACpB,kDAA6C;;IAC7C,kCAAqB;;;;;;;;;AAOvB,MAAM,UAAU,eAAe,CAAuC,IAAO;IAE3E;QAAqB,mCAAI;QAyBvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UACd;;;;YAzBD,gBAAU,GAAY,KAAK,CAAC;;;;;YAMnB,kBAAY,GAAG,IAAI,OAAO,EAAQ,CAAC;;QAmB5C,CAAC;;;;QAfD,kCAAgB;;;QAAhB;;gBACQ,QAAQ,GAAG,IAAI,CAAC,UAAU;;gBAC1B,MAAM,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,WAAW;;gBAClD,OAAO,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,yBAAyB;;gBAClE,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAA,IAAI,CAAC,SAAS,CAAC,OAAO,EAAe,CAAC,CAAC,CAAC,IAAI;;gBACvE,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;YAEtD,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACzB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;aAC1B;QACH,CAAC;QAKH,cAAC;IAAD,CAAC,AA5BM,CAAc,IAAI,GA4BvB;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n"]}