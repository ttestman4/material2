{"version":3,"file":"gesture-config.js","sourceRoot":"","sources":["../../../../../../src/lib/core/gestures/gesture-config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n"]}