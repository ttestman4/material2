{"version":3,"file":"badge.spec.js","sourceRoot":"","sources":["../../../../src/lib/badge/badge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentFixture, TestBed, fakeAsync} from '@angular/core/testing';\nimport {Component, DebugElement, ViewEncapsulation} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MatBadge, MatBadgeModule} from './index';\nimport {ThemePalette} from '@angular/material/core';\n\ndescribe('MatBadge', () => {\n  let fixture: ComponentFixture<any>;\n  let testComponent: BadgeTestApp;\n  let badgeNativeElement: HTMLElement;\n  let badgeDebugElement: DebugElement;\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [MatBadgeModule],\n      declarations: [BadgeTestApp],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(BadgeTestApp);\n    testComponent = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n\n    badgeDebugElement = fixture.debugElement.query(By.directive(MatBadge));\n    badgeNativeElement = badgeDebugElement.nativeElement;\n  }));\n\n  it('should update the badge based on attribute', () => {\n    let badgeContentDebugElement = badgeNativeElement.querySelector('.mat-badge-content')!;\n\n    expect(badgeContentDebugElement.textContent).toContain('1');\n\n    testComponent.badgeContent = '22';\n    fixture.detectChanges();\n\n    badgeContentDebugElement = badgeNativeElement.querySelector('.mat-badge-content')!;\n    expect(badgeContentDebugElement.textContent).toContain('22');\n  });\n\n  it('should apply class based on color attribute', () => {\n    testComponent.badgeColor = 'primary';\n    fixture.detectChanges();\n    expect(badgeNativeElement.classList.contains('mat-badge-primary')).toBe(true);\n\n    testComponent.badgeColor = 'accent';\n    fixture.detectChanges();\n    expect(badgeNativeElement.classList.contains('mat-badge-accent')).toBe(true);\n\n    testComponent.badgeColor = 'warn';\n    fixture.detectChanges();\n    expect(badgeNativeElement.classList.contains('mat-badge-warn')).toBe(true);\n\n    testComponent.badgeColor = undefined;\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList).not.toContain('mat-badge-accent');\n  });\n\n  it('should update the badge position on direction change', () => {\n    expect(badgeNativeElement.classList.contains('mat-badge-above')).toBe(true);\n    expect(badgeNativeElement.classList.contains('mat-badge-after')).toBe(true);\n\n    testComponent.badgeDirection = 'below before';\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList.contains('mat-badge-below')).toBe(true);\n    expect(badgeNativeElement.classList.contains('mat-badge-before')).toBe(true);\n  });\n\n  it('should change visibility to hidden', () => {\n    expect(badgeNativeElement.classList.contains('mat-badge-hidden')).toBe(false);\n\n    testComponent.badgeHidden = true;\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList.contains('mat-badge-hidden')).toBe(true);\n  });\n\n  it('should change badge sizes', () => {\n    expect(badgeNativeElement.classList.contains('mat-badge-medium')).toBe(true);\n\n    testComponent.badgeSize = 'small';\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList.contains('mat-badge-small')).toBe(true);\n\n    testComponent.badgeSize = 'large';\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList.contains('mat-badge-large')).toBe(true);\n  });\n\n  it('should change badge overlap', () => {\n    expect(badgeNativeElement.classList.contains('mat-badge-overlap')).toBe(false);\n\n    testComponent.badgeOverlap = true;\n    fixture.detectChanges();\n\n    expect(badgeNativeElement.classList.contains('mat-badge-overlap')).toBe(true);\n  });\n\n  it('should toggle `aria-describedby` depending on whether the badge has a description', () => {\n    const badgeContent = badgeNativeElement.querySelector('.mat-badge-content')!;\n\n    expect(badgeContent.getAttribute('aria-describedby')).toBeFalsy();\n\n    testComponent.badgeDescription = 'Describing a badge';\n    fixture.detectChanges();\n\n    expect(badgeContent.getAttribute('aria-describedby')).toBeTruthy();\n\n    testComponent.badgeDescription = '';\n    fixture.detectChanges();\n\n    expect(badgeContent.getAttribute('aria-describedby')).toBeFalsy();\n  });\n\n  it('should toggle visibility based on whether the badge has content', () => {\n    const classList = badgeNativeElement.classList;\n\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\n\n    testComponent.badgeContent = '';\n    fixture.detectChanges();\n\n    expect(classList.contains('mat-badge-hidden')).toBe(true);\n\n    testComponent.badgeContent = 'hello';\n    fixture.detectChanges();\n\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\n\n    testComponent.badgeContent = ' ';\n    fixture.detectChanges();\n\n    expect(classList.contains('mat-badge-hidden')).toBe(true);\n\n    testComponent.badgeContent = 0;\n    fixture.detectChanges();\n\n    expect(classList.contains('mat-badge-hidden')).toBe(false);\n  });\n\n  it('should apply view encapsulation on create badge content', () => {\n    const badge = badgeNativeElement.querySelector('.mat-badge-content')!;\n    let encapsulationAttr: Attr | undefined;\n\n    for (let i = 0; i < badge.attributes.length; i++) {\n      if (badge.attributes[i].name.startsWith('_ngcontent-')) {\n        encapsulationAttr = badge.attributes[i];\n        break;\n      }\n    }\n\n    expect(encapsulationAttr).toBeTruthy();\n  });\n\n  it('should toggle a class depending on the badge disabled state', () => {\n    const element: HTMLElement = badgeDebugElement.nativeElement;\n\n    expect(element.classList).not.toContain('mat-badge-disabled');\n\n    testComponent.badgeDisabled = true;\n    fixture.detectChanges();\n\n    expect(element.classList).toContain('mat-badge-disabled');\n  });\n\n  it('should update the aria-label if the description changes', () => {\n    const badgeContent = badgeNativeElement.querySelector('.mat-badge-content')!;\n\n    fixture.componentInstance.badgeDescription = 'initial content';\n    fixture.detectChanges();\n\n    expect(badgeContent.getAttribute('aria-label')).toBe('initial content');\n\n    fixture.componentInstance.badgeDescription = 'changed content';\n    fixture.detectChanges();\n\n    expect(badgeContent.getAttribute('aria-label')).toBe('changed content');\n\n    fixture.componentInstance.badgeDescription = '';\n    fixture.detectChanges();\n\n    expect(badgeContent.hasAttribute('aria-label')).toBe(false);\n  });\n\n});\n\n/** Test component that contains a MatBadge. */\n@Component({\n  // Explicitly set the view encapsulation since we have a test that checks for it.\n  encapsulation: ViewEncapsulation.Emulated,\n  styles: ['span { color: hotpink; }'],\n  template: `\n    <span [matBadge]=\"badgeContent\"\n          [matBadgeColor]=\"badgeColor\"\n          [matBadgePosition]=\"badgeDirection\"\n          [matBadgeHidden]=\"badgeHidden\"\n          [matBadgeSize]=\"badgeSize\"\n          [matBadgeOverlap]=\"badgeOverlap\"\n          [matBadgeDescription]=\"badgeDescription\"\n          [matBadgeDisabled]=\"badgeDisabled\">\n      home\n    </span>\n  `\n})\nclass BadgeTestApp {\n  badgeColor: ThemePalette;\n  badgeContent: string | number = '1';\n  badgeDirection = 'above after';\n  badgeHidden = false;\n  badgeSize = 'medium';\n  badgeOverlap = false;\n  badgeDescription: string;\n  badgeDisabled = false;\n}\n"]}