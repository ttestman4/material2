{"version":3,"file":"autocomplete.spec.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, SPACE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {Overlay, OverlayContainer} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  createKeyboardEvent,\n  dispatchFakeEvent,\n  dispatchKeyboardEvent,\n  MockNgZone,\n  typeInElement,\n  dispatchEvent,\n} from '@angular/cdk/testing';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Provider,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  Type,\n} from '@angular/core';\nimport {\n  async,\n  ComponentFixture,\n  fakeAsync,\n  flush,\n  inject,\n  TestBed,\n  tick,\n} from '@angular/core/testing';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField, MatFormFieldModule} from '@angular/material/form-field';\nimport {By} from '@angular/platform-browser';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {Observable, Subject, Subscription, EMPTY} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {MatInputModule} from '../input/index';\nimport {\n  getMatAutocompleteMissingPanelError,\n  MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  MatAutocomplete,\n  MatAutocompleteModule,\n  MatAutocompleteSelectedEvent,\n  MatAutocompleteTrigger,\n  MatAutocompleteOrigin,\n} from './index';\n\n\ndescribe('MatAutocomplete', () => {\n  let overlayContainer: OverlayContainer;\n  let overlayContainerElement: HTMLElement;\n  let zone: MockNgZone;\n\n  // Creates a test component fixture.\n  function createComponent<T>(component: Type<T>, providers: Provider[] = []) {\n    TestBed.configureTestingModule({\n      imports: [\n        MatAutocompleteModule,\n        MatFormFieldModule,\n        MatInputModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoopAnimationsModule\n      ],\n      declarations: [component],\n      providers: [\n        {provide: NgZone, useFactory: () => zone = new MockNgZone()},\n        ...providers\n      ]\n    });\n\n    TestBed.compileComponents();\n\n    inject([OverlayContainer], (oc: OverlayContainer) => {\n      overlayContainer = oc;\n      overlayContainerElement = oc.getContainerElement();\n    })();\n\n    return TestBed.createComponent<T>(component);\n  }\n\n  afterEach(inject([OverlayContainer], (currentOverlayContainer: OverlayContainer) => {\n    // Since we're resetting the testing module in some of the tests,\n    // we can potentially have multiple overlay containers.\n    currentOverlayContainer.ngOnDestroy();\n    overlayContainer.ngOnDestroy();\n  }));\n\n  describe('panel toggling', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n    let input: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\n    });\n\n    it('should open the panel when the input is focused', () => {\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to start out closed.`);\n\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(true, `Expected panel state to read open when input is focused.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('Alabama', `Expected panel to display when input is focused.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('California', `Expected panel to display when input is focused.`);\n    });\n\n    it('should not open the panel on focus if the input is readonly', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n      input.readOnly = true;\n      fixture.detectChanges();\n\n      expect(trigger.panelOpen).toBe(false, 'Expected panel state to start out closed.');\n      dispatchFakeEvent(input, 'focusin');\n      flush();\n\n      fixture.detectChanges();\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\n    }));\n\n    it('should not open using the arrow keys when the input is readonly', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n      input.readOnly = true;\n      fixture.detectChanges();\n\n      expect(trigger.panelOpen).toBe(false, 'Expected panel state to start out closed.');\n      dispatchKeyboardEvent(input, 'keydown', DOWN_ARROW);\n      flush();\n\n      fixture.detectChanges();\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\n    }));\n\n    it('should open the panel programmatically', () => {\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to start out closed.`);\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(true, `Expected panel state to read open when opened programmatically.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('Alabama', `Expected panel to display when opened programmatically.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('California', `Expected panel to display when opened programmatically.`);\n    });\n\n    it('should show the panel when the first open is after the initial zone stabilization',\n      async(() => {\n        // Note that we're running outside the Angular zone, in order to be able\n        // to test properly without the subscription from `_subscribeToClosingActions`\n        // giving us a false positive.\n        fixture.ngZone!.runOutsideAngular(() => {\n          fixture.componentInstance.trigger.openPanel();\n\n          Promise.resolve().then(() => {\n            expect(fixture.componentInstance.panel.showPanel)\n                .toBe(true, `Expected panel to be visible.`);\n          });\n        });\n      }));\n\n    it('should close the panel when the user clicks away', fakeAsync(() => {\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      dispatchFakeEvent(document, 'click');\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected clicking outside the panel to set its state to closed.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected clicking outside the panel to close the panel.`);\n    }));\n\n    it('should close the panel when the user taps away on a touch device', fakeAsync(() => {\n      dispatchFakeEvent(input, 'focus');\n      fixture.detectChanges();\n      flush();\n      dispatchFakeEvent(document, 'touchend');\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected tapping outside the panel to set its state to closed.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected tapping outside the panel to close the panel.`);\n    }));\n\n    it('should close the panel when an option is clicked', fakeAsync(() => {\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\n      option.click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected clicking an option to set the panel state to closed.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected clicking an option to close the panel.`);\n    }));\n\n    it('should close the panel when a newly created option is clicked', fakeAsync(() => {\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      // Filter down the option list to a subset of original options ('Alabama', 'California')\n      typeInElement('al', input);\n      fixture.detectChanges();\n      tick();\n\n      let options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[0].click();\n\n      // Changing value from 'Alabama' to 'al' to re-populate the option list,\n      // ensuring that 'California' is created new.\n      dispatchFakeEvent(input, 'focusin');\n      typeInElement('al', input);\n      fixture.detectChanges();\n      tick();\n\n      options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected clicking a new option to set the panel state to closed.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected clicking a new option to close the panel.`);\n    }));\n\n    it('should close the panel programmatically', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected closing programmatically to set the panel state to closed.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected closing programmatically to close the panel.`);\n    });\n\n    it('should not throw when attempting to close the panel of a destroyed autocomplete', () => {\n      const trigger = fixture.componentInstance.trigger;\n\n      trigger.openPanel();\n      fixture.detectChanges();\n      fixture.destroy();\n\n      expect(() => trigger.closePanel()).not.toThrow();\n    });\n\n    it('should hide the panel when the options list is empty', fakeAsync(() => {\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel') as HTMLElement;\n\n      expect(panel.classList)\n          .toContain('mat-autocomplete-visible', `Expected panel to start out visible.`);\n\n      // Filter down the option list such that no options match the value\n      typeInElement('af', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(panel.classList)\n          .toContain('mat-autocomplete-hidden', `Expected panel to hide itself when empty.`);\n    }));\n\n    it('should keep the label floating until the panel closes', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('always', 'Expected label to float as soon as panel opens.');\n\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('auto', 'Expected label to return to auto state after panel closes.');\n    }));\n\n    it('should not open the panel when the `input` event is invoked on a non-focused input', () => {\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to start out closed.`);\n\n      input.value = 'Alabama';\n      dispatchFakeEvent(input, 'input');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to stay closed.`);\n    });\n\n   it('should not mess with label placement if set to never', fakeAsync(() => {\n      fixture.componentInstance.floatLabel = 'never';\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('never', 'Expected label to stay static.');\n      flush();\n      fixture.detectChanges();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('never', 'Expected label to stay in static state after close.');\n    }));\n\n    it('should not mess with label placement if set to always', fakeAsync(() => {\n      fixture.componentInstance.floatLabel = 'always';\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('always', 'Expected label to stay elevated on open.');\n      flush();\n      fixture.detectChanges();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.formField.floatLabel)\n          .toEqual('always', 'Expected label to stay elevated after close.');\n    }));\n\n    it('should toggle the visibility when typing and closing the panel', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      tick();\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\n          .toContain('mat-autocomplete-visible', 'Expected panel to be visible.');\n\n      typeInElement('x', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\n          .toContain('mat-autocomplete-hidden', 'Expected panel to be hidden.');\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      typeInElement('al', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel')!.classList)\n          .toContain('mat-autocomplete-visible', 'Expected panel to be visible.');\n    }));\n\n    it('should animate the label when the input is focused', () => {\n      const inputContainer = fixture.componentInstance.formField;\n\n      spyOn(inputContainer, '_animateAndLockLabel');\n      expect(inputContainer._animateAndLockLabel).not.toHaveBeenCalled();\n\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\n      expect(inputContainer._animateAndLockLabel).toHaveBeenCalled();\n    });\n\n    it('should provide the open state of the panel', fakeAsync(() => {\n      expect(fixture.componentInstance.panel.isOpen).toBeFalsy(\n        `Expected the panel to be unopened initially.`);\n\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n      flush();\n\n      expect(fixture.componentInstance.panel.isOpen).toBeTruthy(\n        `Expected the panel to be opened on focus.`);\n    }));\n\n    it('should emit an event when the panel is opened', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalled();\n    });\n\n    it('should not emit the `opened` event when no options are being shown', () => {\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states = [];\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.openedSpy).not.toHaveBeenCalled();\n    });\n\n    it('should not emit the opened event multiple times while typing', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalledTimes(1);\n\n      typeInElement('Alabam', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.openedSpy).toHaveBeenCalledTimes(1);\n    }));\n\n    it('should emit an event when the panel is closed', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.closedSpy).toHaveBeenCalled();\n    });\n\n    it('should not emit the `closed` event when no options were shown', () => {\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states = [];\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.closedSpy).not.toHaveBeenCalled();\n    });\n\n    it('should not be able to open the panel if the autocomplete is disabled', () => {\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to start out closed.`);\n\n      fixture.componentInstance.autocompleteDisabled = true;\n      fixture.detectChanges();\n\n      dispatchFakeEvent(input, 'focusin');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel to remain closed.`);\n    });\n\n    it('should continue to update the model if the autocomplete is disabled', () => {\n      fixture.componentInstance.autocompleteDisabled = true;\n      fixture.detectChanges();\n\n      typeInElement('hello', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.value).toBe('hello');\n    });\n\n  });\n\n  it('should have the correct text direction in RTL', () => {\n    const rtlFixture = createComponent(SimpleAutocomplete, [\n      {provide: Directionality, useFactory: () => ({value: 'rtl', change: EMPTY})},\n    ]);\n\n    rtlFixture.detectChanges();\n    rtlFixture.componentInstance.trigger.openPanel();\n    rtlFixture.detectChanges();\n\n    const boundingBox =\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\n    expect(boundingBox.getAttribute('dir')).toEqual('rtl');\n  });\n\n  it('should update the panel direction if it changes for the trigger', () => {\n    const dirProvider = {value: 'rtl', change: EMPTY};\n    const rtlFixture = createComponent(SimpleAutocomplete, [\n      {provide: Directionality, useFactory: () => dirProvider},\n    ]);\n\n    rtlFixture.detectChanges();\n    rtlFixture.componentInstance.trigger.openPanel();\n    rtlFixture.detectChanges();\n\n    let boundingBox =\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\n    expect(boundingBox.getAttribute('dir')).toEqual('rtl');\n\n    rtlFixture.componentInstance.trigger.closePanel();\n    rtlFixture.detectChanges();\n\n    dirProvider.value = 'ltr';\n    rtlFixture.componentInstance.trigger.openPanel();\n    rtlFixture.detectChanges();\n\n    boundingBox =\n        overlayContainerElement.querySelector('.cdk-overlay-connected-position-bounding-box')!;\n    expect(boundingBox.getAttribute('dir')).toEqual('ltr');\n  });\n\n  it('should be able to set a custom value for the `autocomplete` attribute', () => {\n    const fixture = createComponent(AutocompleteWithNativeAutocompleteAttribute);\n    const input = fixture.nativeElement.querySelector('input');\n\n    fixture.detectChanges();\n\n    expect(input.getAttribute('autocomplete')).toBe('changed');\n  });\n\n  it('should not throw when typing in an element with a null and disabled autocomplete', () => {\n    const fixture = createComponent(InputWithoutAutocompleteAndDisabled);\n    fixture.detectChanges();\n\n    expect(() => {\n      dispatchKeyboardEvent(fixture.nativeElement.querySelector('input'), 'keydown', SPACE);\n      fixture.detectChanges();\n    }).not.toThrow();\n  });\n\n  describe('forms integration', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n    let input: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\n    });\n\n    it('should update control value as user types with input value', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      typeInElement('a', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.value)\n          .toEqual('a', 'Expected control value to be updated as user types.');\n\n      typeInElement('al', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.value)\n          .toEqual('al', 'Expected control value to be updated as user types.');\n    });\n\n    it('should update control value when autofilling', () => {\n      // Simulate the browser autofilling the input by setting a value and\n      // dispatching an `input` event while the input is out of focus.\n      expect(document.activeElement).not.toBe(input, 'Expected input not to have focus.');\n      input.value = 'Alabama';\n      dispatchFakeEvent(input, 'input');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.value)\n          .toBe('Alabama', 'Expected value to be propagated to the form control.');\n    });\n\n    it('should update control value when option is selected with option value', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.value)\n          .toEqual({code: 'CA', name: 'California'},\n              'Expected control value to equal the selected option value.');\n    }));\n\n    it('should update the control back to a string if user types after an option is selected',\n      fakeAsync(() => {\n        fixture.componentInstance.trigger.openPanel();\n        fixture.detectChanges();\n        zone.simulateZoneExit();\n\n        const options =\n            overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n        options[1].click();\n        fixture.detectChanges();\n\n        typeInElement('Californi', input);\n        fixture.detectChanges();\n        tick();\n\n        expect(fixture.componentInstance.stateCtrl.value)\n            .toEqual('Californi', 'Expected control value to revert back to string.');\n      }));\n\n    it('should fill the text field with display value when an option is selected', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(input.value)\n          .toContain('California', `Expected text field to fill with selected value.`);\n    }));\n\n    it('should fill the text field with value if displayWith is not set', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      fixture.componentInstance.panel.displayWith = null;\n      fixture.componentInstance.options.toArray()[1].value = 'test value';\n      fixture.detectChanges();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n\n      fixture.detectChanges();\n      expect(input.value)\n          .toContain('test value', `Expected input to fall back to selected option's value.`);\n    }));\n\n    it('should fill the text field correctly if value is set to obj programmatically',\n      fakeAsync(() => {\n        fixture.componentInstance.stateCtrl.setValue({code: 'AL', name: 'Alabama'});\n        fixture.detectChanges();\n        tick();\n        fixture.detectChanges();\n\n        expect(input.value)\n            .toContain('Alabama', `Expected input to fill with matching option's viewValue.`);\n      }));\n\n    it('should clear the text field if value is reset programmatically', fakeAsync(() => {\n      typeInElement('Alabama', input);\n      fixture.detectChanges();\n      tick();\n\n      fixture.componentInstance.stateCtrl.reset();\n      tick();\n\n      fixture.detectChanges();\n      tick();\n\n      expect(input.value).toEqual('', `Expected input value to be empty after reset.`);\n    }));\n\n    it('should disable input in view when disabled programmatically', () => {\n      const formFieldElement =\n          fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\n\n      expect(input.disabled)\n          .toBe(false, `Expected input to start out enabled in view.`);\n      expect(formFieldElement.classList.contains('mat-form-field-disabled'))\n          .toBe(false, `Expected input underline to start out with normal styles.`);\n\n      fixture.componentInstance.stateCtrl.disable();\n      fixture.detectChanges();\n\n      expect(input.disabled)\n          .toBe(true, `Expected input to be disabled in view when disabled programmatically.`);\n      expect(formFieldElement.classList.contains('mat-form-field-disabled'))\n          .toBe(true, `Expected input underline to display disabled styles.`);\n    });\n\n    it('should mark the autocomplete control as dirty as user types', () => {\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(false, `Expected control to start out pristine.`);\n\n      typeInElement('a', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(true, `Expected control to become dirty when the user types into the input.`);\n    });\n\n    it('should mark the autocomplete control as dirty when an option is selected', fakeAsync(() => {\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(false, `Expected control to start out pristine.`);\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(true, `Expected control to become dirty when an option was selected.`);\n    }));\n\n    it('should not mark the control dirty when the value is set programmatically', () => {\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(false, `Expected control to start out pristine.`);\n\n      fixture.componentInstance.stateCtrl.setValue('AL');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(false, `Expected control to stay pristine if value is set programmatically.`);\n    });\n\n    it('should mark the autocomplete control as touched on blur', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      expect(fixture.componentInstance.stateCtrl.touched)\n          .toBe(false, `Expected control to start out untouched.`);\n\n      dispatchFakeEvent(input, 'blur');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.touched)\n          .toBe(true, `Expected control to become touched on blur.`);\n    });\n\n    it('should disable the input when used with a value accessor and without `matInput`', () => {\n      overlayContainer.ngOnDestroy();\n      fixture.destroy();\n      TestBed.resetTestingModule();\n\n      const plainFixture = createComponent(PlainAutocompleteInputWithFormControl);\n      plainFixture.detectChanges();\n      input = plainFixture.nativeElement.querySelector('input');\n\n      expect(input.disabled).toBe(false);\n\n      plainFixture.componentInstance.formControl.disable();\n      plainFixture.detectChanges();\n\n      expect(input.disabled).toBe(true);\n    });\n\n  });\n\n  describe('keyboard events', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n    let input: HTMLInputElement;\n    let DOWN_ARROW_EVENT: KeyboardEvent;\n    let UP_ARROW_EVENT: KeyboardEvent;\n    let ENTER_EVENT: KeyboardEvent;\n\n    beforeEach(fakeAsync(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\n      DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\n      UP_ARROW_EVENT = createKeyboardEvent('keydown', UP_ARROW);\n      ENTER_EVENT = createKeyboardEvent('keydown', ENTER);\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n    }));\n\n    it('should not focus the option when DOWN key is pressed', () => {\n      spyOn(fixture.componentInstance.options.first, 'focus');\n\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      expect(fixture.componentInstance.options.first.focus).not.toHaveBeenCalled();\n    });\n\n    it('should not close the panel when DOWN key is pressed', () => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(true, `Expected panel state to stay open when DOWN key is pressed.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('Alabama', `Expected panel to keep displaying when DOWN key is pressed.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('California', `Expected panel to keep displaying when DOWN key is pressed.`);\n    });\n\n    it('should set the active item to the first option when DOWN key is pressed', () => {\n      const componentInstance = fixture.componentInstance;\n      const optionEls =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n\n      expect(componentInstance.trigger.panelOpen)\n          .toBe(true, 'Expected first down press to open the pane.');\n\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\n          .toBe(true, 'Expected first option to be active.');\n      expect(optionEls[0].classList).toContain('mat-active');\n      expect(optionEls[1].classList).not.toContain('mat-active');\n\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(componentInstance.trigger.activeOption === componentInstance.options.toArray()[1])\n          .toBe(true, 'Expected second option to be active.');\n      expect(optionEls[0].classList).not.toContain('mat-active');\n      expect(optionEls[1].classList).toContain('mat-active');\n    });\n\n    it('should set the active item to the last option when UP key is pressed', () => {\n      const componentInstance = fixture.componentInstance;\n      const optionEls =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n\n      expect(componentInstance.trigger.panelOpen)\n          .toBe(true, 'Expected first up press to open the pane.');\n\n      componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(componentInstance.trigger.activeOption === componentInstance.options.last)\n          .toBe(true, 'Expected last option to be active.');\n      expect(optionEls[10].classList).toContain('mat-active');\n      expect(optionEls[0].classList).not.toContain('mat-active');\n\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\n          .toBe(true, 'Expected first option to be active.');\n      expect(optionEls[0].classList).toContain('mat-active');\n    });\n\n    it('should set the active item properly after filtering', fakeAsync(() => {\n      const componentInstance = fixture.componentInstance;\n\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n    }));\n\n    it('should set the active item properly after filtering', () => {\n      const componentInstance = fixture.componentInstance;\n\n      typeInElement('o', input);\n      fixture.detectChanges();\n\n      componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      const optionEls =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n\n      expect(componentInstance.trigger.activeOption === componentInstance.options.first)\n          .toBe(true, 'Expected first option to be active.');\n      expect(optionEls[0].classList).toContain('mat-active');\n      expect(optionEls[1].classList).not.toContain('mat-active');\n    });\n\n    it('should fill the text field when an option is selected with ENTER', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      flush();\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\n      fixture.detectChanges();\n      expect(input.value)\n          .toContain('Alabama', `Expected text field to fill with selected value on ENTER.`);\n    }));\n\n    it('should prevent the default enter key action', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      flush();\n\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\n\n      expect(ENTER_EVENT.defaultPrevented)\n          .toBe(true, 'Expected the default action to have been prevented.');\n    }));\n\n    it('should not prevent the default enter action for a closed panel after a user action', () => {\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\n\n      expect(ENTER_EVENT.defaultPrevented).toBe(false, 'Default action should not be prevented.');\n    });\n\n    it('should fill the text field, not select an option, when SPACE is entered', () => {\n      typeInElement('New', input);\n      fixture.detectChanges();\n\n      const SPACE_EVENT = createKeyboardEvent('keydown', SPACE);\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger._handleKeydown(SPACE_EVENT);\n      fixture.detectChanges();\n\n      expect(input.value).not.toContain('New York', `Expected option not to be selected on SPACE.`);\n    });\n\n    it('should mark the control dirty when selecting an option from the keyboard', fakeAsync(() => {\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(false, `Expected control to start out pristine.`);\n\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      flush();\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.stateCtrl.dirty)\n          .toBe(true, `Expected control to become dirty when option was selected by ENTER.`);\n    }));\n\n    it('should open the panel again when typing after making a selection', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      flush();\n      fixture.componentInstance.trigger._handleKeydown(ENTER_EVENT);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(false, `Expected panel state to read closed after ENTER key.`);\n      expect(overlayContainerElement.textContent)\n          .toEqual('', `Expected panel to close after ENTER key.`);\n\n      dispatchFakeEvent(input, 'focusin');\n      typeInElement('Alabama', input);\n      fixture.detectChanges();\n      tick();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(true, `Expected panel state to read open when typing in input.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('Alabama', `Expected panel to display when typing in input.`);\n    }));\n\n    it('should not open the panel if the `input` event was dispatched with changing the value',\n      fakeAsync(() => {\n        const trigger = fixture.componentInstance.trigger;\n\n        dispatchFakeEvent(input, 'focusin');\n        typeInElement('A', input);\n        fixture.detectChanges();\n        tick();\n\n        expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n\n        trigger.closePanel();\n        fixture.detectChanges();\n\n        expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\n\n        // Dispatch the event without actually changing the value\n        // to simulate what happen in some cases on IE.\n        dispatchFakeEvent(input, 'input');\n        fixture.detectChanges();\n        tick();\n\n        expect(trigger.panelOpen).toBe(false, 'Expected panel to stay closed.');\n      }));\n\n    it('should scroll to active options below the fold', () => {\n      const trigger = fixture.componentInstance.trigger;\n      const scrollContainer =\n          document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\n\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\n\n      // These down arrows will set the 6th option active, below the fold.\n      [1, 2, 3, 4, 5].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\n\n      // Expect option bottom minus the panel height (288 - 256 = 32)\n      expect(scrollContainer.scrollTop)\n          .toEqual(32, `Expected panel to reveal the sixth option.`);\n    });\n\n    it('should scroll to active options on UP arrow', () => {\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\n\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\n      fixture.detectChanges();\n\n      // Expect option bottom minus the panel height (528 - 256 = 272)\n      expect(scrollContainer.scrollTop).toEqual(272, `Expected panel to reveal last option.`);\n    });\n\n    it('should not scroll to active options that are fully in the panel', () => {\n      const trigger = fixture.componentInstance.trigger;\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\n\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\n\n      // These down arrows will set the 6th option active, below the fold.\n      [1, 2, 3, 4, 5].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\n\n      // Expect option bottom minus the panel height (288 - 256 = 32)\n      expect(scrollContainer.scrollTop)\n          .toEqual(32, `Expected panel to reveal the sixth option.`);\n\n      // These up arrows will set the 2nd option active\n      [4, 3, 2, 1].forEach(() => trigger._handleKeydown(UP_ARROW_EVENT));\n\n      // Expect no scrolling to have occurred. Still showing bottom of 6th option.\n      expect(scrollContainer.scrollTop)\n          .toEqual(32, `Expected panel not to scroll up since sixth option still fully visible.`);\n    });\n\n    it('should scroll to active options that are above the panel', () => {\n      const trigger = fixture.componentInstance.trigger;\n      const scrollContainer = document.querySelector('.cdk-overlay-pane .mat-autocomplete-panel')!;\n\n      trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      expect(scrollContainer.scrollTop).toEqual(0, `Expected panel not to scroll.`);\n\n      // These down arrows will set the 7th option active, below the fold.\n      [1, 2, 3, 4, 5, 6].forEach(() => trigger._handleKeydown(DOWN_ARROW_EVENT));\n\n      // These up arrows will set the 2nd option active\n      [5, 4, 3, 2, 1].forEach(() => trigger._handleKeydown(UP_ARROW_EVENT));\n\n      // Expect to show the top of the 2nd option at the top of the panel\n      expect(scrollContainer.scrollTop)\n          .toEqual(48, `Expected panel to scroll up when option is above panel.`);\n    });\n\n    it('should close the panel when pressing escape', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n\n      input.focus();\n      flush();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(input, 'Expected input to be focused.');\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n\n      dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(input, 'Expected input to continue to be focused.');\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\n    }));\n\n    it('should prevent the default action when pressing escape', fakeAsync(() => {\n      const escapeEvent = dispatchKeyboardEvent(input, 'keydown', ESCAPE);\n      fixture.detectChanges();\n\n      expect(escapeEvent.defaultPrevented).toBe(true);\n    }));\n\n    it('should close the panel when pressing ALT + UP_ARROW', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n      const upArrowEvent = createKeyboardEvent('keydown', UP_ARROW);\n      Object.defineProperty(upArrowEvent, 'altKey', {get: () => true});\n\n      input.focus();\n      flush();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(input, 'Expected input to be focused.');\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n\n      dispatchEvent(document.body, upArrowEvent);\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(input, 'Expected input to continue to be focused.');\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\n    }));\n\n    it('should close the panel when tabbing away from a trigger without results', fakeAsync(() => {\n      fixture.componentInstance.states = [];\n      fixture.componentInstance.filteredStates = [];\n      fixture.detectChanges();\n      input.focus();\n      flush();\n\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel'))\n          .toBeTruthy('Expected panel to be rendered.');\n\n      dispatchKeyboardEvent(input, 'keydown', TAB);\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelector('.mat-autocomplete-panel'))\n          .toBeFalsy('Expected panel to be removed.');\n    }));\n\n    it('should reset the active option when closing with the escape key', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n\n      trigger.openPanel();\n      fixture.detectChanges();\n      tick();\n\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active option.');\n\n      // Press the down arrow a few times.\n      [1, 2, 3].forEach(() => {\n        trigger._handleKeydown(DOWN_ARROW_EVENT);\n        tick();\n        fixture.detectChanges();\n      });\n\n      // Note that this casts to a boolean, in order to prevent Jasmine\n      // from crashing when trying to stringify the option if the test fails.\n      expect(!!trigger.activeOption).toBe(true, 'Expected to find an active option.');\n\n      dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\n      tick();\n\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active options.');\n    }));\n\n    it('should reset the active option when closing by selecting with enter', fakeAsync(() => {\n      const trigger = fixture.componentInstance.trigger;\n\n      trigger.openPanel();\n      fixture.detectChanges();\n      tick();\n\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active option.');\n\n      // Press the down arrow a few times.\n      [1, 2, 3].forEach(() => {\n        trigger._handleKeydown(DOWN_ARROW_EVENT);\n        tick();\n        fixture.detectChanges();\n      });\n\n      // Note that this casts to a boolean, in order to prevent Jasmine\n      // from crashing when trying to stringify the option if the test fails.\n      expect(!!trigger.activeOption).toBe(true, 'Expected to find an active option.');\n\n      trigger._handleKeydown(ENTER_EVENT);\n      tick();\n\n      expect(!!trigger.activeOption).toBe(false, 'Expected no active options.');\n    }));\n\n  });\n\n  describe('option groups', () => {\n    let fixture: ComponentFixture<AutocompleteWithGroups>;\n    let DOWN_ARROW_EVENT: KeyboardEvent;\n    let UP_ARROW_EVENT: KeyboardEvent;\n    let container: HTMLElement;\n\n    beforeEach(fakeAsync(() => {\n      fixture = createComponent(AutocompleteWithGroups);\n      fixture.detectChanges();\n\n      DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\n      UP_ARROW_EVENT = createKeyboardEvent('keydown', UP_ARROW);\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n      container = document.querySelector('.mat-autocomplete-panel') as HTMLElement;\n    }));\n\n    it('should scroll to active options below the fold', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n      expect(container.scrollTop).toBe(0, 'Expected the panel not to scroll.');\n\n      // Press the down arrow five times.\n      [1, 2, 3, 4, 5].forEach(() => {\n        fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n        tick();\n      });\n\n      // <option bottom> - <panel height> + <2x group labels> = 128\n      // 288 - 256 + 96 = 128\n      expect(container.scrollTop)\n          .toBe(128, 'Expected panel to reveal the sixth option.');\n    }));\n\n    it('should scroll to active options on UP arrow', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n\n      // <option bottom> - <panel height> + <3x group label> = 464\n      // 576 - 256 + 144 = 464\n      expect(container.scrollTop).toBe(464, 'Expected panel to reveal last option.');\n    }));\n\n    it('should scroll to active options that are above the panel', fakeAsync(() => {\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n      expect(container.scrollTop).toBe(0, 'Expected panel not to scroll.');\n\n      // These down arrows will set the 7th option active, below the fold.\n      [1, 2, 3, 4, 5, 6].forEach(() => {\n        fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n        tick();\n      });\n\n      // These up arrows will set the 2nd option active\n      [5, 4, 3, 2, 1].forEach(() => {\n        fixture.componentInstance.trigger._handleKeydown(UP_ARROW_EVENT);\n        tick();\n      });\n\n      // Expect to show the top of the 2nd option at the top of the panel.\n      // It is offset by 48, because there's a group label above it.\n      expect(container.scrollTop)\n          .toBe(96, 'Expected panel to scroll up when option is above panel.');\n    }));\n  });\n\n  describe('aria', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n    let input: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\n    });\n\n    it('should set role of input to combobox', () => {\n      expect(input.getAttribute('role'))\n          .toEqual('combobox', 'Expected role of input to be combobox.');\n    });\n\n    it('should set role of autocomplete panel to listbox', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      const panel = fixture.debugElement.query(By.css('.mat-autocomplete-panel')).nativeElement;\n\n      expect(panel.getAttribute('role'))\n          .toEqual('listbox', 'Expected role of the panel to be listbox.');\n    });\n\n    it('should set aria-autocomplete to list', () => {\n      expect(input.getAttribute('aria-autocomplete'))\n          .toEqual('list', 'Expected aria-autocomplete attribute to equal list.');\n    });\n\n    it('should set aria-activedescendant based on the active option', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(input.hasAttribute('aria-activedescendant'))\n          .toBe(false, 'Expected aria-activedescendant to be absent if no active item.');\n\n      const DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\n\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-activedescendant'))\n          .toEqual(fixture.componentInstance.options.first.id,\n              'Expected aria-activedescendant to match the active item after 1 down arrow.');\n\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      tick();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-activedescendant'))\n          .toEqual(fixture.componentInstance.options.toArray()[1].id,\n              'Expected aria-activedescendant to match the active item after 2 down arrows.');\n    }));\n\n    it('should set aria-expanded based on whether the panel is open', () => {\n      expect(input.getAttribute('aria-expanded'))\n          .toBe('false', 'Expected aria-expanded to be false while panel is closed.');\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-expanded'))\n          .toBe('true', 'Expected aria-expanded to be true while panel is open.');\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-expanded'))\n          .toBe('false', 'Expected aria-expanded to be false when panel closes again.');\n    });\n\n    it('should set aria-expanded properly when the panel is hidden', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      expect(input.getAttribute('aria-expanded'))\n          .toBe('true', 'Expected aria-expanded to be true while panel is open.');\n\n      typeInElement('zz', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-expanded'))\n          .toBe('false', 'Expected aria-expanded to be false when panel hides itself.');\n    }));\n\n    it('should set aria-owns based on the attached autocomplete', () => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      const panel = fixture.debugElement.query(By.css('.mat-autocomplete-panel')).nativeElement;\n\n      expect(input.getAttribute('aria-owns'))\n          .toBe(panel.getAttribute('id'), 'Expected aria-owns to match attached autocomplete.');\n    });\n\n    it('should not set aria-owns while the autocomplete is closed', () => {\n      expect(input.getAttribute('aria-owns')).toBeFalsy();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      expect(input.getAttribute('aria-owns')).toBeTruthy();\n    });\n\n    it('should restore focus to the input when clicking to select a value', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\n\n      // Focus the option manually since the synthetic click may not do it.\n      option.focus();\n      option.click();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(input, 'Expected focus to be restored to the input.');\n    }));\n\n    it('should remove autocomplete-specific aria attributes when autocomplete is disabled', () => {\n      fixture.componentInstance.autocompleteDisabled = true;\n      fixture.detectChanges();\n\n      expect(input.getAttribute('role')).toBeFalsy();\n      expect(input.getAttribute('aria-autocomplete')).toBeFalsy();\n      expect(input.getAttribute('aria-expanded')).toBeFalsy();\n      expect(input.getAttribute('aria-owns')).toBeFalsy();\n    });\n\n  });\n\n  describe('Fallback positions', () => {\n    it('should use below positioning by default', fakeAsync(() => {\n      let fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\n      const panelTop = panel.getBoundingClientRect().top;\n\n      expect(Math.floor(inputBottom))\n          .toEqual(Math.floor(panelTop), `Expected panel top to match input bottom by default.`);\n      expect(panel.classList).not.toContain('mat-autocomplete-panel-above');\n    }));\n\n    it('should reposition the panel on scroll', () => {\n      let scrolledSubject = new Subject();\n      let spacer = document.createElement('div');\n      let fixture = createComponent(SimpleAutocomplete, [{\n        provide: ScrollDispatcher,\n        useValue: {scrolled: () => scrolledSubject.asObservable()}\n      }]);\n\n      fixture.detectChanges();\n\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n      spacer.style.height = '1000px';\n      document.body.appendChild(spacer);\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      window.scroll(0, 100);\n      scrolledSubject.next();\n      fixture.detectChanges();\n\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\n      const panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\n      const panelTop = panel.getBoundingClientRect().top;\n\n      expect(Math.floor(inputBottom)).toEqual(Math.floor(panelTop),\n          'Expected panel top to match input bottom after scrolling.');\n\n      document.body.removeChild(spacer);\n      window.scroll(0, 0);\n    });\n\n    it('should fall back to above position if panel cannot fit below', fakeAsync(() => {\n      let fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n\n      // Push the autocomplete trigger down so it won't have room to open \"below\"\n      inputReference.style.bottom = '0';\n      inputReference.style.position = 'fixed';\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      const inputTop = inputReference.getBoundingClientRect().top;\n      const panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\n      const panelBottom = panel.getBoundingClientRect().bottom;\n\n      expect(Math.floor(inputTop))\n          .toEqual(Math.floor(panelBottom), `Expected panel to fall back to above position.`);\n\n      expect(panel.classList).toContain('mat-autocomplete-panel-above');\n    }));\n\n    it('should allow the panel to expand when the number of results increases', fakeAsync(() => {\n      let fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      let inputEl = fixture.debugElement.query(By.css('input')).nativeElement;\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n\n      // Push the element down so it has a little bit of space, but not enough to render.\n      inputReference.style.bottom = '10px';\n      inputReference.style.position = 'fixed';\n\n      // Type enough to only show one option.\n      typeInElement('California', inputEl);\n      fixture.detectChanges();\n      tick();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      let panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\n      let initialPanelHeight = panel.getBoundingClientRect().height;\n\n      fixture.componentInstance.trigger.closePanel();\n      fixture.detectChanges();\n\n      // Change the text so we get more than one result.\n      typeInElement('C', inputEl);\n      fixture.detectChanges();\n      tick();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      panel = overlayContainerElement.querySelector('.cdk-overlay-pane')!;\n\n      expect(panel.getBoundingClientRect().height).toBeGreaterThan(initialPanelHeight);\n    }));\n\n    it('should align panel properly when filtering in \"above\" position', fakeAsync(() => {\n      let fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      let input = fixture.debugElement.query(By.css('input')).nativeElement;\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n\n      // Push the autocomplete trigger down so it won't have room to open \"below\"\n      inputReference.style.bottom = '0';\n      inputReference.style.position = 'fixed';\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      typeInElement('f', input);\n      fixture.detectChanges();\n      tick();\n\n      const inputTop = inputReference.getBoundingClientRect().top;\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\n      const panelBottom = panel.getBoundingClientRect().bottom;\n\n      expect(Math.floor(inputTop))\n          .toEqual(Math.floor(panelBottom), `Expected panel to stay aligned after filtering.`);\n    }));\n\n    it('should fall back to above position when requested if options are added while ' +\n        'the panel is open', fakeAsync(() => {\n      let fixture = createComponent(SimpleAutocomplete);\n      fixture.componentInstance.states = fixture.componentInstance.states.slice(0, 1);\n      fixture.componentInstance.filteredStates = fixture.componentInstance.states.slice();\n      fixture.detectChanges();\n\n      let inputEl = fixture.debugElement.query(By.css('input')).nativeElement;\n      let inputReference = fixture.debugElement.query(By.css('.mat-form-field-flex')).nativeElement;\n\n      // Push the element down so it has a little bit of space, but not enough to render.\n      inputReference.style.bottom = '75px';\n      inputReference.style.position = 'fixed';\n\n      dispatchFakeEvent(inputEl, 'focusin');\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      let panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\n      let inputRect = inputReference.getBoundingClientRect();\n      let panelRect = panel.getBoundingClientRect();\n\n      expect(Math.floor(panelRect.top))\n        .toBe(Math.floor(inputRect.bottom),\n          `Expected panel top to be below input before repositioning.`);\n\n      for (let i = 0; i < 20; i++) {\n        fixture.componentInstance.filteredStates.push({code: 'FK', name: 'Fake State'});\n        fixture.detectChanges();\n      }\n\n      // Request a position update now that there are too many suggestions to fit in the viewport.\n      fixture.componentInstance.trigger.updatePosition();\n\n      inputRect = inputReference.getBoundingClientRect();\n      panelRect = panel.getBoundingClientRect();\n\n      expect(Math.floor(panelRect.bottom))\n        .toBe(Math.floor(inputRect.top),\n          `Expected panel to fall back to above position after repositioning.`);\n      tick();\n    }));\n\n    it('should not throw if a panel reposition is requested while the panel is closed', () => {\n        let fixture = createComponent(SimpleAutocomplete);\n        fixture.detectChanges();\n\n        expect(() => fixture.componentInstance.trigger.updatePosition()).not.toThrow();\n    });\n  });\n\n  describe('Option selection', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n\n    beforeEach(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n    });\n\n    it('should deselect any other selected option', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      let options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[0].click();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      let componentOptions = fixture.componentInstance.options.toArray();\n      expect(componentOptions[0].selected)\n          .toBe(true, `Clicked option should be selected.`);\n\n      options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(componentOptions[0].selected)\n          .toBe(false, `Previous option should not be selected.`);\n      expect(componentOptions[1].selected)\n          .toBe(true, `New Clicked option should be selected.`);\n    }));\n\n    it('should call deselect only on the previous selected option', fakeAsync(() => {\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      let options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[0].click();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      let componentOptions = fixture.componentInstance.options.toArray();\n      componentOptions.forEach(option => spyOn(option, 'deselect'));\n\n      expect(componentOptions[0].selected)\n          .toBe(true, `Clicked option should be selected.`);\n\n      options =\n          overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n      options[1].click();\n      fixture.detectChanges();\n\n      expect(componentOptions[0].deselect).toHaveBeenCalled();\n      componentOptions.slice(1).forEach(option => expect(option.deselect).not.toHaveBeenCalled());\n    }));\n\n    it('should be able to preselect the first option', fakeAsync(() => {\n      fixture.componentInstance.trigger.autocomplete.autoActiveFirstOption = true;\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelectorAll('mat-option')[0].classList)\n          .toContain('mat-active', 'Expected first option to be highlighted.');\n    }));\n\n    it('should remove aria-activedescendant when panel is closed with autoActiveFirstOption',\n      fakeAsync(() => {\n        const input: HTMLElement = fixture.nativeElement.querySelector('input');\n\n        expect(input.hasAttribute('aria-activedescendant'))\n            .toBe(false, 'Expected no active descendant on init.');\n\n        fixture.componentInstance.trigger.autocomplete.autoActiveFirstOption = true;\n        fixture.componentInstance.trigger.openPanel();\n        fixture.detectChanges();\n        zone.simulateZoneExit();\n        fixture.detectChanges();\n\n        expect(input.getAttribute('aria-activedescendant'))\n            .toBeTruthy('Expected active descendant while open.');\n\n        fixture.componentInstance.trigger.closePanel();\n        fixture.detectChanges();\n\n        expect(input.hasAttribute('aria-activedescendant'))\n            .toBe(false, 'Expected no active descendant when closed.');\n      }));\n\n    it('should be able to configure preselecting the first option globally', fakeAsync(() => {\n      overlayContainer.ngOnDestroy();\n      fixture.destroy();\n      TestBed.resetTestingModule();\n      fixture = createComponent(SimpleAutocomplete, [\n        {provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: {autoActiveFirstOption: true}}\n      ]);\n\n      fixture.detectChanges();\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      expect(overlayContainerElement.querySelectorAll('mat-option')[0].classList)\n          .toContain('mat-active', 'Expected first option to be highlighted.');\n    }));\n\n    it('should handle `optionSelections` being accessed too early', fakeAsync(() => {\n      overlayContainer.ngOnDestroy();\n      fixture.destroy();\n      fixture = TestBed.createComponent(SimpleAutocomplete);\n\n      let spy = jasmine.createSpy('option selection spy');\n      let subscription: Subscription;\n\n      expect(fixture.componentInstance.trigger.autocomplete).toBeFalsy();\n      expect(() => {\n        subscription = fixture.componentInstance.trigger.optionSelections.subscribe(spy);\n      }).not.toThrow();\n\n      fixture.detectChanges();\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\n\n      option.click();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      expect(spy).toHaveBeenCalledWith(jasmine.any(MatOptionSelectionChange));\n      subscription!.unsubscribe();\n    }));\n\n    it('should reposition the panel when the amount of options changes', fakeAsync(() => {\n      let formField = fixture.debugElement.query(By.css('.mat-form-field')).nativeElement;\n      let inputReference = formField.querySelector('.mat-form-field-flex');\n      let input = inputReference.querySelector('input');\n\n      formField.style.bottom = '100px';\n      formField.style.position = 'fixed';\n\n      typeInElement('Cali', input);\n      fixture.detectChanges();\n      tick();\n      zone.simulateZoneExit();\n      fixture.detectChanges();\n\n      const inputBottom = inputReference.getBoundingClientRect().bottom;\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\n      const panelTop = panel.getBoundingClientRect().top;\n\n      expect(Math.floor(inputBottom)).toBe(Math.floor(panelTop),\n          `Expected panel top to match input bottom when there is only one option.`);\n\n      typeInElement('', input);\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      const inputTop = inputReference.getBoundingClientRect().top;\n      const panelBottom = panel.getBoundingClientRect().bottom;\n\n      expect(Math.floor(inputTop)).toBe(Math.floor(panelBottom),\n          `Expected panel switch to the above position if the options no longer fit.`);\n    }));\n\n  });\n\n  describe('panel closing', () => {\n    let fixture: ComponentFixture<SimpleAutocomplete>;\n    let input: HTMLInputElement;\n    let trigger: MatAutocompleteTrigger;\n    let closingActionSpy: jasmine.Spy;\n    let closingActionsSub: Subscription;\n\n    beforeEach(fakeAsync(() => {\n      fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      input = fixture.debugElement.query(By.css('input')).nativeElement;\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n      flush();\n\n      trigger = fixture.componentInstance.trigger;\n      closingActionSpy = jasmine.createSpy('closing action listener');\n      closingActionsSub = trigger.panelClosingActions.subscribe(closingActionSpy);\n    }));\n\n    afterEach(() => {\n      closingActionsSub.unsubscribe();\n    });\n\n    it('should emit panel close event when clicking away', () => {\n      expect(closingActionSpy).not.toHaveBeenCalled();\n      dispatchFakeEvent(document, 'click');\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\n    });\n\n    it('should emit panel close event when tabbing out', () => {\n      const tabEvent = createKeyboardEvent('keydown', TAB);\n      input.focus();\n\n      expect(closingActionSpy).not.toHaveBeenCalled();\n      trigger._handleKeydown(tabEvent);\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\n    });\n\n    it('should not emit when tabbing away from a closed panel', () => {\n      const tabEvent = createKeyboardEvent('keydown', TAB);\n\n      input.focus();\n      zone.simulateZoneExit();\n\n      trigger._handleKeydown(tabEvent);\n\n      // Ensure that it emitted once while the panel was open.\n      expect(closingActionSpy).toHaveBeenCalledTimes(1);\n\n      trigger._handleKeydown(tabEvent);\n\n      // Ensure that it didn't emit again when tabbing out again.\n      expect(closingActionSpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should emit panel close event when selecting an option', () => {\n      const option = overlayContainerElement.querySelector('mat-option') as HTMLElement;\n\n      expect(closingActionSpy).not.toHaveBeenCalled();\n      option.click();\n      expect(closingActionSpy).toHaveBeenCalledWith(jasmine.any(MatOptionSelectionChange));\n    });\n\n    it('should close the panel when pressing escape', () => {\n      expect(closingActionSpy).not.toHaveBeenCalled();\n      dispatchKeyboardEvent(document.body, 'keydown', ESCAPE);\n      expect(closingActionSpy).toHaveBeenCalledWith(null);\n    });\n  });\n\n  describe('without matInput', () => {\n    let fixture: ComponentFixture<AutocompleteWithNativeInput>;\n\n    beforeEach(() => {\n      fixture = createComponent(AutocompleteWithNativeInput);\n      fixture.detectChanges();\n    });\n\n    it('should not throw when clicking outside', fakeAsync(() => {\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focus');\n      fixture.detectChanges();\n      flush();\n\n      expect(() => dispatchFakeEvent(document, 'click')).not.toThrow();\n    }));\n  });\n\n  describe('misc', () => {\n\n    it('should allow basic use without any forms directives', () => {\n      expect(() => {\n        const fixture = createComponent(AutocompleteWithoutForms);\n        fixture.detectChanges();\n\n        const input = fixture.debugElement.query(By.css('input')).nativeElement;\n        typeInElement('d', input);\n        fixture.detectChanges();\n\n        const options =\n            overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n        expect(options.length).toBe(1);\n      }).not.toThrowError();\n    });\n\n    it('should display an empty input when the value is undefined with ngModel', () => {\n      const fixture = createComponent(AutocompleteWithNgModel);\n      fixture.detectChanges();\n\n      expect(fixture.debugElement.query(By.css('input')).nativeElement.value).toBe('');\n    });\n\n    it('should display the number when the selected option is the number zero', fakeAsync(() => {\n      const fixture = createComponent(AutocompleteWithNumbers);\n\n      fixture.componentInstance.selectedNumber = 0;\n      fixture.detectChanges();\n      tick();\n\n      expect(fixture.debugElement.query(By.css('input')).nativeElement.value).toBe('0');\n    }));\n\n    it('should work when input is wrapped in ngIf', () => {\n      const fixture = createComponent(NgIfAutocomplete);\n      fixture.detectChanges();\n\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.trigger.panelOpen)\n          .toBe(true, `Expected panel state to read open when input is focused.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('One', `Expected panel to display when input is focused.`);\n      expect(overlayContainerElement.textContent)\n          .toContain('Two', `Expected panel to display when input is focused.`);\n    });\n\n    it('should filter properly with ngIf after setting the active item', () => {\n      const fixture = createComponent(NgIfAutocomplete);\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      fixture.detectChanges();\n\n      const DOWN_ARROW_EVENT = createKeyboardEvent('keydown', DOWN_ARROW);\n      fixture.componentInstance.trigger._handleKeydown(DOWN_ARROW_EVENT);\n      fixture.detectChanges();\n\n      const input = fixture.debugElement.query(By.css('input')).nativeElement;\n      typeInElement('o', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.matOptions.length).toBe(2);\n    });\n\n    it('should throw if the user attempts to open the panel too early', () => {\n      const fixture = createComponent(AutocompleteWithoutPanel);\n      fixture.detectChanges();\n\n      expect(() => {\n        fixture.componentInstance.trigger.openPanel();\n      }).toThrow(getMatAutocompleteMissingPanelError());\n    });\n\n    it('should not throw on init, even if the panel is not defined', fakeAsync(() => {\n      expect(() => {\n        const fixture = createComponent(AutocompleteWithoutPanel);\n        fixture.componentInstance.control.setValue('Something');\n        fixture.detectChanges();\n        tick();\n      }).not.toThrow();\n    }));\n\n    it('should hide the label with a preselected form control value ' +\n      'and a disabled floating label', fakeAsync(() => {\n        const fixture = createComponent(AutocompleteWithFormsAndNonfloatingLabel);\n\n        fixture.detectChanges();\n        tick();\n        fixture.detectChanges();\n\n        const input = fixture.nativeElement.querySelector('input');\n        const label = fixture.nativeElement.querySelector('.mat-form-field-label');\n\n        expect(input.value).toBe('California');\n        expect(label.classList).not.toContain('mat-form-field-empty');\n      }));\n\n    it('should transfer the mat-autocomplete classes to the panel element', fakeAsync(() => {\n      const fixture = createComponent(SimpleAutocomplete);\n      fixture.detectChanges();\n\n      fixture.componentInstance.trigger.openPanel();\n      tick();\n      fixture.detectChanges();\n\n      const autocomplete = fixture.debugElement.nativeElement.querySelector('mat-autocomplete');\n      const panel = overlayContainerElement.querySelector('.mat-autocomplete-panel')!;\n\n      expect(autocomplete.classList).not.toContain('class-one');\n      expect(autocomplete.classList).not.toContain('class-two');\n\n      expect(panel.classList).toContain('class-one');\n      expect(panel.classList).toContain('class-two');\n    }));\n\n    it('should reset correctly when closed programmatically', fakeAsync(() => {\n      const scrolledSubject = new Subject();\n      const fixture = createComponent(SimpleAutocomplete, [\n        {\n          provide: ScrollDispatcher,\n          useValue: {scrolled: () => scrolledSubject.asObservable()}\n        },\n        {\n          provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n          useFactory: (overlay: Overlay) => () => overlay.scrollStrategies.close(),\n          deps: [Overlay]\n        }\n      ]);\n\n      fixture.detectChanges();\n      const trigger = fixture.componentInstance.trigger;\n\n      trigger.openPanel();\n      fixture.detectChanges();\n      zone.simulateZoneExit();\n\n      expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n\n      scrolledSubject.next();\n      fixture.detectChanges();\n\n      expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\n    }));\n\n    it('should handle autocomplete being attached to number inputs', fakeAsync(() => {\n      const fixture = createComponent(AutocompleteWithNumberInputAndNgModel);\n      fixture.detectChanges();\n      const input = fixture.debugElement.query(By.css('input')).nativeElement;\n\n      typeInElement('1337', input);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.selectedValue).toBe(1337);\n    }));\n\n  });\n\n  it('should have correct width when opened', () => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n    // Firefox, edge return a decimal value for width, so we need to parse and round it to verify\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\n\n    widthFixture.componentInstance.trigger.closePanel();\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.width = 500;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    // Firefox, edge return a decimal value for width, so we need to parse and round it to verify\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(500);\n  });\n\n  it('should update the width while the panel is open', () => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n    const input = widthFixture.debugElement.query(By.css('input')).nativeElement;\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\n\n    widthFixture.componentInstance.width = 500;\n    widthFixture.detectChanges();\n\n    input.focus();\n    dispatchFakeEvent(input, 'input');\n    widthFixture.detectChanges();\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(500);\n  });\n\n  it('should not reopen a closed autocomplete when returning to a blurred tab', () => {\n    const fixture = createComponent(SimpleAutocomplete);\n    fixture.detectChanges();\n\n    const trigger = fixture.componentInstance.trigger;\n    const input = fixture.debugElement.query(By.css('input')).nativeElement;\n\n    input.focus();\n    fixture.detectChanges();\n\n    expect(trigger.panelOpen).toBe(true, 'Expected panel to be open.');\n\n    trigger.closePanel();\n    fixture.detectChanges();\n\n    expect(trigger.panelOpen).toBe(false, 'Expected panel to be closed.');\n\n    // Simulate the user going to a different tab.\n    dispatchFakeEvent(window, 'blur');\n    input.blur();\n    fixture.detectChanges();\n\n    // Simulate the user coming back.\n    dispatchFakeEvent(window, 'focus');\n    input.focus();\n    fixture.detectChanges();\n\n    expect(trigger.panelOpen).toBe(false, 'Expected panel to remain closed.');\n  });\n\n  it('should update the panel width if the window is resized', fakeAsync(() => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\n\n    widthFixture.componentInstance.width = 400;\n    widthFixture.detectChanges();\n\n    dispatchFakeEvent(window, 'resize');\n    tick(20);\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(400);\n  }));\n\n  it('should have panel width match host width by default', () => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(300);\n  });\n\n  it('should have panel width set to string value', () => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.autocomplete.panelWidth = 'auto';\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n\n    expect(overlayPane.style.width).toBe('auto');\n  });\n\n  it('should have panel width set to number value', () => {\n    const widthFixture = createComponent(SimpleAutocomplete);\n\n    widthFixture.componentInstance.width = 300;\n    widthFixture.detectChanges();\n\n    widthFixture.componentInstance.trigger.autocomplete.panelWidth = 400;\n    widthFixture.componentInstance.trigger.openPanel();\n    widthFixture.detectChanges();\n\n    const overlayPane = overlayContainerElement.querySelector('.cdk-overlay-pane') as HTMLElement;\n\n    expect(Math.ceil(parseFloat(overlayPane.style.width as string))).toBe(400);\n  });\n\n  it('should show the panel when the options are initialized later within a component with ' +\n    'OnPush change detection', fakeAsync(() => {\n      let fixture = createComponent(AutocompleteWithOnPushDelay);\n\n      fixture.detectChanges();\n      dispatchFakeEvent(fixture.debugElement.query(By.css('input')).nativeElement, 'focusin');\n      tick(1000);\n\n      fixture.detectChanges();\n      tick();\n\n      Promise.resolve().then(() => {\n        let panel = overlayContainerElement.querySelector('.mat-autocomplete-panel') as HTMLElement;\n        let visibleClass = 'mat-autocomplete-visible';\n\n        fixture.detectChanges();\n        expect(panel.classList).toContain(visibleClass, `Expected panel to be visible.`);\n      });\n    }));\n\n  it('should emit an event when an option is selected', fakeAsync(() => {\n    let fixture = createComponent(AutocompleteWithSelectEvent);\n\n    fixture.detectChanges();\n    fixture.componentInstance.trigger.openPanel();\n    zone.simulateZoneExit();\n    fixture.detectChanges();\n\n    let options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n    let spy = fixture.componentInstance.optionSelected;\n\n    options[1].click();\n    tick();\n    fixture.detectChanges();\n\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    let event = spy.calls.mostRecent().args[0] as MatAutocompleteSelectedEvent;\n\n    expect(event.source).toBe(fixture.componentInstance.autocomplete);\n    expect(event.option.value).toBe('Washington');\n  }));\n\n  it('should emit an event when a newly-added option is selected', fakeAsync(() => {\n    let fixture = createComponent(AutocompleteWithSelectEvent);\n\n    fixture.detectChanges();\n    fixture.componentInstance.trigger.openPanel();\n    tick();\n    fixture.detectChanges();\n\n    fixture.componentInstance.states.push('Puerto Rico');\n    fixture.detectChanges();\n    tick();\n    fixture.detectChanges();\n\n    let options = overlayContainerElement.querySelectorAll('mat-option') as NodeListOf<HTMLElement>;\n    let spy = fixture.componentInstance.optionSelected;\n\n    options[3].click();\n    tick();\n    fixture.detectChanges();\n\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    let event = spy.calls.mostRecent().args[0] as MatAutocompleteSelectedEvent;\n\n    expect(event.source).toBe(fixture.componentInstance.autocomplete);\n    expect(event.option.value).toBe('Puerto Rico');\n  }));\n\n  it('should be able to set a custom panel connection element', () => {\n    const fixture = createComponent(AutocompleteWithDifferentOrigin);\n\n    fixture.detectChanges();\n    fixture.componentInstance.connectedTo = fixture.componentInstance.alternateOrigin;\n    fixture.detectChanges();\n    fixture.componentInstance.trigger.openPanel();\n    fixture.detectChanges();\n    zone.simulateZoneExit();\n\n    const overlayRect =\n        overlayContainerElement.querySelector('.cdk-overlay-pane')!.getBoundingClientRect();\n    const originRect = fixture.nativeElement.querySelector('.origin').getBoundingClientRect();\n\n    expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom),\n        'Expected autocomplete panel to align with the bottom of the new origin.');\n  });\n\n  it('should be able to change the origin after the panel has been opened', () => {\n    const fixture = createComponent(AutocompleteWithDifferentOrigin);\n\n    fixture.detectChanges();\n    fixture.componentInstance.trigger.openPanel();\n    fixture.detectChanges();\n    zone.simulateZoneExit();\n\n    fixture.componentInstance.trigger.closePanel();\n    fixture.detectChanges();\n\n    fixture.componentInstance.connectedTo = fixture.componentInstance.alternateOrigin;\n    fixture.detectChanges();\n\n    fixture.componentInstance.trigger.openPanel();\n    fixture.detectChanges();\n    zone.simulateZoneExit();\n\n    const overlayRect =\n        overlayContainerElement.querySelector('.cdk-overlay-pane')!.getBoundingClientRect();\n    const originRect = fixture.nativeElement.querySelector('.origin').getBoundingClientRect();\n\n    expect(Math.floor(overlayRect.top)).toBe(Math.floor(originRect.bottom),\n        'Expected autocomplete panel to align with the bottom of the new origin.');\n  });\n\n  it('should be able to re-type the same value when it is reset while open', fakeAsync(() => {\n    const fixture = createComponent(SimpleAutocomplete);\n    fixture.detectChanges();\n    const input = fixture.debugElement.query(By.css('input')).nativeElement;\n    const formControl = fixture.componentInstance.stateCtrl;\n\n    typeInElement('Cal', input);\n    fixture.detectChanges();\n    tick();\n    fixture.detectChanges();\n\n    expect(formControl.value).toBe('Cal', 'Expected initial value to be propagated to model');\n\n    formControl.setValue('');\n    fixture.detectChanges();\n\n    expect(input.value).toBe('', 'Expected input value to reset when model is reset');\n\n    typeInElement('Cal', input);\n    fixture.detectChanges();\n    tick();\n    fixture.detectChanges();\n\n    expect(formControl.value).toBe('Cal', 'Expected new value to be propagated to model');\n  }));\n\n});\n\n@Component({\n  template: `\n    <mat-form-field [floatLabel]=\"floatLabel\" [style.width.px]=\"width\">\n      <input\n        matInput\n        placeholder=\"State\"\n        [matAutocomplete]=\"auto\"\n        [matAutocompleteDisabled]=\"autocompleteDisabled\"\n        [formControl]=\"stateCtrl\">\n    </mat-form-field>\n\n    <mat-autocomplete class=\"class-one class-two\" #auto=\"matAutocomplete\" [displayWith]=\"displayFn\"\n      [disableRipple]=\"disableRipple\" (opened)=\"openedSpy()\" (closed)=\"closedSpy()\">\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\n        <span>{{ state.code }}: {{ state.name }}</span>\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass SimpleAutocomplete implements OnDestroy {\n  stateCtrl = new FormControl();\n  filteredStates: any[];\n  valueSub: Subscription;\n  floatLabel = 'auto';\n  width: number;\n  disableRipple = false;\n  autocompleteDisabled = false;\n  openedSpy = jasmine.createSpy('autocomplete opened spy');\n  closedSpy = jasmine.createSpy('autocomplete closed spy');\n\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  @ViewChild(MatAutocomplete) panel: MatAutocomplete;\n  @ViewChild(MatFormField) formField: MatFormField;\n  @ViewChildren(MatOption) options: QueryList<MatOption>;\n\n  states = [\n    {code: 'AL', name: 'Alabama'},\n    {code: 'CA', name: 'California'},\n    {code: 'FL', name: 'Florida'},\n    {code: 'KS', name: 'Kansas'},\n    {code: 'MA', name: 'Massachusetts'},\n    {code: 'NY', name: 'New York'},\n    {code: 'OR', name: 'Oregon'},\n    {code: 'PA', name: 'Pennsylvania'},\n    {code: 'TN', name: 'Tennessee'},\n    {code: 'VA', name: 'Virginia'},\n    {code: 'WY', name: 'Wyoming'},\n  ];\n\n\n  constructor() {\n    this.filteredStates = this.states;\n    this.valueSub = this.stateCtrl.valueChanges.subscribe(val => {\n      this.filteredStates = val ? this.states.filter((s) => s.name.match(new RegExp(val, 'gi')))\n                                : this.states;\n    });\n  }\n\n  displayFn(value: any): string {\n    return value ? value.name : value;\n  }\n\n  ngOnDestroy() {\n    this.valueSub.unsubscribe();\n  }\n\n}\n\n@Component({\n  template: `\n    <mat-form-field *ngIf=\"isVisible\">\n      <input matInput placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"optionCtrl\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n         {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass NgIfAutocomplete {\n  optionCtrl = new FormControl();\n  filteredOptions: Observable<any>;\n  isVisible = true;\n  options = ['One', 'Two', 'Three'];\n\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  @ViewChildren(MatOption) matOptions: QueryList<MatOption>;\n\n  constructor() {\n    this.filteredOptions = this.optionCtrl.valueChanges.pipe(\n      startWith(null),\n      map((val: string) => {\n        return val ? this.options.filter(option => new RegExp(val, 'gi').test(option))\n                    : this.options.slice();\n      }));\n  }\n}\n\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\"\n      (input)=\"onInput($event.target?.value)\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\n        <span> {{ state }}  </span>\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithoutForms {\n  filteredStates: any[];\n  states = ['Alabama', 'California', 'Florida'];\n\n  constructor() {\n    this.filteredStates = this.states.slice();\n  }\n\n  onInput(value: any) {\n    this.filteredStates = this.states.filter(s => new RegExp(value, 'gi').test(s));\n  }\n}\n\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\"\n      (ngModelChange)=\"onInput($event)\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let state of filteredStates\" [value]=\"state\">\n        <span>{{ state }}</span>\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithNgModel {\n  filteredStates: any[];\n  selectedState: string;\n  states = ['New York', 'Washington', 'Oregon'];\n\n  constructor() {\n    this.filteredStates = this.states.slice();\n  }\n\n  onInput(value: any) {\n    this.filteredStates = this.states.filter(s => new RegExp(value, 'gi').test(s));\n  }\n}\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input matInput placeholder=\"Number\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedNumber\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let number of numbers\" [value]=\"number\">\n        <span>{{ number }}</span>\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithNumbers {\n  selectedNumber: number;\n  numbers = [0, 1, 2];\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <mat-form-field>\n      <input type=\"text\" matInput [matAutocomplete]=\"auto\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of options\" [value]=\"option\">{{ option }}</mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithOnPushDelay implements OnInit {\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  options: string[];\n\n  ngOnInit() {\n    setTimeout(() => {\n      this.options = ['One'];\n    }, 1000);\n  }\n}\n\n@Component({\n  template: `\n    <input placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"optionCtrl\">\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n         {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithNativeInput {\n  optionCtrl = new FormControl();\n  filteredOptions: Observable<any>;\n  options = ['En', 'To', 'Tre', 'Fire', 'Fem'];\n\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  @ViewChildren(MatOption) matOptions: QueryList<MatOption>;\n\n  constructor() {\n    this.filteredOptions = this.optionCtrl.valueChanges.pipe(\n      startWith(null),\n      map((val: string) => {\n        return val ? this.options.filter(option => new RegExp(val, 'gi').test(option))\n                    : this.options.slice();\n      }));\n  }\n}\n\n\n@Component({\n  template: `<input placeholder=\"Choose\" [matAutocomplete]=\"auto\" [formControl]=\"control\">`\n})\nclass AutocompleteWithoutPanel {\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  control = new FormControl();\n}\n\n\n@Component({\n  template: `\n    <mat-form-field floatLabel=\"never\">\n      <input placeholder=\"State\" matInput [matAutocomplete]=\"auto\" [formControl]=\"formControl\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option value=\"California\">California</mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithFormsAndNonfloatingLabel {\n  formControl = new FormControl('California');\n}\n\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-optgroup *ngFor=\"let group of stateGroups\" [label]=\"group.label\">\n        <mat-option *ngFor=\"let state of group.states\" [value]=\"state\">\n          <span>{{ state }}</span>\n        </mat-option>\n      </mat-optgroup>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithGroups {\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  selectedState: string;\n  stateGroups = [\n    {\n      title: 'One',\n      states: ['Alabama', 'California', 'Florida', 'Oregon']\n    },\n    {\n      title: 'Two',\n      states: ['Kansas', 'Massachusetts', 'New York', 'Pennsylvania']\n    },\n    {\n      title: 'Three',\n      states: ['Tennessee', 'Virginia', 'Wyoming', 'Alaska']\n    }\n  ];\n}\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input matInput placeholder=\"State\" [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedState\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"optionSelected($event)\">\n      <mat-option *ngFor=\"let state of states\" [value]=\"state\">\n        <span>{{ state }}</span>\n      </mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithSelectEvent {\n  selectedState: string;\n  states = ['New York', 'Washington', 'Oregon'];\n  optionSelected = jasmine.createSpy('optionSelected callback');\n\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  @ViewChild(MatAutocomplete) autocomplete: MatAutocomplete;\n}\n\n\n@Component({\n  template: `\n    <input [formControl]=\"formControl\" [matAutocomplete]=\"auto\"/>\n    <mat-autocomplete #auto=\"matAutocomplete\"></mat-autocomplete>\n  `\n})\nclass PlainAutocompleteInputWithFormControl {\n  formControl = new FormControl();\n}\n\n\n@Component({\n  template: `\n    <mat-form-field>\n      <input type=\"number\" matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"selectedValue\">\n    </mat-form-field>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let value of values\" [value]=\"value\">{{value}}</mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithNumberInputAndNgModel {\n  selectedValue: number;\n  values = [1, 2, 3];\n}\n\n\n@Component({\n  template: `\n    <div>\n      <mat-form-field>\n        <input\n          matInput\n          [matAutocomplete]=\"auto\"\n          [matAutocompleteConnectedTo]=\"connectedTo\"\n          [(ngModel)]=\"selectedValue\">\n      </mat-form-field>\n    </div>\n\n    <div\n      class=\"origin\"\n      matAutocompleteOrigin\n      #origin=\"matAutocompleteOrigin\"\n      style=\"margin-top: 50px\">\n      Connection element\n    </div>\n\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let value of values\" [value]=\"value\">{{value}}</mat-option>\n    </mat-autocomplete>\n  `\n})\nclass AutocompleteWithDifferentOrigin {\n  @ViewChild(MatAutocompleteTrigger) trigger: MatAutocompleteTrigger;\n  @ViewChild(MatAutocompleteOrigin) alternateOrigin: MatAutocompleteOrigin;\n  selectedValue: string;\n  values = ['one', 'two', 'three'];\n  connectedTo?: MatAutocompleteOrigin;\n}\n\n@Component({\n  template: `\n    <input autocomplete=\"changed\" [(ngModel)]=\"value\" [matAutocomplete]=\"auto\"/>\n    <mat-autocomplete #auto=\"matAutocomplete\"></mat-autocomplete>\n  `\n})\nclass AutocompleteWithNativeAutocompleteAttribute {\n  value: string;\n}\n\n@Component({\n  template: '<input [matAutocomplete]=\"null\" matAutocompleteDisabled>'\n})\nclass InputWithoutAutocompleteAndDisabled {\n}\n"]}