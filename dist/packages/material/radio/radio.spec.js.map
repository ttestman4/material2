{"version":3,"file":"radio.spec.js","sourceRoot":"","sources":["../../../../src/lib/radio/radio.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {async, ComponentFixture, fakeAsync, TestBed, tick} from '@angular/core/testing';\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\nimport {Component, DebugElement, ViewChild} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\nimport {MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule} from './index';\n\ndescribe('MatRadio', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatRadioModule, FormsModule, ReactiveFormsModule],\n      declarations: [\n        DisableableRadioButton,\n        FocusableRadioButton,\n        RadiosInsideRadioGroup,\n        RadioGroupWithNgModel,\n        RadioGroupWithFormControl,\n        StandaloneRadioButtons,\n        InterleavedRadioGroup,\n        TranscludingWrapper,\n        RadioButtonWithPredefinedTabindex,\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('inside of a group', () => {\n    let fixture: ComponentFixture<RadiosInsideRadioGroup>;\n    let groupDebugElement: DebugElement;\n    let radioDebugElements: DebugElement[];\n    let radioNativeElements: HTMLElement[];\n    let radioLabelElements: HTMLLabelElement[];\n    let radioInputElements: HTMLInputElement[];\n    let groupInstance: MatRadioGroup;\n    let radioInstances: MatRadioButton[];\n    let testComponent: RadiosInsideRadioGroup;\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(RadiosInsideRadioGroup);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatRadioGroup));\n      groupInstance = groupDebugElement.injector.get<MatRadioGroup>(MatRadioGroup);\n\n      radioDebugElements = fixture.debugElement.queryAll(By.directive(MatRadioButton));\n      radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\n      radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n\n      radioLabelElements = radioDebugElements\n        .map(debugEl => debugEl.query(By.css('label')).nativeElement);\n      radioInputElements = radioDebugElements\n        .map(debugEl => debugEl.query(By.css('input')).nativeElement);\n    }));\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (const radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should coerce the disabled binding on the radio group', () => {\n      (groupInstance as any).disabled = '';\n      fixture.detectChanges();\n\n      radioLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(radioInstances[0].checked).toBe(false);\n      expect(groupInstance.disabled).toBe(true);\n    });\n\n    it('should disable click interaction when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      radioLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(radioInstances[0].checked).toBe(false);\n    });\n\n    it('should set label position based on the group labelPosition', () => {\n      testComponent.labelPos = 'before';\n      fixture.detectChanges();\n\n      for (const radio of radioInstances) {\n        expect(radio.labelPosition).toBe('before');\n      }\n\n      testComponent.labelPos = 'after';\n      fixture.detectChanges();\n\n      for (const radio of radioInstances) {\n        expect(radio.labelPosition).toBe('after');\n      }\n    });\n\n    it('should disable each individual radio when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      for (const radio of radioInstances) {\n        expect(radio.disabled).toBe(true);\n      }\n    });\n\n    it('should set required to each radio button when the group is required', () => {\n      testComponent.isGroupRequired = true;\n      fixture.detectChanges();\n\n      for (const radio of radioInstances) {\n        expect(radio.required).toBe(true);\n      }\n    });\n\n    it('should update the group value when one of the radios changes', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      radioInstances[0].checked = true;\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n    });\n\n    it('should update the group and radios when one of the radios is clicked', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      radioLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n      expect(radioInstances[0].checked).toBe(true);\n      expect(radioInstances[1].checked).toBe(false);\n\n      radioLabelElements[1].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('water');\n      expect(groupInstance.selected).toBe(radioInstances[1]);\n      expect(radioInstances[0].checked).toBe(false);\n      expect(radioInstances[1].checked).toBe(true);\n    });\n\n    it('should check a radio upon interaction with the underlying native radio button', () => {\n      radioInputElements[0].click();\n      fixture.detectChanges();\n\n      expect(radioInstances[0].checked).toBe(true);\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n    });\n\n    it('should emit a change event from radio buttons', () => {\n      expect(radioInstances[0].checked).toBe(false);\n\n      const spies = radioInstances\n        .map((radio, index) => jasmine.createSpy(`onChangeSpy ${index} for ${radio.name}`));\n\n      spies.forEach((spy, index) => radioInstances[index].change.subscribe(spy));\n\n      radioLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(spies[0]).toHaveBeenCalled();\n\n      radioLabelElements[1].click();\n      fixture.detectChanges();\n\n      // To match the native radio button behavior, the change event shouldn't\n      // be triggered when the radio got unselected.\n      expect(spies[0]).toHaveBeenCalledTimes(1);\n      expect(spies[1]).toHaveBeenCalledTimes(1);\n    });\n\n    it(`should not emit a change event from the radio group when change group value\n        programmatically`, () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      const changeSpy = jasmine.createSpy('radio-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n\n      radioLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(changeSpy).toHaveBeenCalledTimes(1);\n\n      groupInstance.value = 'water';\n      fixture.detectChanges();\n\n      expect(changeSpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should update the group and radios when updating the group value', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      testComponent.groupValue = 'fire';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n      expect(radioInstances[0].checked).toBe(true);\n      expect(radioInstances[1].checked).toBe(false);\n\n      testComponent.groupValue = 'water';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('water');\n      expect(groupInstance.selected).toBe(radioInstances[1]);\n      expect(radioInstances[0].checked).toBe(false);\n      expect(radioInstances[1].checked).toBe(true);\n    });\n\n    it('should deselect all of the radios when the group value is cleared', () => {\n      radioInstances[0].checked = true;\n\n      expect(groupInstance.value).toBeTruthy();\n\n      groupInstance.value = null;\n\n      expect(radioInstances.every(radio => !radio.checked)).toBe(true);\n    });\n\n    it('should not show ripples on disabled radio buttons', () => {\n      testComponent.isFirstDisabled = true;\n      fixture.detectChanges();\n\n      dispatchFakeEvent(radioLabelElements[0], 'mousedown');\n      dispatchFakeEvent(radioLabelElements[0], 'mouseup');\n\n      let rippleAmount = radioNativeElements[0]\n          .querySelectorAll('.mat-ripple-element:not(.mat-radio-persistent-ripple)').length;\n\n      expect(rippleAmount).toBe(0, 'Expected a disabled radio button to not show ripples');\n\n      testComponent.isFirstDisabled = false;\n      fixture.detectChanges();\n\n      dispatchFakeEvent(radioLabelElements[0], 'mousedown');\n      dispatchFakeEvent(radioLabelElements[0], 'mouseup');\n\n      rippleAmount = radioNativeElements[0]\n          .querySelectorAll('.mat-ripple-element:not(.mat-radio-persistent-ripple)').length;\n\n      expect(rippleAmount)\n        .toBe(1, 'Expected an enabled radio button to show ripples');\n    });\n\n    it('should not show ripples if matRippleDisabled input is set', () => {\n      testComponent.disableRipple = true;\n      fixture.detectChanges();\n\n      for (const radioLabel of radioLabelElements) {\n        dispatchFakeEvent(radioLabel, 'mousedown');\n        dispatchFakeEvent(radioLabel, 'mouseup');\n\n        const rippleAmount = radioNativeElements[0]\n            .querySelectorAll('.mat-ripple-element:not(.mat-radio-persistent-ripple)').length;\n\n        expect(rippleAmount).toBe(0);\n      }\n\n      testComponent.disableRipple = false;\n      fixture.detectChanges();\n\n      for (const radioLabel of radioLabelElements) {\n        dispatchFakeEvent(radioLabel, 'mousedown');\n        dispatchFakeEvent(radioLabel, 'mouseup');\n\n        const rippleAmount = radioNativeElements[0]\n            .querySelectorAll('.mat-ripple-element:not(.mat-radio-persistent-ripple)').length;\n\n        expect(rippleAmount).toBe(1);\n      }\n    });\n\n    it(`should update the group's selected radio to null when unchecking that radio\n        programmatically`, () => {\n      const changeSpy = jasmine.createSpy('radio-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n      radioInstances[0].checked = true;\n\n      fixture.detectChanges();\n\n      expect(changeSpy).not.toHaveBeenCalled();\n      expect(groupInstance.value).toBeTruthy();\n\n      radioInstances[0].checked = false;\n\n      fixture.detectChanges();\n\n      expect(changeSpy).not.toHaveBeenCalled();\n      expect(groupInstance.value).toBeFalsy();\n      expect(radioInstances.every(radio => !radio.checked)).toBe(true);\n      expect(groupInstance.selected).toBeNull();\n    });\n\n    it('should not fire a change event from the group when a radio checked state changes', () => {\n      const changeSpy = jasmine.createSpy('radio-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n      radioInstances[0].checked = true;\n\n      fixture.detectChanges();\n\n      expect(changeSpy).not.toHaveBeenCalled();\n      expect(groupInstance.value).toBeTruthy();\n      expect(groupInstance.value).toBe('fire');\n\n      radioInstances[1].checked = true;\n\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('water');\n      expect(changeSpy).not.toHaveBeenCalled();\n    });\n\n    it(`should update checked status if changed value to radio group's value`, () => {\n      const changeSpy = jasmine.createSpy('radio-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n      groupInstance.value = 'apple';\n\n      expect(changeSpy).not.toHaveBeenCalled();\n      expect(groupInstance.value).toBe('apple');\n      expect(groupInstance.selected).toBeFalsy('expect group selected to be null');\n      expect(radioInstances[0].checked).toBeFalsy('should not select the first button');\n      expect(radioInstances[1].checked).toBeFalsy('should not select the second button');\n      expect(radioInstances[2].checked).toBeFalsy('should not select the third button');\n\n      radioInstances[0].value = 'apple';\n\n      fixture.detectChanges();\n\n      expect(groupInstance.selected).toBe(\n        radioInstances[0], 'expect group selected to be first button');\n      expect(radioInstances[0].checked).toBeTruthy('expect group select the first button');\n      expect(radioInstances[1].checked).toBeFalsy('should not select the second button');\n      expect(radioInstances[2].checked).toBeFalsy('should not select the third button');\n    });\n\n    it('should apply class based on color attribute', () => {\n      expect(radioNativeElements.every(radioEl => radioEl.classList.contains('mat-accent')))\n        .toBe(true, 'Expected every radio element to use the accent color by default.');\n\n      testComponent.color = 'primary';\n      fixture.detectChanges();\n\n      expect(radioNativeElements.every(radioEl => radioEl.classList.contains('mat-primary')))\n        .toBe(true, 'Expected every radio element to use the primary color from the binding.');\n\n      testComponent.color = 'warn';\n      fixture.detectChanges();\n\n      expect(radioNativeElements.every(radioEl => radioEl.classList.contains('mat-warn')))\n        .toBe(true, 'Expected every radio element to use the primary color from the binding.');\n\n      testComponent.color = null;\n      fixture.detectChanges();\n\n      expect(radioNativeElements.every(radioEl => radioEl.classList.contains('mat-accent')))\n        .toBe(true, 'Expected every radio element to fallback to accent color if value is falsy.');\n    });\n  });\n\n  describe('group with ngModel', () => {\n    let fixture: ComponentFixture<RadioGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let radioDebugElements: DebugElement[];\n    let innerRadios: DebugElement[];\n    let radioLabelElements: HTMLLabelElement[];\n    let groupInstance: MatRadioGroup;\n    let radioInstances: MatRadioButton[];\n    let testComponent: RadioGroupWithNgModel;\n    let groupNgModel: NgModel;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(RadioGroupWithNgModel);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatRadioGroup));\n      groupInstance = groupDebugElement.injector.get<MatRadioGroup>(MatRadioGroup);\n      groupNgModel = groupDebugElement.injector.get<NgModel>(NgModel);\n\n      radioDebugElements = fixture.debugElement.queryAll(By.directive(MatRadioButton));\n      radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n      innerRadios = fixture.debugElement.queryAll(By.css('input[type=\"radio\"]'));\n\n      radioLabelElements = radioDebugElements\n        .map(debugEl => debugEl.query(By.css('label')).nativeElement);\n    });\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (const radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n\n      groupInstance.name = 'new name';\n\n      for (const radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should update the name of radio DOM elements if the name of the group changes', () => {\n      const nodes: HTMLInputElement[] = innerRadios.map(radio => radio.nativeElement);\n\n      expect(nodes.every(radio => radio.getAttribute('name') === groupInstance.name))\n          .toBe(true, 'Expected all radios to have the initial name.');\n\n      fixture.componentInstance.groupName = 'changed-name';\n      fixture.detectChanges();\n\n      expect(groupInstance.name).toBe('changed-name');\n      expect(nodes.every(radio => radio.getAttribute('name') === groupInstance.name))\n          .toBe(true, 'Expected all radios to have the new name.');\n    });\n\n    it('should check the corresponding radio button on group value change', () => {\n      expect(groupInstance.value).toBeFalsy();\n      for (const radio of radioInstances) {\n        expect(radio.checked).toBeFalsy();\n      }\n\n      groupInstance.value = 'vanilla';\n      for (const radio of radioInstances) {\n        expect(radio.checked).toBe(groupInstance.value === radio.value);\n      }\n      expect(groupInstance.selected!.value).toBe(groupInstance.value);\n    });\n\n    it('should have the correct control state initially and after interaction', () => {\n      // The control should start off valid, pristine, and untouched.\n      expect(groupNgModel.valid).toBe(true);\n      expect(groupNgModel.pristine).toBe(true);\n      expect(groupNgModel.touched).toBe(false);\n\n      // After changing the value programmatically, the control should stay pristine\n      // but remain untouched.\n      radioInstances[1].checked = true;\n      fixture.detectChanges();\n\n      expect(groupNgModel.valid).toBe(true);\n      expect(groupNgModel.pristine).toBe(true);\n      expect(groupNgModel.touched).toBe(false);\n\n      // After a user interaction occurs (such as a click), the control should become dirty and\n      // now also be touched.\n      radioLabelElements[2].click();\n      fixture.detectChanges();\n\n      expect(groupNgModel.valid).toBe(true);\n      expect(groupNgModel.pristine).toBe(false);\n      expect(groupNgModel.touched).toBe(true);\n    });\n\n    it('should write to the radio button based on ngModel', fakeAsync(() => {\n      testComponent.modelValue = 'chocolate';\n\n      fixture.detectChanges();\n      tick();\n      fixture.detectChanges();\n\n      expect(innerRadios[1].nativeElement.checked).toBe(true);\n      expect(radioInstances[1].checked).toBe(true);\n    }));\n\n    it('should update the ngModel value when selecting a radio button', () => {\n      dispatchFakeEvent(innerRadios[1].nativeElement, 'change');\n      fixture.detectChanges();\n      expect(testComponent.modelValue).toBe('chocolate');\n    });\n\n    it('should update the model before firing change event', () => {\n      expect(testComponent.modelValue).toBeUndefined();\n      expect(testComponent.lastEvent).toBeUndefined();\n\n      dispatchFakeEvent(innerRadios[1].nativeElement, 'change');\n      fixture.detectChanges();\n      expect(testComponent.lastEvent.value).toBe('chocolate');\n\n      dispatchFakeEvent(innerRadios[0].nativeElement, 'change');\n      fixture.detectChanges();\n      expect(testComponent.lastEvent.value).toBe('vanilla');\n    });\n  });\n\n  describe('group with FormControl', () => {\n    let fixture: ComponentFixture<RadioGroupWithFormControl>;\n    let groupDebugElement: DebugElement;\n    let groupInstance: MatRadioGroup;\n    let testComponent: RadioGroupWithFormControl;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(RadioGroupWithFormControl);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n      groupDebugElement = fixture.debugElement.query(By.directive(MatRadioGroup));\n      groupInstance = groupDebugElement.injector.get<MatRadioGroup>(MatRadioGroup);\n    });\n\n    it('should toggle the disabled state', () => {\n      expect(groupInstance.disabled).toBeFalsy();\n\n      testComponent.formControl.disable();\n      fixture.detectChanges();\n\n      expect(groupInstance.disabled).toBeTruthy();\n\n      testComponent.formControl.enable();\n      fixture.detectChanges();\n\n      expect(groupInstance.disabled).toBeFalsy();\n    });\n  });\n\n  describe('disableable', () => {\n    let fixture: ComponentFixture<DisableableRadioButton>;\n    let radioInstance: MatRadioButton;\n    let radioNativeElement: HTMLInputElement;\n    let testComponent: DisableableRadioButton;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(DisableableRadioButton);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n      const radioDebugElement = fixture.debugElement.query(By.directive(MatRadioButton));\n      radioInstance = radioDebugElement.injector.get<MatRadioButton>(MatRadioButton);\n      radioNativeElement = radioDebugElement.nativeElement.querySelector('input');\n    });\n\n    it('should toggle the disabled state', () => {\n      expect(radioInstance.disabled).toBeFalsy();\n      expect(radioNativeElement.disabled).toBeFalsy();\n\n      testComponent.disabled = true;\n      fixture.detectChanges();\n      expect(radioInstance.disabled).toBeTruthy();\n      expect(radioNativeElement.disabled).toBeTruthy();\n\n      testComponent.disabled = false;\n      fixture.detectChanges();\n      expect(radioInstance.disabled).toBeFalsy();\n      expect(radioNativeElement.disabled).toBeFalsy();\n    });\n  });\n\n  describe('as standalone', () => {\n    let fixture: ComponentFixture<StandaloneRadioButtons>;\n    let radioDebugElements: DebugElement[];\n    let seasonRadioInstances: MatRadioButton[];\n    let weatherRadioInstances: MatRadioButton[];\n    let fruitRadioInstances: MatRadioButton[];\n    let fruitRadioNativeInputs: HTMLElement[];\n    let testComponent: StandaloneRadioButtons;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(StandaloneRadioButtons);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      radioDebugElements = fixture.debugElement.queryAll(By.directive(MatRadioButton));\n      seasonRadioInstances = radioDebugElements\n          .filter(debugEl => debugEl.componentInstance.name == 'season')\n          .map(debugEl => debugEl.componentInstance);\n      weatherRadioInstances = radioDebugElements\n          .filter(debugEl => debugEl.componentInstance.name == 'weather')\n          .map(debugEl => debugEl.componentInstance);\n      fruitRadioInstances = radioDebugElements\n          .filter(debugEl => debugEl.componentInstance.name == 'fruit')\n          .map(debugEl => debugEl.componentInstance);\n\n      const fruitRadioNativeElements = radioDebugElements\n          .filter(debugEl => debugEl.componentInstance.name == 'fruit')\n          .map(debugEl => debugEl.nativeElement);\n\n      fruitRadioNativeInputs = [];\n      for (const element of fruitRadioNativeElements) {\n        fruitRadioNativeInputs.push(<HTMLElement> element.querySelector('input'));\n      }\n    });\n\n    it('should uniquely select radios by a name', () => {\n      seasonRadioInstances[0].checked = true;\n      weatherRadioInstances[1].checked = true;\n\n      fixture.detectChanges();\n      expect(seasonRadioInstances[0].checked).toBe(true);\n      expect(seasonRadioInstances[1].checked).toBe(false);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(true);\n      expect(weatherRadioInstances[2].checked).toBe(false);\n\n      seasonRadioInstances[1].checked = true;\n      fixture.detectChanges();\n      expect(seasonRadioInstances[0].checked).toBe(false);\n      expect(seasonRadioInstances[1].checked).toBe(true);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(true);\n      expect(weatherRadioInstances[2].checked).toBe(false);\n\n      weatherRadioInstances[2].checked = true;\n      expect(seasonRadioInstances[0].checked).toBe(false);\n      expect(seasonRadioInstances[1].checked).toBe(true);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(false);\n      expect(weatherRadioInstances[2].checked).toBe(true);\n    });\n\n    it('should add required attribute to the underlying input element if defined', () => {\n      const radioInstance = seasonRadioInstances[0];\n      radioInstance.required = true;\n      fixture.detectChanges();\n\n      expect(radioInstance.required).toBe(true);\n    });\n\n    it('should add aria-label attribute to the underlying input element if defined', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Banana');\n    });\n\n    it('should not add aria-label attribute if not defined', () => {\n      expect(fruitRadioNativeInputs[1].hasAttribute('aria-label')).toBeFalsy();\n    });\n\n    it('should change aria-label attribute if property is changed at runtime', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Banana');\n\n      testComponent.ariaLabel = 'Pineapple';\n      fixture.detectChanges();\n\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Pineapple');\n    });\n\n    it('should add aria-labelledby attribute to the underlying input element if defined', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('xyz');\n    });\n\n    it('should not add aria-labelledby attribute if not defined', () => {\n      expect(fruitRadioNativeInputs[1].hasAttribute('aria-labelledby')).toBeFalsy();\n    });\n\n    it('should change aria-labelledby attribute if property is changed at runtime', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('xyz');\n\n      testComponent.ariaLabelledby = 'uvw';\n      fixture.detectChanges();\n\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('uvw');\n    });\n\n    it('should add aria-describedby attribute to the underlying input element if defined', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-describedby')).toBe('abc');\n    });\n\n    it('should not add aria-describedby attribute if not defined', () => {\n      expect(fruitRadioNativeInputs[1].hasAttribute('aria-describedby')).toBeFalsy();\n    });\n\n    it('should change aria-describedby attribute if property is changed at runtime', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-describedby')).toBe('abc');\n\n      testComponent.ariaDescribedby = 'uvw';\n      fixture.detectChanges();\n\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-describedby')).toBe('uvw');\n    });\n\n    it('should focus on underlying input element when focus() is called', () => {\n      for (let i = 0; i < fruitRadioInstances.length; i++) {\n        expect(document.activeElement).not.toBe(fruitRadioNativeInputs[i]);\n        fruitRadioInstances[i].focus();\n        fixture.detectChanges();\n\n        expect(document.activeElement).toBe(fruitRadioNativeInputs[i]);\n      }\n    });\n\n    it('should not add the \"name\" attribute if it is not passed in', () => {\n      const radio = fixture.debugElement.nativeElement.querySelector('#nameless input');\n      expect(radio.hasAttribute('name')).toBe(false);\n    });\n\n  });\n\n  describe('with tabindex', () => {\n    let fixture: ComponentFixture<FocusableRadioButton>;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(FocusableRadioButton);\n      fixture.detectChanges();\n    });\n\n    it('should forward focus to native input', () => {\n      let radioButtonEl = fixture.debugElement.query(By.css('.mat-radio-button')).nativeElement;\n      let inputEl = fixture.debugElement.query(By.css('.mat-radio-input')).nativeElement;\n\n      radioButtonEl.focus();\n      // Focus events don't always fire in tests, so we need to fake it.\n      dispatchFakeEvent(radioButtonEl, 'focus');\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(inputEl);\n    });\n\n    it('should allow specifying an explicit tabindex for a single radio-button', () => {\n      const radioButtonInput = fixture.debugElement\n        .query(By.css('.mat-radio-button input')).nativeElement as HTMLInputElement;\n\n      expect(radioButtonInput.tabIndex)\n        .toBe(0, 'Expected the tabindex to be set to \"0\" by default.');\n\n      fixture.componentInstance.tabIndex = 4;\n      fixture.detectChanges();\n\n      expect(radioButtonInput.tabIndex)\n        .toBe(4, 'Expected the tabindex to be set to \"4\".');\n    });\n\n    it('should remove the tabindex from the host element', () => {\n      const predefinedFixture = TestBed.createComponent(RadioButtonWithPredefinedTabindex);\n      predefinedFixture.detectChanges();\n\n      const radioButtonEl =\n          predefinedFixture.debugElement.query(By.css('.mat-radio-button')).nativeElement;\n\n      expect(radioButtonEl.getAttribute('tabindex')).toBe('-1');\n    });\n\n  });\n\n  describe('group interspersed with other tags', () => {\n    let fixture: ComponentFixture<InterleavedRadioGroup>;\n    let groupDebugElement: DebugElement;\n    let groupInstance: MatRadioGroup;\n    let radioDebugElements: DebugElement[];\n    let radioInstances: MatRadioButton[];\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(InterleavedRadioGroup);\n      fixture.detectChanges();\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatRadioGroup));\n      groupInstance = groupDebugElement.injector.get<MatRadioGroup>(MatRadioGroup);\n      radioDebugElements = fixture.debugElement.queryAll(By.directive(MatRadioButton));\n      radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n    }));\n\n    it('should initialize selection of radios based on model value', () => {\n      expect(groupInstance.selected).toBe(radioInstances[2]);\n    });\n  });\n});\n\n\n@Component({\n  template: `\n  <mat-radio-group [disabled]=\"isGroupDisabled\"\n                  [labelPosition]=\"labelPos\"\n                  [required]=\"isGroupRequired\"\n                  [value]=\"groupValue\"\n                  name=\"test-name\">\n    <mat-radio-button value=\"fire\" [disableRipple]=\"disableRipple\" [disabled]=\"isFirstDisabled\"\n                     [color]=\"color\">\n      Charmander\n    </mat-radio-button>\n    <mat-radio-button value=\"water\" [disableRipple]=\"disableRipple\" [color]=\"color\">\n      Squirtle\n    </mat-radio-button>\n    <mat-radio-button value=\"leaf\" [disableRipple]=\"disableRipple\" [color]=\"color\">\n      Bulbasaur\n    </mat-radio-button>\n  </mat-radio-group>\n  `\n})\nclass RadiosInsideRadioGroup {\n  labelPos: 'before' | 'after';\n  isFirstDisabled: boolean = false;\n  isGroupDisabled: boolean = false;\n  isGroupRequired: boolean = false;\n  groupValue: string | null = null;\n  disableRipple: boolean = false;\n  color: string | null;\n}\n\n\n@Component({\n  template: `\n    <mat-radio-button name=\"season\" value=\"spring\">Spring</mat-radio-button>\n    <mat-radio-button name=\"season\" value=\"summer\">Summer</mat-radio-button>\n    <mat-radio-button name=\"season\" value=\"autum\">Autumn</mat-radio-button>\n\n    <mat-radio-button name=\"weather\" value=\"warm\">Spring</mat-radio-button>\n    <mat-radio-button name=\"weather\" value=\"hot\">Summer</mat-radio-button>\n    <mat-radio-button name=\"weather\" value=\"cool\">Autumn</mat-radio-button>\n\n    <span id=\"xyz\">Baby Banana</span>\n    <span id=\"abc\">A smaller banana</span>\n    <mat-radio-button name=\"fruit\"\n                     value=\"banana\"\n                     [aria-label]=\"ariaLabel\"\n                     [aria-labelledby]=\"ariaLabelledby\"\n                     [aria-describedby]=\"ariaDescribedby\">\n    </mat-radio-button>\n    <mat-radio-button name=\"fruit\" value=\"raspberry\">Raspberry</mat-radio-button>\n    <mat-radio-button id=\"nameless\" value=\"no-name\">No name</mat-radio-button>\n  `\n})\nclass StandaloneRadioButtons {\n  ariaLabel: string = 'Banana';\n  ariaLabelledby: string = 'xyz';\n  ariaDescribedby: string = 'abc';\n}\n\n\n@Component({\n  template: `\n  <mat-radio-group [name]=\"groupName\" [(ngModel)]=\"modelValue\" (change)=\"lastEvent = $event\">\n    <mat-radio-button *ngFor=\"let option of options\" [value]=\"option.value\">\n      {{option.label}}\n    </mat-radio-button>\n  </mat-radio-group>\n  `\n})\nclass RadioGroupWithNgModel {\n  modelValue: string;\n  groupName = 'radio-group';\n  options = [\n    {label: 'Vanilla', value: 'vanilla'},\n    {label: 'Chocolate', value: 'chocolate'},\n    {label: 'Strawberry', value: 'strawberry'},\n  ];\n  lastEvent: MatRadioChange;\n}\n\n@Component({\n  template: `<mat-radio-button>One</mat-radio-button>`\n})\nclass DisableableRadioButton {\n  @ViewChild(MatRadioButton) matRadioButton: MatRadioButton;\n\n  set disabled(value: boolean) {\n    this.matRadioButton.disabled = value;\n  }\n}\n\n@Component({\n  template: `\n  <mat-radio-group [formControl]=\"formControl\">\n    <mat-radio-button value=\"1\">One</mat-radio-button>\n  </mat-radio-group>\n  `\n})\nclass RadioGroupWithFormControl {\n  formControl = new FormControl();\n}\n\n@Component({\n  template: `<mat-radio-button [tabIndex]=\"tabIndex\"></mat-radio-button>`\n})\nclass FocusableRadioButton {\n  tabIndex: number;\n}\n\n@Component({\n  template: `\n  <mat-radio-group name=\"group\" [(ngModel)]=\"modelValue\">\n    <transcluding-wrapper *ngFor=\"let option of options\">\n      <mat-radio-button [value]=\"option.value\">{{option.label}}</mat-radio-button>\n    </transcluding-wrapper>\n  </mat-radio-group>\n  `\n})\nclass InterleavedRadioGroup {\n  modelValue = 'strawberry';\n  options = [\n    {label: 'Vanilla', value: 'vanilla'},\n    {label: 'Chocolate', value: 'chocolate'},\n    {label: 'Strawberry', value: 'strawberry'},\n  ];\n}\n\n@Component({\n  selector: 'transcluding-wrapper',\n  template: `\n    <div><ng-content></ng-content></div>\n  `\n})\nclass TranscludingWrapper {}\n\n\n@Component({\n  template: `<mat-radio-button tabindex=\"0\"></mat-radio-button>`\n})\nclass RadioButtonWithPredefinedTabindex {}\n"]}