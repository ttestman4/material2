{"version":3,"file":"sort.spec.js","sourceRoot":"","sources":["../../../../src/lib/sort/sort.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  createFakeEvent,\n  createMouseEvent,\n  dispatchMouseEvent,\n  wrappedErrorMessage\n} from '@angular/cdk/testing';\nimport {Component, ElementRef, ViewChild} from '@angular/core';\nimport {async, ComponentFixture, fakeAsync, inject, TestBed, tick} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {MatTableModule} from '../table/index';\nimport {\n  MatSort,\n  MatSortHeader,\n  MatSortHeaderIntl,\n  MatSortModule,\n  Sort,\n  SortDirection\n} from './index';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortHeaderNotContainedWithinSortError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n\ndescribe('MatSort', () => {\n  let fixture: ComponentFixture<SimpleMatSortApp>;\n\n  let component: SimpleMatSortApp;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatSortModule, MatTableModule, CdkTableModule, NoopAnimationsModule],\n      declarations: [\n        SimpleMatSortApp,\n        CdkTableMatSortApp,\n        MatTableMatSortApp,\n        MatSortHeaderMissingMatSortApp,\n        MatSortDuplicateMatSortableIdsApp,\n        MatSortableMissingIdApp,\n        MatSortableInvalidDirection\n      ],\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(SimpleMatSortApp);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should have the sort headers register and deregister themselves', () => {\n    const sortables = component.matSort.sortables;\n    expect(sortables.size).toBe(4);\n    expect(sortables.get('defaultA')).toBe(component.defaultA);\n    expect(sortables.get('defaultB')).toBe(component.defaultB);\n\n    fixture.destroy();\n    expect(sortables.size).toBe(0);\n  });\n\n  it('should mark itself as initialized', fakeAsync(() => {\n    let isMarkedInitialized = false;\n    component.matSort.initialized.subscribe(() => isMarkedInitialized = true);\n\n    tick();\n    expect(isMarkedInitialized).toBeTruthy();\n  }));\n\n  it('should use the column definition if used within a cdk table', () => {\n    let cdkTableMatSortAppFixture = TestBed.createComponent(CdkTableMatSortApp);\n    let cdkTableMatSortAppComponent = cdkTableMatSortAppFixture.componentInstance;\n\n    cdkTableMatSortAppFixture.detectChanges();\n    cdkTableMatSortAppFixture.detectChanges();\n\n    const sortables = cdkTableMatSortAppComponent.matSort.sortables;\n    expect(sortables.size).toBe(3);\n    expect(sortables.has('column_a')).toBe(true);\n    expect(sortables.has('column_b')).toBe(true);\n    expect(sortables.has('column_c')).toBe(true);\n  });\n\n  it('should use the column definition if used within an mat table', () => {\n    let matTableMatSortAppFixture = TestBed.createComponent(MatTableMatSortApp);\n    let matTableMatSortAppComponent = matTableMatSortAppFixture.componentInstance;\n\n    matTableMatSortAppFixture.detectChanges();\n    matTableMatSortAppFixture.detectChanges();\n\n    const sortables = matTableMatSortAppComponent.matSort.sortables;\n    expect(sortables.size).toBe(3);\n    expect(sortables.has('column_a')).toBe(true);\n    expect(sortables.has('column_b')).toBe(true);\n    expect(sortables.has('column_c')).toBe(true);\n  });\n\n  describe('checking correct arrow direction and view state for its various states', () => {\n    let expectedStates: Map<string, {viewState: string, arrowDirection: string}>;\n\n    beforeEach(() => {\n      // Starting state for the view and directions - note that overrideStart is reversed to be desc\n      expectedStates = new Map<string, {viewState: string, arrowDirection: string}>([\n        ['defaultA', {viewState: 'asc', arrowDirection: 'asc'}],\n        ['defaultB', {viewState: 'asc', arrowDirection: 'asc'}],\n        ['overrideStart', {viewState: 'desc', arrowDirection: 'desc'}],\n        ['overrideDisableClear', {viewState: 'asc', arrowDirection: 'asc'}],\n      ]);\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should be correct when mousing over headers and leaving on mouseleave', () => {\n      // Mousing over the first sort should set the view state to hint (asc)\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\n      expectedStates.set('defaultA', {viewState: 'asc-to-hint', arrowDirection: 'asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Mousing away from the first sort should hide the arrow\n      component.dispatchMouseEvent('defaultA', 'mouseleave');\n      expectedStates.set('defaultA', {viewState: 'hint-to-asc', arrowDirection: 'asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Mousing over another sort should set the view state to hint (desc)\n      component.dispatchMouseEvent('overrideStart', 'mouseenter');\n      expectedStates.set('overrideStart', {viewState: 'desc-to-hint', arrowDirection: 'desc'});\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should be correct when mousing over header and then sorting', () => {\n      // Mousing over the first sort should set the view state to hint\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\n      expectedStates.set('defaultA', {viewState: 'asc-to-hint', arrowDirection: 'asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Clicking sort on the header should set it to be active immediately\n      // (since it was already hinted)\n      component.dispatchMouseEvent('defaultA', 'click');\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should be correct when cycling through a default sort header', () => {\n      // Sort the header to set it to the active start state\n      component.sort('defaultA');\n      expectedStates.set('defaultA', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Sorting again will reverse its direction\n      component.dispatchMouseEvent('defaultA', 'click');\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-desc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Sorting again will remove the sort and animate away the view\n      component.dispatchMouseEvent('defaultA', 'click');\n      expectedStates.set('defaultA', {viewState: 'active-to-desc', arrowDirection: 'desc'});\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should not enter sort with animations if an animations is disabled', () => {\n      // Sort the header to set it to the active start state\n      component.defaultA._disableViewStateAnimation = true;\n      component.sort('defaultA');\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Sorting again will reverse its direction\n      component.defaultA._disableViewStateAnimation = true;\n      component.dispatchMouseEvent('defaultA', 'click');\n      expectedStates.set('defaultA', {viewState: 'active', arrowDirection: 'active-desc'});\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should be correct when sort has changed while a header is active', () => {\n      // Sort the first header to set up\n      component.sort('defaultA');\n      expectedStates.set('defaultA', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n\n      // Sort the second header and verify that the first header animated away\n      component.dispatchMouseEvent('defaultB', 'click');\n      expectedStates.set('defaultA', {viewState: 'active-to-asc', arrowDirection: 'asc'});\n      expectedStates.set('defaultB', {viewState: 'asc-to-active', arrowDirection: 'active-asc'});\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n\n    it('should be correct when sort has been disabled', () => {\n      // Mousing over the first sort should set the view state to hint\n      component.disabledColumnSort = true;\n      fixture.detectChanges();\n\n      component.dispatchMouseEvent('defaultA', 'mouseenter');\n      component.expectViewAndDirectionStates(expectedStates);\n    });\n  });\n\n  it('should be able to cycle from asc -> desc from either start point', () => {\n    component.disableClear = true;\n\n    component.start = 'asc';\n    testSingleColumnSortDirectionSequence(fixture, ['asc', 'desc']);\n\n    // Reverse directions\n    component.start = 'desc';\n    testSingleColumnSortDirectionSequence(fixture, ['desc', 'asc']);\n  });\n\n  it('should be able to cycle asc -> desc -> [none]', () => {\n    component.start = 'asc';\n    testSingleColumnSortDirectionSequence(fixture, ['asc', 'desc', '']);\n  });\n\n  it('should be able to cycle desc -> asc -> [none]', () => {\n    component.start = 'desc';\n    testSingleColumnSortDirectionSequence(fixture, ['desc', 'asc', '']);\n  });\n\n  it('should allow for the cycling the sort direction to be disabled per column', () => {\n    const button = fixture.nativeElement.querySelector('#defaultA button');\n\n    component.sort('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n    expect(button.getAttribute('disabled')).toBeFalsy();\n\n    component.disabledColumnSort = true;\n    fixture.detectChanges();\n\n    component.sort('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n    expect(button.getAttribute('disabled')).toBe('true');\n  });\n\n  it('should allow for the cycling the sort direction to be disabled for all columns', () => {\n    const button = fixture.nativeElement.querySelector('#defaultA button');\n\n    component.sort('defaultA');\n    expect(component.matSort.active).toBe('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n    expect(button.getAttribute('disabled')).toBeFalsy();\n\n    component.disableAllSort = true;\n    fixture.detectChanges();\n\n    component.sort('defaultA');\n    expect(component.matSort.active).toBe('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n    expect(button.getAttribute('disabled')).toBe('true');\n\n    component.sort('defaultB');\n    expect(component.matSort.active).toBe('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n    expect(button.getAttribute('disabled')).toBe('true');\n  });\n\n  it('should reset sort direction when a different column is sorted', () => {\n    component.sort('defaultA');\n    expect(component.matSort.active).toBe('defaultA');\n    expect(component.matSort.direction).toBe('asc');\n\n    component.sort('defaultA');\n    expect(component.matSort.active).toBe('defaultA');\n    expect(component.matSort.direction).toBe('desc');\n\n    component.sort('defaultB');\n    expect(component.matSort.active).toBe('defaultB');\n    expect(component.matSort.direction).toBe('asc');\n  });\n\n  it('should throw an error if an MatSortable is not contained within an MatSort directive', () => {\n    expect(() => TestBed.createComponent(MatSortHeaderMissingMatSortApp).detectChanges())\n        .toThrowError(wrappedErrorMessage(getSortHeaderNotContainedWithinSortError()));\n  });\n\n  it('should throw an error if two MatSortables have the same id', () => {\n    expect(() => TestBed.createComponent(MatSortDuplicateMatSortableIdsApp).detectChanges())\n        .toThrowError(wrappedErrorMessage(getSortDuplicateSortableIdError('duplicateId')));\n  });\n\n  it('should throw an error if an MatSortable is missing an id', () => {\n    expect(() => TestBed.createComponent(MatSortableMissingIdApp).detectChanges())\n        .toThrowError(wrappedErrorMessage(getSortHeaderMissingIdError()));\n  });\n\n  it('should throw an error if the provided direction is invalid', () => {\n    expect(() => TestBed.createComponent(MatSortableInvalidDirection).detectChanges())\n        .toThrowError(wrappedErrorMessage(getSortInvalidDirectionError('ascending')));\n  });\n\n  it('should allow let MatSortable override the default sort parameters', () => {\n    testSingleColumnSortDirectionSequence(\n        fixture, ['asc', 'desc', '']);\n\n    testSingleColumnSortDirectionSequence(\n        fixture, ['desc', 'asc', ''], 'overrideStart');\n\n    testSingleColumnSortDirectionSequence(\n        fixture, ['asc', 'desc'], 'overrideDisableClear');\n  });\n\n  it('should apply the aria-labels to the button', () => {\n    const button = fixture.nativeElement.querySelector('#defaultA button');\n    expect(button.getAttribute('aria-label')).toBe('Change sorting for defaultA');\n  });\n\n  it('should toggle indicator hint on button focus/blur and hide on click', () => {\n    const header = fixture.componentInstance.defaultA;\n    const button = fixture.nativeElement.querySelector('#defaultA button');\n    const focusEvent = createFakeEvent('focus');\n    const blurEvent = createFakeEvent('blur');\n\n    // Should start without a displayed hint\n    expect(header._showIndicatorHint).toBeFalsy();\n\n    // Focusing the button should show the hint, blurring should hide it\n    button.dispatchEvent(focusEvent);\n    expect(header._showIndicatorHint).toBeTruthy();\n\n    button.dispatchEvent(blurEvent);\n    expect(header._showIndicatorHint).toBeFalsy();\n\n    // Show the indicator hint. On click the hint should be hidden\n    button.dispatchEvent(focusEvent);\n    expect(header._showIndicatorHint).toBeTruthy();\n\n    header._handleClick();\n    expect(header._showIndicatorHint).toBeFalsy();\n  });\n\n  it('should toggle indicator hint on mouseenter/mouseleave and hide on click', () => {\n    const header = fixture.componentInstance.defaultA;\n    const headerElement = fixture.nativeElement.querySelector('#defaultA');\n    const mouseenterEvent = createMouseEvent('mouseenter');\n    const mouseleaveEvent = createMouseEvent('mouseleave');\n\n    // Should start without a displayed hint\n    expect(header._showIndicatorHint).toBeFalsy();\n\n    // Mouse enter should show the hint, blurring should hide it\n    headerElement.dispatchEvent(mouseenterEvent);\n    expect(header._showIndicatorHint).toBeTruthy();\n\n    headerElement.dispatchEvent(mouseleaveEvent);\n    expect(header._showIndicatorHint).toBeFalsy();\n\n    // Show the indicator hint. On click the hint should be hidden\n    headerElement.dispatchEvent(mouseenterEvent);\n    expect(header._showIndicatorHint).toBeTruthy();\n\n    header._handleClick();\n    expect(header._showIndicatorHint).toBeFalsy();\n  });\n\n  it('should apply the aria-sort label to the header when sorted', () => {\n    const sortHeaderElement = fixture.nativeElement.querySelector('#defaultA');\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe(null);\n\n    component.sort('defaultA');\n    fixture.detectChanges();\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe('ascending');\n\n    component.sort('defaultA');\n    fixture.detectChanges();\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe('descending');\n\n    component.sort('defaultA');\n    fixture.detectChanges();\n    expect(sortHeaderElement.getAttribute('aria-sort')).toBe(null);\n  });\n\n  it('should re-render when the i18n labels have changed',\n    inject([MatSortHeaderIntl], (intl: MatSortHeaderIntl) => {\n      const header = fixture.debugElement.query(By.directive(MatSortHeader)).nativeElement;\n      const button = header.querySelector('.mat-sort-header-button');\n\n      intl.sortButtonLabel = () => 'Sort all of the things';\n      intl.changes.next();\n      fixture.detectChanges();\n\n      expect(button.getAttribute('aria-label')).toBe('Sort all of the things');\n    })\n  );\n});\n\n/**\n * Performs a sequence of sorting on a single column to see if the sort directions are\n * consistent with expectations. Detects any changes in the fixture to reflect any changes in\n * the inputs and resets the MatSort to remove any side effects from previous tests.\n */\nfunction testSingleColumnSortDirectionSequence(fixture: ComponentFixture<SimpleMatSortApp>,\n                                               expectedSequence: SortDirection[],\n                                               id: SimpleMatSortAppColumnIds = 'defaultA') {\n  // Detect any changes that were made in preparation for this sort sequence\n  fixture.detectChanges();\n\n  // Reset the sort to make sure there are no side affects from previous tests\n  const component = fixture.componentInstance;\n  component.matSort.active = '';\n  component.matSort.direction = '';\n\n  // Run through the sequence to confirm the order\n  let actualSequence = expectedSequence.map(() => {\n    component.sort(id);\n\n    // Check that the sort event's active sort is consistent with the MatSort\n    expect(component.matSort.active).toBe(id);\n    expect(component.latestSortEvent.active).toBe(id);\n\n    // Check that the sort event's direction is consistent with the MatSort\n    expect(component.matSort.direction).toBe(component.latestSortEvent.direction);\n    return component.matSort.direction;\n  });\n  expect(actualSequence).toEqual(expectedSequence);\n\n  // Expect that performing one more sort will loop it back to the beginning.\n  component.sort(id);\n  expect(component.matSort.direction).toBe(expectedSequence[0]);\n}\n\n/** Column IDs of the SimpleMatSortApp for typing of function params in the component (e.g. sort) */\ntype SimpleMatSortAppColumnIds = 'defaultA' | 'defaultB' | 'overrideStart' | 'overrideDisableClear';\n\n@Component({\n  template: `\n    <div matSort\n         [matSortActive]=\"active\"\n         [matSortDisabled]=\"disableAllSort\"\n         [matSortStart]=\"start\"\n         [matSortDirection]=\"direction\"\n         [matSortDisableClear]=\"disableClear\"\n         (matSortChange)=\"latestSortEvent = $event\">\n      <div id=\"defaultA\"\n           #defaultA\n           mat-sort-header=\"defaultA\"\n           [disabled]=\"disabledColumnSort\">\n        A\n      </div>\n      <div id=\"defaultB\"\n           #defaultB\n           mat-sort-header=\"defaultB\">\n        B\n      </div>\n      <div id=\"overrideStart\"\n           #overrideStart\n           mat-sort-header=\"overrideStart\" start=\"desc\">\n        D\n      </div>\n      <div id=\"overrideDisableClear\"\n           #overrideDisableClear\n           mat-sort-header=\"overrideDisableClear\"\n           disableClear>\n        E\n      </div>\n    </div>\n  `\n})\nclass SimpleMatSortApp {\n  latestSortEvent: Sort;\n\n  active: string;\n  start: SortDirection = 'asc';\n  direction: SortDirection = '';\n  disableClear: boolean;\n  disabledColumnSort = false;\n  disableAllSort = false;\n\n  @ViewChild(MatSort) matSort: MatSort;\n  @ViewChild('defaultA') defaultA: MatSortHeader;\n  @ViewChild('defaultB') defaultB: MatSortHeader;\n  @ViewChild('overrideStart') overrideStart: MatSortHeader;\n  @ViewChild('overrideDisableClear') overrideDisableClear: MatSortHeader;\n\n  constructor (public elementRef: ElementRef<HTMLElement>) { }\n\n  sort(id: SimpleMatSortAppColumnIds) {\n    this.dispatchMouseEvent(id, 'click');\n  }\n\n  dispatchMouseEvent(id: SimpleMatSortAppColumnIds, event: string) {\n    const sortElement = this.elementRef.nativeElement.querySelector(`#${id}`)!;\n    dispatchMouseEvent(sortElement, event);\n  }\n\n  /**\n   * Checks expectations for each sort header's view state and arrow direction states. Receives a\n   * map that is keyed by each sort header's ID and contains the expectation for that header's\n   * states.\n   */\n  expectViewAndDirectionStates(\n      viewStates: Map<string, {viewState: string, arrowDirection: string}>) {\n    const sortHeaders = new Map([\n      ['defaultA', this.defaultA],\n      ['defaultB', this.defaultB],\n      ['overrideStart', this.overrideStart],\n      ['overrideDisableClear', this.overrideDisableClear]\n    ]);\n\n    viewStates.forEach((viewState, id) => {\n      expect(sortHeaders.get(id)!._getArrowViewState()).toEqual(viewState.viewState);\n      expect(sortHeaders.get(id)!._getArrowDirectionState()).toEqual(viewState.arrowDirection);\n    });\n  }\n}\n\n\nclass FakeDataSource extends DataSource<any> {\n  connect(collectionViewer: CollectionViewer): Observable<any[]> {\n    return collectionViewer.viewChange.pipe(map(() => []));\n  }\n  disconnect() {}\n}\n\n@Component({\n  template: `\n    <cdk-table [dataSource]=\"dataSource\" matSort>\n      <ng-container cdkColumnDef=\"column_a\">\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderA mat-sort-header> Column A </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.a}} </cdk-cell>\n      </ng-container>\n\n      <ng-container cdkColumnDef=\"column_b\">\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderB mat-sort-header> Column B </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.b}} </cdk-cell>\n      </ng-container>\n\n      <ng-container cdkColumnDef=\"column_c\">\n        <cdk-header-cell *cdkHeaderCellDef #sortHeaderC mat-sort-header> Column C </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\"> {{row.c}} </cdk-cell>\n      </ng-container>\n\n      <cdk-header-row *cdkHeaderRowDef=\"columnsToRender\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnsToRender\"></cdk-row>\n    </cdk-table>\n  `\n})\nclass CdkTableMatSortApp {\n  @ViewChild(MatSort) matSort: MatSort;\n\n  dataSource = new FakeDataSource();\n  columnsToRender = ['column_a', 'column_b', 'column_c'];\n}\n\n@Component({\n  template: `\n    <mat-table [dataSource]=\"dataSource\" matSort>\n      <ng-container matColumnDef=\"column_a\">\n        <mat-header-cell *matHeaderCellDef #sortHeaderA mat-sort-header> Column A </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{row.a}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"column_b\">\n        <mat-header-cell *matHeaderCellDef #sortHeaderB mat-sort-header> Column B </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{row.b}} </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"column_c\">\n        <mat-header-cell *matHeaderCellDef #sortHeaderC mat-sort-header> Column C </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{row.c}} </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"columnsToRender\"></mat-header-row>\n      <mat-row *matRowDef=\"let row; columns: columnsToRender\"></mat-row>\n    </mat-table>\n  `\n})\nclass MatTableMatSortApp {\n  @ViewChild(MatSort) matSort: MatSort;\n\n  dataSource = new FakeDataSource();\n  columnsToRender = ['column_a', 'column_b', 'column_c'];\n}\n\n\n@Component({\n  template: `<div mat-sort-header=\"a\"> A </div>`\n})\nclass MatSortHeaderMissingMatSortApp { }\n\n\n@Component({\n  template: `\n    <div matSort>\n      <div mat-sort-header=\"duplicateId\"> A </div>\n      <div mat-sort-header=\"duplicateId\"> A </div>\n    </div>\n  `\n})\nclass MatSortDuplicateMatSortableIdsApp { }\n\n\n@Component({\n  template: `\n    <div matSort>\n      <div mat-sort-header> A </div>\n    </div>\n  `\n})\nclass MatSortableMissingIdApp { }\n\n\n@Component({\n  template: `\n    <div matSort matSortDirection=\"ascending\">\n      <div mat-sort-header=\"a\"> A </div>\n    </div>\n  `\n})\nclass MatSortableInvalidDirection { }\n"]}