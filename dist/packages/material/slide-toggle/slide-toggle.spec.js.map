{"version":3,"file":"slide-toggle.spec.js","sourceRoot":"","sources":["../../../../src/lib/slide-toggle/slide-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {BidiModule, Direction} from '@angular/cdk/bidi';\nimport {MutationObserverFactory} from '@angular/cdk/observers';\nimport {dispatchFakeEvent} from '@angular/cdk/testing';\nimport {Component} from '@angular/core';\nimport {\n  ComponentFixture,\n  fakeAsync,\n  flush,\n  flushMicrotasks,\n  TestBed,\n  tick,\n} from '@angular/core/testing';\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\nimport {TestGestureConfig} from '@angular/material/testing';\nimport {By, HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule} from './index';\nimport {MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS} from './slide-toggle-config';\n\ndescribe('MatSlideToggle without forms', () => {\n  let gestureConfig: TestGestureConfig;\n  let mutationObserverCallbacks: Function[];\n  let flushMutationObserver = () => mutationObserverCallbacks.forEach(callback => callback());\n\n  beforeEach(fakeAsync(() => {\n    mutationObserverCallbacks = [];\n\n    TestBed.configureTestingModule({\n      imports: [MatSlideToggleModule, BidiModule],\n      declarations: [\n        SlideToggleBasic,\n        SlideToggleWithTabindexAttr,\n        SlideToggleWithoutLabel,\n        SlideToggleProjectedLabel,\n        TextBindingComponent,\n      ],\n      providers: [\n        {provide: HAMMER_GESTURE_CONFIG, useFactory: () => gestureConfig = new TestGestureConfig()},\n        {\n          provide: MutationObserverFactory,\n          useValue: {\n            create: (callback: Function) => {\n              mutationObserverCallbacks.push(callback);\n              return {observe: () => {}, disconnect: () => {}};\n            }\n          }\n        }\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('basic behavior', () => {\n    let fixture: ComponentFixture<any>;\n\n    let testComponent: SlideToggleBasic;\n    let slideToggle: MatSlideToggle;\n    let slideToggleElement: HTMLElement;\n    let labelElement: HTMLLabelElement;\n    let inputElement: HTMLInputElement;\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleBasic);\n\n      // Enable jasmine spies on event functions, which may trigger at initialization\n      // of the slide-toggle component.\n      spyOn(fixture.debugElement.componentInstance, 'onSlideChange').and.callThrough();\n      spyOn(fixture.debugElement.componentInstance, 'onSlideClick').and.callThrough();\n\n      // Initialize the slide-toggle component, by triggering the first change detection cycle.\n      fixture.detectChanges();\n\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\n\n      testComponent = fixture.debugElement.componentInstance;\n      slideToggle = slideToggleDebug.componentInstance;\n      slideToggleElement = slideToggleDebug.nativeElement;\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\n    }));\n\n    it('should apply class based on color attribute', () => {\n      testComponent.slideColor = 'primary';\n      fixture.detectChanges();\n\n      expect(slideToggleElement.classList).toContain('mat-primary');\n\n      testComponent.slideColor = 'accent';\n      fixture.detectChanges();\n\n      expect(slideToggleElement.classList).toContain('mat-accent');\n    });\n\n    it('should correctly update the disabled property', () => {\n      expect(inputElement.disabled).toBeFalsy();\n\n      testComponent.isDisabled = true;\n      fixture.detectChanges();\n\n      expect(inputElement.disabled).toBeTruthy();\n    });\n\n    it('should correctly update the checked property', () => {\n      expect(slideToggle.checked).toBeFalsy();\n\n      testComponent.slideChecked = true;\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBeTruthy();\n    });\n\n    it('should set the toggle to checked on click', () => {\n      expect(slideToggle.checked).toBe(false);\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(slideToggleElement.classList).toContain('mat-checked');\n      expect(slideToggle.checked).toBe(true);\n    });\n\n    it('should not trigger the click event multiple times', () => {\n      // By default, when clicking on a label element, a generated click will be dispatched\n      // on the associated input element.\n      // Since we're using a label element and a visual hidden input, this behavior can led\n      // to an issue, where the click events on the slide-toggle are getting executed twice.\n\n      expect(slideToggle.checked).toBe(false);\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(slideToggleElement.classList).toContain('mat-checked');\n      expect(slideToggle.checked).toBe(true);\n      expect(testComponent.onSlideClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('should trigger the change event properly', () => {\n      expect(inputElement.checked).toBe(false);\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n      expect(testComponent.onSlideChange).toHaveBeenCalledTimes(1);\n    });\n\n    it('should not trigger the change event by changing the native value', fakeAsync(() => {\n      expect(inputElement.checked).toBe(false);\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      testComponent.slideChecked = true;\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n      tick();\n\n      expect(testComponent.onSlideChange).not.toHaveBeenCalled();\n    }));\n\n    it('should not trigger the change event on initialization', fakeAsync(() => {\n      expect(inputElement.checked).toBe(false);\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      testComponent.slideChecked = true;\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n      tick();\n\n      expect(testComponent.onSlideChange).not.toHaveBeenCalled();\n    }));\n\n    it('should add a suffix to the inputs id', () => {\n      testComponent.slideId = 'myId';\n      fixture.detectChanges();\n\n      expect(slideToggleElement.id).toBe('myId');\n      expect(inputElement.id).toBe(`${slideToggleElement.id}-input`);\n\n      testComponent.slideId = 'nextId';\n      fixture.detectChanges();\n\n      expect(slideToggleElement.id).toBe('nextId');\n      expect(inputElement.id).toBe(`${slideToggleElement.id}-input`);\n\n      testComponent.slideId = null;\n      fixture.detectChanges();\n\n      // Once the id binding is set to null, the id property should auto-generate a unique id.\n      expect(inputElement.id).toMatch(/mat-slide-toggle-\\d+-input/);\n    });\n\n    it('should forward the tabIndex to the underlying input', () => {\n      fixture.detectChanges();\n\n      expect(inputElement.tabIndex).toBe(0);\n\n      testComponent.slideTabindex = 4;\n      fixture.detectChanges();\n\n      expect(inputElement.tabIndex).toBe(4);\n    });\n\n    it('should forward the specified name to the input', () => {\n      testComponent.slideName = 'myName';\n      fixture.detectChanges();\n\n      expect(inputElement.name).toBe('myName');\n\n      testComponent.slideName = 'nextName';\n      fixture.detectChanges();\n\n      expect(inputElement.name).toBe('nextName');\n\n      testComponent.slideName = null;\n      fixture.detectChanges();\n\n      expect(inputElement.name).toBe('');\n    });\n\n    it('should forward the aria-label attribute to the input', () => {\n      testComponent.slideLabel = 'ariaLabel';\n      fixture.detectChanges();\n\n      expect(inputElement.getAttribute('aria-label')).toBe('ariaLabel');\n\n      testComponent.slideLabel = null;\n      fixture.detectChanges();\n\n      expect(inputElement.hasAttribute('aria-label')).toBeFalsy();\n    });\n\n    it('should forward the aria-labelledby attribute to the input', () => {\n      testComponent.slideLabelledBy = 'ariaLabelledBy';\n      fixture.detectChanges();\n\n      expect(inputElement.getAttribute('aria-labelledby')).toBe('ariaLabelledBy');\n\n      testComponent.slideLabelledBy = null;\n      fixture.detectChanges();\n\n      expect(inputElement.hasAttribute('aria-labelledby')).toBeFalsy();\n    });\n\n    it('should set the `for` attribute to the id of the input element', () => {\n      expect(labelElement.getAttribute('for')).toBeTruthy();\n      expect(inputElement.getAttribute('id')).toBeTruthy();\n      expect(labelElement.getAttribute('for')).toBe(inputElement.getAttribute('id'));\n    });\n\n    it('should emit the new values properly', fakeAsync(() => {\n      labelElement.click();\n      fixture.detectChanges();\n      tick();\n\n      // We're checking the arguments type / emitted value to be a boolean, because sometimes the\n      // emitted value can be a DOM Event, which is not valid.\n      // See angular/angular#4059\n      expect(testComponent.lastEvent.checked).toBe(true);\n    }));\n\n    it('should support subscription on the change observable', fakeAsync(() => {\n      const spy = jasmine.createSpy('change spy');\n      const subscription = slideToggle.change.subscribe(spy);\n\n      labelElement.click();\n      fixture.detectChanges();\n      tick();\n\n      expect(spy).toHaveBeenCalledWith(jasmine.objectContaining({checked: true}));\n      subscription.unsubscribe();\n    }));\n\n    it('should forward the required attribute', () => {\n      testComponent.isRequired = true;\n      fixture.detectChanges();\n\n      expect(inputElement.required).toBe(true);\n\n      testComponent.isRequired = false;\n      fixture.detectChanges();\n\n      expect(inputElement.required).toBe(false);\n    });\n\n    it('should focus on underlying input element when focus() is called', () => {\n      expect(document.activeElement).not.toBe(inputElement);\n\n      slideToggle.focus();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(inputElement);\n    });\n\n    it('should focus on underlying input element when the host is focused', () => {\n      expect(document.activeElement).not.toBe(inputElement);\n\n      slideToggleElement.focus();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(inputElement);\n    });\n\n    it('should set a element class if labelPosition is set to before', () => {\n      expect(slideToggleElement.classList).not.toContain('mat-slide-toggle-label-before');\n\n      testComponent.labelPosition = 'before';\n      fixture.detectChanges();\n\n      expect(slideToggleElement.classList).toContain('mat-slide-toggle-label-before');\n    });\n\n    it('should show ripples on label mousedown', () => {\n      const rippleSelector = '.mat-ripple-element:not(.mat-slide-toggle-persistent-ripple)';\n\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\n\n      dispatchFakeEvent(labelElement, 'mousedown');\n      dispatchFakeEvent(labelElement, 'mouseup');\n\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(1);\n    });\n\n    it('should not show ripples when disableRipple is set', () => {\n      const rippleSelector = '.mat-ripple-element:not(.mat-slide-toggle-persistent-ripple)';\n      testComponent.disableRipple = true;\n      fixture.detectChanges();\n\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\n\n      dispatchFakeEvent(labelElement, 'mousedown');\n      dispatchFakeEvent(labelElement, 'mouseup');\n\n      expect(slideToggleElement.querySelectorAll(rippleSelector).length).toBe(0);\n    });\n  });\n\n  describe('custom template', () => {\n    it('should not trigger the change event on initialization', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SlideToggleBasic);\n\n      fixture.componentInstance.slideChecked = true;\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.lastEvent).toBeFalsy();\n    }));\n\n    it('should be able to set the tabindex via the native attribute', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SlideToggleWithTabindexAttr);\n\n      fixture.detectChanges();\n\n      const slideToggle = fixture.debugElement\n        .query(By.directive(MatSlideToggle)).componentInstance as MatSlideToggle;\n\n      expect(slideToggle.tabIndex)\n        .toBe(5, 'Expected tabIndex property to have been set based on the native attribute');\n    }));\n\n    it('should clear the tabindex from the host element', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SlideToggleWithTabindexAttr);\n\n      fixture.detectChanges();\n\n      const slideToggle = fixture.debugElement.query(By.directive(MatSlideToggle)).nativeElement;\n      expect(slideToggle.getAttribute('tabindex')).toBe('-1');\n    }));\n  });\n\n  describe('custom action configuration', () => {\n    it('should not change value on click when click action is noop', fakeAsync(() => {\n      TestBed\n        .resetTestingModule()\n        .configureTestingModule({\n          imports: [MatSlideToggleModule],\n          declarations: [SlideToggleBasic],\n          providers: [\n            {\n              provide: HAMMER_GESTURE_CONFIG,\n              useFactory: () => gestureConfig = new TestGestureConfig()\n            },\n            {provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: {disableToggleValue: true}},\n          ]\n        });\n      const fixture = TestBed.createComponent(SlideToggleBasic);\n      const testComponent = fixture.debugElement.componentInstance;\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\n\n      const slideToggle = slideToggleDebug.componentInstance;\n      const inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n      const labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\n\n      expect(testComponent.toggleTriggered).toBe(0);\n      expect(testComponent.dragTriggered).toBe(0);\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n\n      labelElement.click();\n      fixture.detectChanges();\n\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n      expect(testComponent.toggleTriggered).toBe(1, 'Expect toggle once');\n      expect(testComponent.dragTriggered).toBe(0);\n\n      inputElement.click();\n      fixture.detectChanges();\n\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n      expect(testComponent.toggleTriggered).toBe(2, 'Expect toggle twice');\n      expect(testComponent.dragTriggered).toBe(0);\n    }));\n\n    it('should not change value on dragging when drag action is noop', fakeAsync(() => {\n      TestBed\n        .resetTestingModule()\n        .configureTestingModule({\n          imports: [MatSlideToggleModule],\n          declarations: [SlideToggleBasic],\n          providers: [\n            {\n              provide: HAMMER_GESTURE_CONFIG,\n              useFactory: () => gestureConfig = new TestGestureConfig()\n            },\n            {provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: {disableDragValue: true}},\n          ]\n        });\n      const fixture = TestBed.createComponent(SlideToggleBasic);\n      const testComponent = fixture.debugElement.componentInstance;\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\n      const thumbContainerDebug = slideToggleDebug\n        .query(By.css('.mat-slide-toggle-thumb-container'));\n\n      const slideThumbContainer = thumbContainerDebug.nativeElement;\n      const slideToggle = slideToggleDebug.componentInstance;\n\n      expect(testComponent.toggleTriggered).toBe(0);\n      expect(testComponent.dragTriggered).toBe(0);\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(false, 'Expect slide toggle value not changed');\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n      expect(testComponent.lastEvent).toBeUndefined();\n      expect(testComponent.toggleTriggered).toBe(0);\n      expect(testComponent.dragTriggered).toBe(1, 'Expect drag once');\n    }));\n  });\n\n  describe('with dragging', () => {\n    let fixture: ComponentFixture<any>;\n\n    let testComponent: SlideToggleBasic;\n    let slideToggle: MatSlideToggle;\n    let slideToggleElement: HTMLElement;\n    let slideThumbContainer: HTMLElement;\n    let inputElement: HTMLInputElement;\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleBasic);\n      fixture.detectChanges();\n\n      const slideToggleDebug = fixture.debugElement.query(By.css('mat-slide-toggle'));\n      const thumbContainerDebug = slideToggleDebug\n          .query(By.css('.mat-slide-toggle-thumb-container'));\n\n      testComponent = fixture.debugElement.componentInstance;\n      slideToggle = slideToggleDebug.componentInstance;\n      slideToggleElement = slideToggleDebug.nativeElement;\n      slideThumbContainer = thumbContainerDebug.nativeElement;\n\n      inputElement = slideToggleElement.querySelector('input')!;\n    }));\n\n    it('should drag from start to end', fakeAsync(() => {\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(true);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n\n    it('should drag from start to end in RTL', fakeAsync(() => {\n      testComponent.direction = 'rtl';\n      fixture.detectChanges();\n\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: -200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(true);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n\n    it('should drag from end to start', fakeAsync(() => {\n      slideToggle.checked = true;\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: -200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(false);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n\n    it('should drag from end to start in RTL', fakeAsync(() => {\n      testComponent.direction = 'rtl';\n      fixture.detectChanges();\n\n      slideToggle.checked = true;\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(false);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n\n    it('should not drag when disabled', fakeAsync(() => {\n      slideToggle.disabled = true;\n\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(false);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n\n    it('should emit a change event after drag', fakeAsync(() => {\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideToggle.checked).toBe(true);\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n      expect(testComponent.lastEvent.checked).toBe(true);\n    }));\n\n    it('should not emit a change event when the value did not change', fakeAsync(() => {\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, { deltaX: 0 });\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n      expect(slideToggle.checked).toBe(false);\n      expect(testComponent.lastEvent)\n          .toBeFalsy('Expected the slide-toggle to not emit a change event.');\n    }));\n\n    it('should ignore clicks on the label element while dragging', fakeAsync(() => {\n      expect(slideToggle.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n\n      expect(slideToggle.checked).toBe(true);\n\n      // Fake a change event that has been fired after dragging through the click on pointer\n      // release (noticeable on IE11, Edge)\n      inputElement.checked = false;\n      dispatchFakeEvent(inputElement, 'change');\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n      expect(slideToggle.checked).toBe(true);\n    }));\n\n    it('should update the checked property of the input', fakeAsync(() => {\n      expect(inputElement.checked).toBe(false);\n\n      gestureConfig.emitEventForElement('slidestart', slideThumbContainer);\n\n      expect(slideThumbContainer.classList).toContain('mat-dragging');\n\n      gestureConfig.emitEventForElement('slide', slideThumbContainer, {\n        deltaX: 200 // Arbitrary, large delta that will be clamped to the end of the slide-toggle.\n      });\n\n      gestureConfig.emitEventForElement('slideend', slideThumbContainer);\n      fixture.detectChanges();\n\n      expect(inputElement.checked).toBe(true);\n\n      // Flush the timeout for the slide ending.\n      tick();\n\n      expect(slideThumbContainer.classList).not.toContain('mat-dragging');\n    }));\n  });\n\n  describe('without label', () => {\n    let fixture: ComponentFixture<SlideToggleWithoutLabel>;\n    let testComponent: SlideToggleWithoutLabel;\n    let slideToggleBarElement: HTMLElement;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SlideToggleWithoutLabel);\n\n      const slideToggleDebugEl = fixture.debugElement.query(By.directive(MatSlideToggle));\n\n      testComponent = fixture.componentInstance;\n      slideToggleBarElement = slideToggleDebugEl\n          .query(By.css('.mat-slide-toggle-bar')).nativeElement;\n    });\n\n    it('should remove margin for slide-toggle without a label', () => {\n      fixture.detectChanges();\n\n      expect(slideToggleBarElement.classList)\n        .toContain('mat-slide-toggle-bar-no-side-margin');\n    });\n\n    it('should not remove margin if initial label is set through binding', fakeAsync(() => {\n      testComponent.label = 'Some content';\n      fixture.detectChanges();\n\n      expect(slideToggleBarElement.classList)\n        .not.toContain('mat-slide-toggle-bar-no-side-margin');\n    }));\n\n    it('should re-add margin if label is added asynchronously', fakeAsync(() => {\n      fixture.detectChanges();\n\n      expect(slideToggleBarElement.classList)\n        .toContain('mat-slide-toggle-bar-no-side-margin');\n\n      testComponent.label = 'Some content';\n      fixture.detectChanges();\n      flushMutationObserver();\n      fixture.detectChanges();\n\n      expect(slideToggleBarElement.classList)\n        .not.toContain('mat-slide-toggle-bar-no-side-margin');\n    }));\n  });\n\n  describe('label margin', () => {\n    let fixture: ComponentFixture<SlideToggleProjectedLabel>;\n    let slideToggleBarElement: HTMLElement;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SlideToggleProjectedLabel);\n      slideToggleBarElement = fixture.debugElement\n        .query(By.css('.mat-slide-toggle-bar')).nativeElement;\n\n      fixture.detectChanges();\n    });\n\n    it('should properly update margin if label content is projected', () => {\n      // Do not run the change detection for the fixture manually because we want to verify\n      // that the slide-toggle properly toggles the margin class even if the observe content\n      // output fires outside of the zone.\n      flushMutationObserver();\n\n      expect(slideToggleBarElement.classList).not\n        .toContain('mat-slide-toggle-bar-no-side-margin');\n    });\n  });\n});\n\ndescribe('MatSlideToggle with forms', () => {\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [MatSlideToggleModule, FormsModule, ReactiveFormsModule],\n      declarations: [\n        SlideToggleWithForm,\n        SlideToggleWithModel,\n        SlideToggleWithFormControl,\n        SlideToggleWithModelAndChangeEvent,\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('using ngModel', () => {\n    let fixture: ComponentFixture<SlideToggleWithModel>;\n\n    let testComponent: SlideToggleWithModel;\n    let slideToggle: MatSlideToggle;\n    let slideToggleElement: HTMLElement;\n    let slideToggleModel: NgModel;\n    let inputElement: HTMLInputElement;\n    let labelElement: HTMLLabelElement;\n\n    // This initialization is async() because it needs to wait for ngModel to set the initial value.\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleWithModel);\n      fixture.detectChanges();\n\n      const slideToggleDebug = fixture.debugElement.query(By.directive(MatSlideToggle));\n\n      testComponent = fixture.debugElement.componentInstance;\n      slideToggle = slideToggleDebug.componentInstance;\n      slideToggleElement = slideToggleDebug.nativeElement;\n      slideToggleModel = slideToggleDebug.injector.get<NgModel>(NgModel);\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\n    }));\n\n    it('should be initially set to ng-pristine', () => {\n      expect(slideToggleElement.classList).toContain('ng-pristine');\n      expect(slideToggleElement.classList).not.toContain('ng-dirty');\n    });\n\n    it('should update the model programmatically', fakeAsync(() => {\n      expect(slideToggleElement.classList).not.toContain('mat-checked');\n\n      testComponent.modelValue = true;\n      fixture.detectChanges();\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flushMicrotasks();\n\n      fixture.detectChanges();\n      expect(slideToggleElement.classList).toContain('mat-checked');\n    }));\n\n    it('should have the correct control state initially and after interaction', fakeAsync(() => {\n      // The control should start off valid, pristine, and untouched.\n      expect(slideToggleModel.valid).toBe(true);\n      expect(slideToggleModel.pristine).toBe(true);\n      expect(slideToggleModel.touched).toBe(false);\n\n      // After changing the value from the view, the control should\n      // become dirty (not pristine), but remain untouched if focus is still there.\n      slideToggle.checked = true;\n\n      // Dispatch a change event on the input element to fake a user interaction that triggered\n      // the state change.\n      dispatchFakeEvent(inputElement, 'change');\n\n      expect(slideToggleModel.valid).toBe(true);\n      expect(slideToggleModel.pristine).toBe(false);\n      expect(slideToggleModel.touched).toBe(false);\n\n      // Once the input element loses focus, the control should remain dirty but should\n      // also turn touched.\n      dispatchFakeEvent(inputElement, 'blur');\n      fixture.detectChanges();\n      flushMicrotasks();\n\n      expect(slideToggleModel.valid).toBe(true);\n      expect(slideToggleModel.pristine).toBe(false);\n      expect(slideToggleModel.touched).toBe(true);\n    }));\n\n    it('should not throw an error when disabling while focused', fakeAsync(() => {\n      expect(() => {\n        // Focus the input element because after disabling, the `blur` event should automatically\n        // fire and not result in a changed after checked exception. Related: #12323\n        inputElement.focus();\n\n        // Flush the two nested timeouts from the FocusMonitor that are being created on `focus`.\n        flush();\n\n        slideToggle.disabled = true;\n        fixture.detectChanges();\n        flushMicrotasks();\n      }).not.toThrow();\n    }));\n\n    it('should not set the control to touched when changing the state programmatically',\n        fakeAsync(() => {\n\n      // The control should start off with being untouched.\n      expect(slideToggleModel.touched).toBe(false);\n\n      slideToggle.checked = true;\n      fixture.detectChanges();\n\n      expect(slideToggleModel.touched).toBe(false);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n\n      // Once the input element loses focus, the control should remain dirty but should\n      // also turn touched.\n      dispatchFakeEvent(inputElement, 'blur');\n      fixture.detectChanges();\n      flushMicrotasks();\n\n      expect(slideToggleModel.touched).toBe(true);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n    }));\n\n    it('should not set the control to touched when changing the model', fakeAsync(() => {\n      // The control should start off with being untouched.\n      expect(slideToggleModel.touched).toBe(false);\n\n      testComponent.modelValue = true;\n      fixture.detectChanges();\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flushMicrotasks();\n\n      // The checked property has been updated from the model and now the view needs\n      // to reflect the state change.\n      fixture.detectChanges();\n\n      expect(slideToggleModel.touched).toBe(false);\n      expect(slideToggle.checked).toBe(true);\n      expect(slideToggleElement.classList).toContain('mat-checked');\n    }));\n\n    it('should update checked state on click if control is checked initially', fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleWithModel);\n      slideToggle = fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance;\n      labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\n\n      fixture.componentInstance.modelValue = true;\n      fixture.detectChanges();\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flushMicrotasks();\n\n      // Now the new checked variable has been updated in the slide-toggle and the slide-toggle\n      // is marked for check because it still needs to update the underlying input.\n      fixture.detectChanges();\n\n      expect(slideToggle.checked)\n        .toBe(true, 'Expected slide-toggle to be checked initially');\n\n      labelElement.click();\n      fixture.detectChanges();\n      tick();\n\n      expect(slideToggle.checked)\n        .toBe(false, 'Expected slide-toggle to be no longer checked after label click.');\n    }));\n\n    it('should be pristine if initial value is set from NgModel', fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleWithModel);\n\n      fixture.componentInstance.modelValue = true;\n      fixture.detectChanges();\n\n      const debugElement = fixture.debugElement.query(By.directive(MatSlideToggle));\n      const modelInstance = debugElement.injector.get<NgModel>(NgModel);\n\n      // Flush the microtasks because the forms module updates the model state asynchronously.\n      flushMicrotasks();\n\n      expect(modelInstance.pristine).toBe(true);\n    }));\n\n    it('should set the model value when toggling via the `toggle` method', fakeAsync(() => {\n      expect(testComponent.modelValue).toBe(false);\n\n      fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance.toggle();\n      fixture.detectChanges();\n      flushMicrotasks();\n\n      fixture.detectChanges();\n      expect(testComponent.modelValue).toBe(true);\n    }));\n\n  });\n\n  describe('with a FormControl', () => {\n    let fixture: ComponentFixture<SlideToggleWithFormControl>;\n\n    let testComponent: SlideToggleWithFormControl;\n    let slideToggle: MatSlideToggle;\n    let inputElement: HTMLInputElement;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SlideToggleWithFormControl);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n      slideToggle = fixture.debugElement.query(By.directive(MatSlideToggle)).componentInstance;\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n    });\n\n    it('should toggle the disabled state', () => {\n      expect(slideToggle.disabled).toBe(false);\n      expect(inputElement.disabled).toBe(false);\n\n      testComponent.formControl.disable();\n      fixture.detectChanges();\n\n      expect(slideToggle.disabled).toBe(true);\n      expect(inputElement.disabled).toBe(true);\n\n      testComponent.formControl.enable();\n      fixture.detectChanges();\n\n      expect(slideToggle.disabled).toBe(false);\n      expect(inputElement.disabled).toBe(false);\n    });\n  });\n\n  describe('with form element', () => {\n    let fixture: ComponentFixture<any>;\n    let testComponent: SlideToggleWithForm;\n    let buttonElement: HTMLButtonElement;\n    let inputElement: HTMLInputElement;\n\n    // This initialization is async() because it needs to wait for ngModel to set the initial value.\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(SlideToggleWithForm);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n      buttonElement = fixture.debugElement.query(By.css('button')).nativeElement;\n      inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\n    }));\n\n    it('should prevent the form from submit when being required', () => {\n      if (typeof (inputElement as any).reportValidity === 'undefined') {\n        // If the browser does not report the validity then the tests will break.\n        // e.g Safari 8 on Mobile.\n        return;\n      }\n\n      testComponent.isRequired = true;\n\n      fixture.detectChanges();\n\n      buttonElement.click();\n      fixture.detectChanges();\n\n      expect(testComponent.isSubmitted).toBe(false);\n\n      testComponent.isRequired = false;\n      fixture.detectChanges();\n\n      buttonElement.click();\n      fixture.detectChanges();\n\n      expect(testComponent.isSubmitted).toBe(true);\n    });\n  });\n\n  describe('with model and change event', () => {\n    it('should report changes to NgModel before emitting change event', () => {\n      const fixture = TestBed.createComponent(SlideToggleWithModelAndChangeEvent);\n      fixture.detectChanges();\n\n      const labelEl = fixture.debugElement.query(By.css('label')).nativeElement;\n\n      spyOn(fixture.componentInstance, 'onChange').and.callFake(() => {\n        expect(fixture.componentInstance.checked)\n          .toBe(true, 'Expected the model value to have changed before the change event fired.');\n      });\n\n      labelEl.click();\n\n      expect(fixture.componentInstance.onChange).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n\n@Component({\n  template: `\n    <mat-slide-toggle [dir]=\"direction\" [required]=\"isRequired\"\n                     [disabled]=\"isDisabled\"\n                     [color]=\"slideColor\"\n                     [id]=\"slideId\"\n                     [checked]=\"slideChecked\"\n                     [name]=\"slideName\"\n                     [aria-label]=\"slideLabel\"\n                     [aria-labelledby]=\"slideLabelledBy\"\n                     [tabIndex]=\"slideTabindex\"\n                     [labelPosition]=\"labelPosition\"\n                     [disableRipple]=\"disableRipple\"\n                     (toggleChange)=\"onSlideToggleChange()\"\n                     (dragChange)=\"onSlideDragChange()\"\n                     (change)=\"onSlideChange($event)\"\n                     (click)=\"onSlideClick($event)\">\n      <span>Test Slide Toggle</span>\n    </mat-slide-toggle>`,\n})\nclass SlideToggleBasic {\n  isDisabled: boolean = false;\n  isRequired: boolean = false;\n  disableRipple: boolean = false;\n  slideChecked: boolean = false;\n  slideColor: string;\n  slideId: string | null;\n  slideName: string | null;\n  slideLabel: string | null;\n  slideLabelledBy: string | null;\n  slideTabindex: number;\n  lastEvent: MatSlideToggleChange;\n  labelPosition: string;\n  toggleTriggered: number = 0;\n  dragTriggered: number = 0;\n  direction: Direction = 'ltr';\n\n  onSlideClick: (event?: Event) => void = () => {};\n  onSlideChange = (event: MatSlideToggleChange) => this.lastEvent = event;\n  onSlideToggleChange = () => this.toggleTriggered++;\n  onSlideDragChange = () => this.dragTriggered++;\n}\n\n@Component({\n  template: `\n    <form ngNativeValidate (ngSubmit)=\"isSubmitted = true\">\n      <mat-slide-toggle name=\"slide\" ngModel [required]=\"isRequired\">Required</mat-slide-toggle>\n      <button type=\"submit\"></button>\n    </form>`\n})\nclass SlideToggleWithForm {\n  isSubmitted: boolean = false;\n  isRequired: boolean = false;\n}\n\n@Component({\n  template: `<mat-slide-toggle [(ngModel)]=\"modelValue\"></mat-slide-toggle>`\n})\nclass SlideToggleWithModel {\n  modelValue = false;\n}\n\n@Component({\n  template: `\n    <mat-slide-toggle [formControl]=\"formControl\">\n      <span>Test Slide Toggle</span>\n    </mat-slide-toggle>`,\n})\nclass SlideToggleWithFormControl {\n  formControl = new FormControl();\n}\n\n@Component({\n  template: `<mat-slide-toggle tabindex=\"5\"></mat-slide-toggle>`\n})\nclass SlideToggleWithTabindexAttr {}\n\n@Component({\n  template: `<mat-slide-toggle>{{label}}</mat-slide-toggle>`\n})\nclass SlideToggleWithoutLabel {\n  label: string;\n}\n\n@Component({\n  template: `<mat-slide-toggle [(ngModel)]=\"checked\" (change)=\"onChange()\"></mat-slide-toggle>`\n})\nclass SlideToggleWithModelAndChangeEvent {\n  checked: boolean;\n  onChange: () => void = () => {};\n}\n\n@Component({\n  template: `<mat-slide-toggle><some-text></some-text></mat-slide-toggle>`\n})\nclass SlideToggleProjectedLabel {}\n\n@Component({\n  selector: 'some-text',\n  template: `<span>{{text}}</span>`\n})\nclass TextBindingComponent {\n  text: string = 'Some text';\n}\n"]}