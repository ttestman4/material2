{"version":3,"file":"test-gesture-config.js","sourceRoot":"","sources":["../../../../src/lib/testing/test-gesture-config.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;;;;;;;;AAEH,sCAAyC;AACzC,+CAAoE;AAEpE;;;GAGG;AAEH;IAAuC,qCAAa;IADpD;QAAA,qEAmCC;QAjCC;;;WAGG;QACH,qBAAe,GAAsC,IAAI,GAAG,EAAgC,CAAC;;IA6B/F,CAAC;IA3BC;;OAEG;IACH,uCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAI,EAAE,GAAG,iBAAM,WAAW,YAAC,OAAO,CAAkB,CAAC;QACrD,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEjD,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACnB;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACzC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,+CAAmB,GAAnB,UAAoB,SAAiB,EAAE,OAAoB,EAAE,SAAc;QAAd,0BAAA,EAAA,cAAc;QACzE,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAElD,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAnC,CAAmC,CAAC,CAAC;SACpE;IACH,CAAC;IAjCU,iBAAiB;QAD7B,iBAAU,EAAE;OACA,iBAAiB,CAkC7B;IAAD,wBAAC;CAAA,AAlCD,CAAuC,oBAAa,GAkCnD;AAlCY,8CAAiB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {GestureConfig, HammerManager} from '@angular/material/core';\n\n/**\n * An extension of GestureConfig that exposes the underlying HammerManager instances.\n * Tests can use these instances to emit fake gesture events.\n */\n@Injectable()\nexport class TestGestureConfig extends GestureConfig {\n  /**\n   * A map of Hammer instances to element.\n   * Used to emit events over instances for an element.\n   */\n  hammerInstances: Map<HTMLElement, HammerManager[]> = new Map<HTMLElement, HammerManager[]>();\n\n  /**\n   * Create a mapping of Hammer instances to element so that events can be emitted during testing.\n   */\n  buildHammer(element: HTMLElement) {\n    let mc = super.buildHammer(element) as HammerManager;\n    let instance = this.hammerInstances.get(element);\n\n    if (instance) {\n      instance.push(mc);\n    } else {\n      this.hammerInstances.set(element, [mc]);\n    }\n\n    return mc;\n  }\n\n  /**\n   * The Angular event plugin for Hammer creates a new HammerManager instance for each listener,\n   * so we need to apply our event on all instances to hit the correct listener.\n   */\n  emitEventForElement(eventType: string, element: HTMLElement, eventData = {}) {\n    let instances = this.hammerInstances.get(element);\n\n    if (instances) {\n      instances.forEach(instance => instance.emit(eventType, eventData));\n    }\n  }\n}\n"]}