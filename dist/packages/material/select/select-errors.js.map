{"version":3,"file":"select-errors.js","sourceRoot":"","sources":["../../../../src/lib/select/select-errors.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAaA,MAAM,UAAU,gCAAgC;IAC9C,OAAO,KAAK,CAAC,+DAA+D,CAAC,CAAC;AAChF,CAAC;;;;;;;;AAQD,MAAM,UAAU,8BAA8B;IAC5C,OAAO,KAAK,CAAC,oDAAoD,CAAC,CAAC;AACrE,CAAC;;;;;;;AAOD,MAAM,UAAU,iCAAiC;IAC/C,OAAO,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACpD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n"]}