{"version":3,"file":"toolbar.spec.js","sourceRoot":"","sources":["../../../../src/lib/toolbar/toolbar.spec.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAwC;AACxC,iDAAyF;AACzF,8DAA6C;AAC7C,iCAAyC;AAEzC,QAAQ,CAAC,YAAY,EAAE;IAErB,UAAU,CAAC,eAAK,CAAC;QACf,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,wBAAgB,CAAC;YAC3B,YAAY,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,oBAAoB,CAAC;SAC5E,CAAC,CAAC;QAEH,iBAAO,CAAC,iBAAiB,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC,CAAC;IAEJ,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,IAAI,OAA2C,CAAC;QAChD,IAAI,aAA+B,CAAC;QACpC,IAAI,cAA2B,CAAC;QAEhC,UAAU,CAAC;YACT,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YACpD,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;YACvD,cAAc,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa,CAAC;QACpF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE;YAChD,aAAa,CAAC,YAAY,GAAG,SAAS,CAAC;YACvC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpE,aAAa,CAAC,YAAY,GAAG,QAAQ,CAAC;YACtC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrE,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnE,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC;YACpC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpE,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE;YACzE,MAAM,CAAC,cAAc,CAAC,iBAAkB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,EACzD,kFAAkF,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE;QAE7B,EAAE,CAAC,+DAA+D,EAAE;YAClE,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAC7D,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAE,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC,MAAM,CAAC;iBACpF,IAAI,CAAC,CAAC,EAAE,uEAAuE,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE;YAC/D,MAAM,CAAC;gBACL,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;gBAC9D,OAAO,CAAC,aAAa,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,mBAAS,CAAC;YACpE,IAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAE9D,OAAO,CAAC,iBAAiB,CAAC,cAAc,GAAG,KAAK,CAAC;YACjD,OAAO,CAAC,aAAa,EAAE,CAAC;YACxB,eAAK,EAAE,CAAC;YAER,MAAM,CAAC;gBACL,IAAI;oBACF,OAAO,CAAC,iBAAiB,CAAC,cAAc,GAAG,IAAI,CAAC;oBAChD,OAAO,CAAC,aAAa,EAAE,CAAC;oBACxB,eAAK,EAAE,CAAC;iBACT;gBAAC,WAAM;oBACN,eAAK,EAAE,CAAC;iBACT;YACH,CAAC,CAAC,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAUH;IAAA;IAEA,CAAC;IAFK,gBAAgB;QAPrB,gBAAS,CAAC;YACT,QAAQ,EAAE,oGAIT;SACF,CAAC;OACI,gBAAgB,CAErB;IAAD,uBAAC;CAAA,AAFD,IAEC;AAUD;IAAA;IAA2B,CAAC;IAAtB,mBAAmB;QARxB,gBAAS,CAAC;YACT,QAAQ,EAAE,sJAKT;SACF,CAAC;OACI,mBAAmB,CAAG;IAAD,0BAAC;CAAA,AAA5B,IAA4B;AAU5B;IARA;QASE,mBAAc,GAAY,IAAI,CAAC;IACjC,CAAC;IAFK,oBAAoB;QARzB,gBAAS,CAAC;YACT,QAAQ,EAAE,4IAKT;SACF,CAAC;OACI,oBAAoB,CAEzB;IAAD,2BAAC;CAAA,AAFD,IAEC","sourcesContent":["import {Component} from '@angular/core';\nimport {TestBed, async, ComponentFixture, fakeAsync, flush} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {MatToolbarModule} from './index';\n\ndescribe('MatToolbar', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatToolbarModule],\n      declarations: [ToolbarSingleRow, ToolbarMultipleRows, ToolbarMixedRowModes],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('with single row', () => {\n    let fixture: ComponentFixture<ToolbarSingleRow>;\n    let testComponent: ToolbarSingleRow;\n    let toolbarElement: HTMLElement;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ToolbarSingleRow);\n      testComponent = fixture.debugElement.componentInstance;\n      toolbarElement = fixture.debugElement.query(By.css('.mat-toolbar')).nativeElement;\n    });\n\n    it('should apply class based on color attribute', () => {\n      testComponent.toolbarColor = 'primary';\n      fixture.detectChanges();\n\n      expect(toolbarElement.classList.contains('mat-primary')).toBe(true);\n\n      testComponent.toolbarColor = 'accent';\n      fixture.detectChanges();\n\n      expect(toolbarElement.classList.contains('mat-primary')).toBe(false);\n      expect(toolbarElement.classList.contains('mat-accent')).toBe(true);\n\n      testComponent.toolbarColor = 'warn';\n      fixture.detectChanges();\n\n      expect(toolbarElement.classList.contains('mat-accent')).toBe(false);\n      expect(toolbarElement.classList.contains('mat-warn')).toBe(true);\n    });\n\n    it('should not wrap the first row contents inside of a generated element', () => {\n      expect(toolbarElement.firstElementChild!.tagName).toBe('SPAN',\n          'Expected the <span> element of the first row to be a direct child of the toolbar');\n    });\n  });\n\n  describe('with multiple rows', () => {\n\n    it('should project each toolbar-row element inside of the toolbar', () => {\n      const fixture = TestBed.createComponent(ToolbarMultipleRows);\n      fixture.detectChanges();\n\n      expect(fixture.debugElement.queryAll(By.css('.mat-toolbar > .mat-toolbar-row')).length)\n        .toBe(2, 'Expected one toolbar row to be present while no content is projected.');\n    });\n\n    it('should throw an error if different toolbar modes are mixed', () => {\n      expect(() => {\n        const fixture = TestBed.createComponent(ToolbarMixedRowModes);\n        fixture.detectChanges();\n      }).toThrowError(/attempting to combine different/i);\n    });\n\n    it('should throw an error if a toolbar-row is added later', fakeAsync(() => {\n      const fixture = TestBed.createComponent(ToolbarMixedRowModes);\n\n      fixture.componentInstance.showToolbarRow = false;\n      fixture.detectChanges();\n      flush();\n\n      expect(() => {\n        try {\n          fixture.componentInstance.showToolbarRow = true;\n          fixture.detectChanges();\n          flush();\n        } catch {\n          flush();\n        }\n      }).toThrowError(/attempting to combine different/i);\n    }));\n  });\n\n});\n\n\n@Component({\n  template: `\n    <mat-toolbar [color]=\"toolbarColor\">\n      <span>First Row</span>\n    </mat-toolbar>\n  `\n})\nclass ToolbarSingleRow {\n  toolbarColor: string;\n}\n\n@Component({\n  template: `\n    <mat-toolbar>\n      <mat-toolbar-row>First Row</mat-toolbar-row>\n      <mat-toolbar-row>Second Row</mat-toolbar-row>\n    </mat-toolbar>\n  `\n})\nclass ToolbarMultipleRows {}\n\n@Component({\n  template: `\n    <mat-toolbar>\n      First Row\n      <mat-toolbar-row *ngIf=\"showToolbarRow\">Second Row</mat-toolbar-row>\n    </mat-toolbar>\n  `\n})\nclass ToolbarMixedRowModes {\n  showToolbarRow: boolean = true;\n}\n"]}