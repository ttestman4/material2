{"version":3,"file":"calendar-header.spec.js","sourceRoot":"","sources":["../../../../src/lib/datepicker/calendar-header.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\nimport {Component} from '@angular/core';\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {DEC, FEB, JAN} from '@angular/material/testing';\nimport {By} from '@angular/platform-browser';\nimport {MatCalendar} from './calendar';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerModule} from './datepicker-module';\nimport {yearsPerPage} from './multi-year-view';\n\ndescribe('MatCalendarHeader', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        MatNativeDateModule,\n        MatDatepickerModule,\n      ],\n      declarations: [\n        // Test components.\n        StandardCalendar,\n      ],\n      providers: [\n        MatDatepickerIntl,\n        {provide: Directionality, useFactory: () => ({value: 'ltr'})},\n      ],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('standard calendar', () => {\n    let fixture: ComponentFixture<StandardCalendar>;\n    let testComponent: StandardCalendar;\n    let calendarElement: HTMLElement;\n    let periodButton: HTMLElement;\n    let prevButton: HTMLElement;\n    let nextButton: HTMLElement;\n    let calendarInstance: MatCalendar<Date>;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(StandardCalendar);\n      fixture.detectChanges();\n\n      let calendarDebugElement = fixture.debugElement.query(By.directive(MatCalendar));\n      calendarElement = calendarDebugElement.nativeElement;\n      periodButton = calendarElement.querySelector('.mat-calendar-period-button') as HTMLElement;\n      prevButton = calendarElement.querySelector('.mat-calendar-previous-button') as HTMLElement;\n      nextButton = calendarElement.querySelector('.mat-calendar-next-button') as HTMLElement;\n\n      calendarInstance = calendarDebugElement.componentInstance;\n      testComponent = fixture.componentInstance;\n    });\n\n    it('should be in month view with specified month active', () => {\n      expect(calendarInstance.currentView).toBe('month');\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n    });\n\n    it('should toggle view when period clicked', () => {\n      expect(calendarInstance.currentView).toBe('month');\n\n      periodButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('multi-year');\n\n      periodButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('month');\n    });\n\n    it('should go to next and previous month', () => {\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n\n      nextButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, FEB, 28));\n\n      prevButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 28));\n    });\n\n    it('should go to previous and next year', () => {\n      periodButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('multi-year');\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n\n      (calendarElement.querySelector('.mat-calendar-body-active') as HTMLElement).click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('year');\n\n      nextButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2018, JAN, 31));\n\n      prevButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n    });\n\n    it('should go to previous and next multi-year range', () => {\n      periodButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('multi-year');\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n\n      nextButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2017 + yearsPerPage, JAN, 31));\n\n      prevButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n    });\n\n    it('should go back to month view after selecting year and month', () => {\n      periodButton.click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('multi-year');\n      expect(calendarInstance.activeDate).toEqual(new Date(2017, JAN, 31));\n\n      let yearCells = calendarElement.querySelectorAll('.mat-calendar-body-cell');\n      (yearCells[0] as HTMLElement).click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('year');\n      expect(calendarInstance.activeDate).toEqual(new Date(2016, JAN, 31));\n\n      let monthCells = calendarElement.querySelectorAll('.mat-calendar-body-cell');\n      (monthCells[monthCells.length - 1] as HTMLElement).click();\n      fixture.detectChanges();\n\n      expect(calendarInstance.currentView).toBe('month');\n      expect(calendarInstance.activeDate).toEqual(new Date(2016, DEC, 31));\n      expect(testComponent.selected).toBeFalsy('no date should be selected yet');\n    });\n\n  });\n});\n\n@Component({\n  template: `\n    <mat-calendar\n        [startAt]=\"startDate\"\n        [(selected)]=\"selected\"\n        (yearSelected)=\"selectedYear=$event\"\n        (monthSelected)=\"selectedMonth=$event\">\n    </mat-calendar>`\n})\nclass StandardCalendar {\n  selected: Date;\n  selectedYear: Date;\n  selectedMonth: Date;\n  startDate = new Date(2017, JAN, 31);\n}\n"]}