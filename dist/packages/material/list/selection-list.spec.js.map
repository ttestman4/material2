{"version":3,"file":"selection-list.spec.js","sourceRoot":"","sources":["../../../../src/lib/list/selection-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {DOWN_ARROW, SPACE, ENTER, UP_ARROW, HOME, END, A} from '@angular/cdk/keycodes';\nimport {\n  createKeyboardEvent,\n  dispatchFakeEvent,\n  dispatchEvent,\n  dispatchKeyboardEvent,\n} from '@angular/cdk/testing';\nimport {\n  Component,\n  DebugElement,\n  ChangeDetectionStrategy,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {async, ComponentFixture, fakeAsync, TestBed, tick, flush} from '@angular/core/testing';\nimport {MatRipple} from '@angular/material/core';\nimport {By} from '@angular/platform-browser';\nimport {\n  MatListModule,\n  MatListOption,\n  MatSelectionList,\n  MatSelectionListChange\n} from './index';\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\n\ndescribe('MatSelectionList without forms', () => {\n  describe('with list option', () => {\n    let fixture: ComponentFixture<SelectionListWithListOptions>;\n    let listOptions: DebugElement[];\n    let selectionList: DebugElement;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [\n          SelectionListWithListOptions,\n          SelectionListWithCheckboxPositionAfter,\n          SelectionListWithListDisabled,\n          SelectionListWithOnlyOneOption,\n          SelectionListWithIndirectChildOptions,\n        ],\n      });\n\n      TestBed.compileComponents();\n    }));\n\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(SelectionListWithListOptions);\n      fixture.detectChanges();\n\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption));\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\n    }));\n\n    it('should be able to set a value on a list option', () => {\n      const optionValues = ['inbox', 'starred', 'sent-mail', 'drafts'];\n\n      optionValues.forEach((optionValue, index) => {\n        expect(listOptions[index].componentInstance.value).toBe(optionValue);\n      });\n    });\n\n    it('should not emit a selectionChange event if an option changed programmatically', () => {\n      spyOn(fixture.componentInstance, 'onValueChange');\n\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\n\n      listOptions[2].componentInstance.toggle();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\n    });\n\n    it('should emit a selectionChange event if an option got clicked', () => {\n      spyOn(fixture.componentInstance, 'onValueChange');\n\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(0);\n\n      dispatchFakeEvent(listOptions[2].nativeElement, 'click');\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.onValueChange).toHaveBeenCalledTimes(1);\n    });\n\n    it('should be able to dispatch one selected item', () => {\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\n      let selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('false');\n\n      testListItem.toggle();\n      fixture.detectChanges();\n\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('true');\n      expect(listOptions[2].nativeElement.getAttribute('aria-disabled')).toBe('false');\n      expect(selectList.selected.length).toBe(1);\n    });\n\n    it('should be able to dispatch multiple selected items', () => {\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\n      let testListItem2 = listOptions[1].injector.get<MatListOption>(MatListOption);\n      let selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('false');\n      expect(listOptions[1].nativeElement.getAttribute('aria-selected')).toBe('false');\n\n      testListItem.toggle();\n      fixture.detectChanges();\n\n      testListItem2.toggle();\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(2);\n      expect(listOptions[2].nativeElement.getAttribute('aria-selected')).toBe('true');\n      expect(listOptions[1].nativeElement.getAttribute('aria-selected')).toBe('true');\n      expect(listOptions[1].nativeElement.getAttribute('aria-disabled')).toBe('false');\n      expect(listOptions[2].nativeElement.getAttribute('aria-disabled')).toBe('false');\n    });\n\n    it('should be able to deselect an option', () => {\n      let testListItem = listOptions[2].injector.get<MatListOption>(MatListOption);\n      let selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n\n      testListItem.toggle();\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(1);\n\n      testListItem.toggle();\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(0);\n    });\n\n    it('should not allow selection of disabled items', () => {\n      let testListItem = listOptions[0].injector.get<MatListOption>(MatListOption);\n      let selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('true');\n\n      testListItem._handleClick();\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(0);\n    });\n\n    it('should be able to un-disable disabled items', () => {\n      let testListItem = listOptions[0].injector.get<MatListOption>(MatListOption);\n\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('true');\n\n      testListItem.disabled = false;\n      fixture.detectChanges();\n\n      expect(listOptions[0].nativeElement.getAttribute('aria-disabled')).toBe('false');\n    });\n\n    it('should be able to use keyboard select with SPACE', () => {\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\n      const SPACE_EVENT: KeyboardEvent = createKeyboardEvent('keydown', SPACE, testListItem);\n      const selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n      expect(selectList.selected.length).toBe(0);\n\n      dispatchFakeEvent(testListItem, 'focus');\n      selectionList.componentInstance._keydown(SPACE_EVENT);\n\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(1);\n      expect(SPACE_EVENT.defaultPrevented).toBe(true);\n    });\n\n    it('should be able to select an item using ENTER', () => {\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\n      const ENTER_EVENT: KeyboardEvent = createKeyboardEvent('keydown', ENTER, testListItem);\n      const selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n      expect(selectList.selected.length).toBe(0);\n\n      dispatchFakeEvent(testListItem, 'focus');\n      selectionList.componentInstance._keydown(ENTER_EVENT);\n\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(1);\n      expect(ENTER_EVENT.defaultPrevented).toBe(true);\n    });\n\n    it('should not be able to toggle an item when pressing a modifier key', () => {\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\n      const selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n\n      [ENTER, SPACE].forEach(key => {\n        const event = createKeyboardEvent('keydown', key, testListItem);\n        Object.defineProperty(event, 'ctrlKey', { get: () => true });\n\n        dispatchFakeEvent(testListItem, 'focus');\n        selectionList.componentInstance._keydown(event);\n        fixture.detectChanges();\n        expect(event.defaultPrevented).toBe(false);\n      });\n\n      expect(selectList.selected.length).toBe(0);\n    });\n\n    it('should not be able to toggle a disabled option using SPACE', () => {\n      const testListItem = listOptions[1].nativeElement as HTMLElement;\n      const selectionModel = selectionList.componentInstance.selectedOptions;\n\n      expect(selectionModel.selected.length).toBe(0);\n\n      listOptions[1].componentInstance.disabled = true;\n\n      dispatchFakeEvent(testListItem, 'focus');\n      selectionList.componentInstance._keydown(createKeyboardEvent('keydown', SPACE, testListItem));\n      fixture.detectChanges();\n\n      expect(selectionModel.selected.length).toBe(0);\n    });\n\n    it('should restore focus if active option is destroyed', () => {\n      const manager = selectionList.componentInstance._keyManager;\n\n      spyOn(listOptions[2].componentInstance, 'focus').and.callThrough();\n      listOptions[3].componentInstance._handleFocus();\n\n      expect(manager.activeItemIndex).toBe(3);\n\n      fixture.componentInstance.showLastOption = false;\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toBe(2);\n      expect(listOptions[2].componentInstance.focus).toHaveBeenCalled();\n    });\n\n    it('should not attempt to focus the next option when the destroyed option was not focused',\n      () => {\n        const manager = selectionList.componentInstance._keyManager;\n\n        // Focus and blur the option to move the active item index.\n        listOptions[3].componentInstance._handleFocus();\n        listOptions[3].componentInstance._handleBlur();\n\n        spyOn(listOptions[2].componentInstance, 'focus').and.callThrough();\n\n        expect(manager.activeItemIndex).toBe(3);\n\n        fixture.componentInstance.showLastOption = false;\n        fixture.detectChanges();\n\n        expect(manager.activeItemIndex).toBe(2);\n        expect(listOptions[2].componentInstance.focus).not.toHaveBeenCalled();\n      });\n\n    it('should focus previous item when press UP ARROW', () => {\n      let testListItem = listOptions[2].nativeElement as HTMLElement;\n      let UP_EVENT: KeyboardEvent =\n        createKeyboardEvent('keydown', UP_ARROW, testListItem);\n      let manager = selectionList.componentInstance._keyManager;\n\n      dispatchFakeEvent(listOptions[2].nativeElement, 'focus');\n      expect(manager.activeItemIndex).toEqual(2);\n\n      selectionList.componentInstance._keydown(UP_EVENT);\n\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toEqual(1);\n    });\n\n    it('should focus and toggle the next item when pressing SHIFT + UP_ARROW', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      const upKeyEvent = createKeyboardEvent('keydown', UP_ARROW);\n      Object.defineProperty(upKeyEvent, 'shiftKey', {get: () => true});\n\n      dispatchFakeEvent(listOptions[3].nativeElement, 'focus');\n      expect(manager.activeItemIndex).toBe(3);\n\n      expect(listOptions[1].componentInstance.selected).toBe(false);\n      expect(listOptions[2].componentInstance.selected).toBe(false);\n\n      selectionList.componentInstance._keydown(upKeyEvent);\n      fixture.detectChanges();\n\n      expect(listOptions[1].componentInstance.selected).toBe(false);\n      expect(listOptions[2].componentInstance.selected).toBe(true);\n\n      selectionList.componentInstance._keydown(upKeyEvent);\n      fixture.detectChanges();\n\n      expect(listOptions[1].componentInstance.selected).toBe(true);\n      expect(listOptions[2].componentInstance.selected).toBe(true);\n    });\n\n    it('should focus next item when press DOWN ARROW', () => {\n      const manager = selectionList.componentInstance._keyManager;\n\n      dispatchFakeEvent(listOptions[2].nativeElement, 'focus');\n      expect(manager.activeItemIndex).toEqual(2);\n\n      selectionList.componentInstance._keydown(createKeyboardEvent('keydown', DOWN_ARROW));\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toEqual(3);\n    });\n\n    it('should focus and toggle the next item when pressing SHIFT + DOWN_ARROW', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      const downKeyEvent = createKeyboardEvent('keydown', DOWN_ARROW);\n      Object.defineProperty(downKeyEvent, 'shiftKey', {get: () => true});\n\n      dispatchFakeEvent(listOptions[0].nativeElement, 'focus');\n      expect(manager.activeItemIndex).toBe(0);\n\n      expect(listOptions[1].componentInstance.selected).toBe(false);\n      expect(listOptions[2].componentInstance.selected).toBe(false);\n\n      selectionList.componentInstance._keydown(downKeyEvent);\n      fixture.detectChanges();\n\n      expect(listOptions[1].componentInstance.selected).toBe(true);\n      expect(listOptions[2].componentInstance.selected).toBe(false);\n\n      selectionList.componentInstance._keydown(downKeyEvent);\n      fixture.detectChanges();\n\n      expect(listOptions[1].componentInstance.selected).toBe(true);\n      expect(listOptions[2].componentInstance.selected).toBe(true);\n    });\n\n    it('should be able to focus the first item when pressing HOME', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      expect(manager.activeItemIndex).toBe(-1);\n\n      const event = dispatchKeyboardEvent(selectionList.nativeElement, 'keydown', HOME);\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toBe(0);\n      expect(event.defaultPrevented).toBe(true);\n    });\n\n    it('should not change focus when pressing HOME with a modifier key', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      expect(manager.activeItemIndex).toBe(-1);\n\n      const event = createKeyboardEvent('keydown', HOME);\n      Object.defineProperty(event, 'shiftKey', { get: () => true });\n\n      dispatchEvent(selectionList.nativeElement, event);\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toBe(-1);\n      expect(event.defaultPrevented).toBe(false);\n    });\n\n    it('should focus the last item when pressing END', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      expect(manager.activeItemIndex).toBe(-1);\n\n      const event = dispatchKeyboardEvent(selectionList.nativeElement, 'keydown', END);\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toBe(3);\n      expect(event.defaultPrevented).toBe(true);\n    });\n\n    it('should not change focus when pressing END with a modifier key', () => {\n      const manager = selectionList.componentInstance._keyManager;\n      expect(manager.activeItemIndex).toBe(-1);\n\n      const event = createKeyboardEvent('keydown', END);\n      Object.defineProperty(event, 'shiftKey', { get: () => true });\n\n      dispatchEvent(selectionList.nativeElement, event);\n      fixture.detectChanges();\n\n      expect(manager.activeItemIndex).toBe(-1);\n      expect(event.defaultPrevented).toBe(false);\n    });\n\n    it('should select all items using ctrl + a', () => {\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\n\n      expect(listOptions.some(option => option.componentInstance.selected)).toBe(false);\n\n      dispatchEvent(selectionList.nativeElement, event);\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\n    });\n\n    it('should select all items using ctrl + a if some items are selected', () => {\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\n\n      listOptions.slice(0, 2).forEach(option => option.componentInstance.selected = true);\n      fixture.detectChanges();\n\n      expect(listOptions.some(option => option.componentInstance.selected)).toBe(true);\n\n      dispatchEvent(selectionList.nativeElement, event);\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\n    });\n\n    it('should deselect all with ctrl + a if all options are selected', () => {\n      const event = createKeyboardEvent('keydown', A, selectionList.nativeElement);\n      Object.defineProperty(event, 'ctrlKey', {get: () => true});\n\n      listOptions.forEach(option => option.componentInstance.selected = true);\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(true);\n\n      dispatchEvent(selectionList.nativeElement, event);\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => option.componentInstance.selected)).toBe(false);\n    });\n\n    it('should be able to jump focus down to an item by typing', fakeAsync(() => {\n      const listEl = selectionList.nativeElement;\n      const manager = selectionList.componentInstance._keyManager;\n\n      expect(manager.activeItemIndex).toBe(-1);\n\n      dispatchEvent(listEl, createKeyboardEvent('keydown', 83, undefined, 's'));\n      fixture.detectChanges();\n      tick(200);\n\n      expect(manager.activeItemIndex).toBe(1);\n\n      dispatchEvent(listEl, createKeyboardEvent('keydown', 68, undefined, 'd'));\n      fixture.detectChanges();\n      tick(200);\n\n      expect(manager.activeItemIndex).toBe(3);\n    }));\n\n    it('should be able to select all options', () => {\n      const list: MatSelectionList = selectionList.componentInstance;\n\n      expect(list.options.toArray().every(option => option.selected)).toBe(false);\n\n      list.selectAll();\n      fixture.detectChanges();\n\n      expect(list.options.toArray().every(option => option.selected)).toBe(true);\n    });\n\n    it('should be able to deselect all options', () => {\n      const list: MatSelectionList = selectionList.componentInstance;\n\n      list.options.forEach(option => option.toggle());\n      expect(list.options.toArray().every(option => option.selected)).toBe(true);\n\n      list.deselectAll();\n      fixture.detectChanges();\n\n      expect(list.options.toArray().every(option => option.selected)).toBe(false);\n    });\n\n    it('should update the list value when an item is selected programmatically', () => {\n      const list: MatSelectionList = selectionList.componentInstance;\n\n      expect(list.selectedOptions.isEmpty()).toBe(true);\n\n      listOptions[0].componentInstance.selected = true;\n      listOptions[2].componentInstance.selected = true;\n      fixture.detectChanges();\n\n      expect(list.selectedOptions.isEmpty()).toBe(false);\n      expect(list.selectedOptions.isSelected(listOptions[0].componentInstance)).toBe(true);\n      expect(list.selectedOptions.isSelected(listOptions[2].componentInstance)).toBe(true);\n    });\n\n    it('should update the item selected state when it is selected via the model', () => {\n      const list: MatSelectionList = selectionList.componentInstance;\n      const item: MatListOption = listOptions[0].componentInstance;\n\n      expect(item.selected).toBe(false);\n\n      list.selectedOptions.select(item);\n      fixture.detectChanges();\n\n      expect(item.selected).toBe(true);\n    });\n\n    it('should set aria-multiselectable to true on the selection list element', () => {\n      expect(selectionList.nativeElement.getAttribute('aria-multiselectable')).toBe('true');\n    });\n\n    it('should be able to reach list options that are indirect descendants', () => {\n      const descendatsFixture = TestBed.createComponent(SelectionListWithIndirectChildOptions);\n      descendatsFixture.detectChanges();\n      listOptions = descendatsFixture.debugElement.queryAll(By.directive(MatListOption));\n      selectionList = descendatsFixture.debugElement.query(By.directive(MatSelectionList));\n      const list: MatSelectionList = selectionList.componentInstance;\n\n      expect(list.options.toArray().every(option => option.selected)).toBe(false);\n\n      list.selectAll();\n      descendatsFixture.detectChanges();\n\n      expect(list.options.toArray().every(option => option.selected)).toBe(true);\n    });\n\n  });\n\n  describe('with list option selected', () => {\n    let fixture: ComponentFixture<SelectionListWithSelectedOption>;\n    let listItemEl: DebugElement;\n    let selectionList: DebugElement;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [SelectionListWithSelectedOption],\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(SelectionListWithSelectedOption);\n      listItemEl = fixture.debugElement.query(By.directive(MatListOption));\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\n      fixture.detectChanges();\n    }));\n\n    it('should set its initial selected state in the selectedOptions', () => {\n      let optionEl = listItemEl.injector.get<MatListOption>(MatListOption);\n      let selectedOptions = selectionList.componentInstance.selectedOptions;\n      expect(selectedOptions.isSelected(optionEl)).toBeTruthy();\n    });\n  });\n\n  describe('with tabindex', () => {\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [\n          SelectionListWithTabindexAttr,\n          SelectionListWithTabindexBinding,\n        ]\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    it('should properly handle native tabindex attribute', () => {\n      const fixture = TestBed.createComponent(SelectionListWithTabindexAttr);\n      const selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\n\n      expect(selectionList.componentInstance.tabIndex)\n        .toBe(5, 'Expected the selection-list tabindex to be set to the attribute value.');\n    });\n\n    it('should support changing the tabIndex through binding', () => {\n      const fixture = TestBed.createComponent(SelectionListWithTabindexBinding);\n      const selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\n\n      expect(selectionList.componentInstance.tabIndex)\n        .toBe(0, 'Expected the tabIndex to be set to \"0\" by default.');\n\n      fixture.componentInstance.tabIndex = 3;\n      fixture.detectChanges();\n\n      expect(selectionList.componentInstance.tabIndex)\n        .toBe(3, 'Expected the tabIndex to updated through binding.');\n\n      fixture.componentInstance.disabled = true;\n      fixture.detectChanges();\n\n      expect(selectionList.componentInstance.tabIndex)\n        .toBe(3, 'Expected the tabIndex to be still set to \"3\".');\n    });\n  });\n\n  describe('with option disabled', () => {\n    let fixture: ComponentFixture<SelectionListWithDisabledOption>;\n    let listOptionEl: HTMLElement;\n    let listOption: MatListOption;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [SelectionListWithDisabledOption]\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(SelectionListWithDisabledOption);\n\n      const listOptionDebug = fixture.debugElement.query(By.directive(MatListOption));\n\n      listOption = listOptionDebug.componentInstance;\n      listOptionEl = listOptionDebug.nativeElement;\n\n      fixture.detectChanges();\n    }));\n\n    it('should disable ripples for disabled option', () => {\n      expect(listOption._isRippleDisabled())\n        .toBe(false, 'Expected ripples to be enabled by default');\n\n      fixture.componentInstance.disableItem = true;\n      fixture.detectChanges();\n\n      expect(listOption._isRippleDisabled())\n        .toBe(true, 'Expected ripples to be disabled if option is disabled');\n    });\n\n    it('should apply the \"mat-list-item-disabled\" class properly', () => {\n      expect(listOptionEl.classList).not.toContain('mat-list-item-disabled');\n\n      fixture.componentInstance.disableItem = true;\n      fixture.detectChanges();\n\n      expect(listOptionEl.classList).toContain('mat-list-item-disabled');\n    });\n  });\n\n  describe('with list disabled', () => {\n    let fixture: ComponentFixture<SelectionListWithListDisabled>;\n    let listOption: DebugElement[];\n    let selectionList: DebugElement;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [\n          SelectionListWithListOptions,\n          SelectionListWithCheckboxPositionAfter,\n          SelectionListWithListDisabled,\n          SelectionListWithOnlyOneOption\n        ],\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(SelectionListWithListDisabled);\n      listOption = fixture.debugElement.queryAll(By.directive(MatListOption));\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList));\n      fixture.detectChanges();\n    }));\n\n    it('should not allow selection on disabled selection-list', () => {\n      let testListItem = listOption[2].injector.get<MatListOption>(MatListOption);\n      let selectList =\n          selectionList.injector.get<MatSelectionList>(MatSelectionList).selectedOptions;\n\n      expect(selectList.selected.length).toBe(0);\n\n      testListItem._handleClick();\n      fixture.detectChanges();\n\n      expect(selectList.selected.length).toBe(0);\n    });\n\n    it('should update state of options if list state has changed', () => {\n      // To verify that the template of the list options has been re-rendered after the disabled\n      // property of the selection list has been updated, the ripple directive can be used.\n      // Inspecting the host classes of the options doesn't work because those update as part\n      // of the parent template (of the selection-list).\n      const listOptionRipple = listOption[2].query(By.directive(MatRipple))\n          .injector.get<MatRipple>(MatRipple);\n\n      expect(listOptionRipple.disabled)\n        .toBe(true, 'Expected ripples of list option to be disabled');\n\n      fixture.componentInstance.disabled = false;\n      fixture.detectChanges();\n\n      expect(listOptionRipple.disabled)\n        .toBe(false, 'Expected ripples of list option to be enabled');\n    });\n  });\n\n  describe('with checkbox position after', () => {\n    let fixture: ComponentFixture<SelectionListWithCheckboxPositionAfter>;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [\n          SelectionListWithListOptions,\n          SelectionListWithCheckboxPositionAfter,\n          SelectionListWithListDisabled,\n          SelectionListWithOnlyOneOption\n        ],\n      });\n\n      TestBed.compileComponents();\n    }));\n\n    beforeEach(async(() => {\n      fixture = TestBed.createComponent(SelectionListWithCheckboxPositionAfter);\n      fixture.detectChanges();\n    }));\n\n    it('should be able to customize checkbox position', () => {\n      let listItemContent = fixture.debugElement.query(By.css('.mat-list-item-content'));\n      expect(listItemContent.nativeElement.classList).toContain('mat-list-item-content-reverse');\n    });\n  });\n\n  describe('with list item elements', () => {\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [MatListModule],\n        declarations: [\n          SelectionListWithAvatar,\n          SelectionListWithIcon,\n        ],\n      }).compileComponents();\n    }));\n\n    it('should add a class to reflect that it has an avatar', () => {\n      const fixture = TestBed.createComponent(SelectionListWithIcon);\n      fixture.detectChanges();\n\n      const listOption = fixture.nativeElement.querySelector('.mat-list-option');\n      expect(listOption.classList).toContain('mat-list-item-with-avatar');\n    });\n\n    it('should add a class to reflect that it has an icon', () => {\n      const fixture = TestBed.createComponent(SelectionListWithIcon);\n      fixture.detectChanges();\n\n      const listOption = fixture.nativeElement.querySelector('.mat-list-option');\n      expect(listOption.classList).toContain('mat-list-item-with-avatar');\n    });\n  });\n});\n\ndescribe('MatSelectionList with forms', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatListModule, FormsModule, ReactiveFormsModule],\n      declarations: [\n        SelectionListWithModel,\n        SelectionListWithFormControl,\n        SelectionListWithPreselectedOption,\n        SelectionListWithPreselectedOptionAndModel,\n        SelectionListWithPreselectedFormControlOnPush,\n        SelectionListWithCustomComparator,\n      ]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('and ngModel', () => {\n    let fixture: ComponentFixture<SelectionListWithModel>;\n    let selectionListDebug: DebugElement;\n    let listOptions: MatListOption[];\n    let ngModel: NgModel;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SelectionListWithModel);\n      fixture.detectChanges();\n\n      selectionListDebug = fixture.debugElement.query(By.directive(MatSelectionList));\n      ngModel = selectionListDebug.injector.get<NgModel>(NgModel);\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n        .map(optionDebugEl => optionDebugEl.componentInstance);\n    });\n\n    it('should update the model if an option got selected programmatically', fakeAsync(() => {\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(0, 'Expected no options to be selected by default');\n\n      listOptions[0].toggle();\n      fixture.detectChanges();\n\n      tick();\n\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(1, 'Expected first list option to be selected');\n    }));\n\n    it('should update the model if an option got clicked', fakeAsync(() => {\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(0, 'Expected no options to be selected by default');\n\n      dispatchFakeEvent(listOptions[0]._getHostElement(), 'click');\n      fixture.detectChanges();\n\n      tick();\n\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(1, 'Expected first list option to be selected');\n    }));\n\n    it('should update the options if a model value is set', fakeAsync(() => {\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(0, 'Expected no options to be selected by default');\n\n      fixture.componentInstance.selectedOptions = ['opt3'];\n      fixture.detectChanges();\n\n      tick();\n\n      expect(fixture.componentInstance.selectedOptions.length)\n        .toBe(1, 'Expected first list option to be selected');\n    }));\n\n    it('should set the selection-list to touched on blur', fakeAsync(() => {\n      expect(ngModel.touched)\n        .toBe(false, 'Expected the selection-list to be untouched by default.');\n\n      dispatchFakeEvent(selectionListDebug.nativeElement, 'blur');\n      fixture.detectChanges();\n\n      tick();\n\n      expect(ngModel.touched).toBe(true, 'Expected the selection-list to be touched after blur');\n    }));\n\n    it('should be pristine by default', fakeAsync(() => {\n      fixture = TestBed.createComponent(SelectionListWithModel);\n      fixture.componentInstance.selectedOptions = ['opt2'];\n      fixture.detectChanges();\n\n      ngModel =\n        fixture.debugElement.query(By.directive(MatSelectionList)).injector.get<NgModel>(NgModel);\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n        .map(optionDebugEl => optionDebugEl.componentInstance);\n\n      // Flush the initial tick to ensure that every action from the ControlValueAccessor\n      // happened before the actual test starts.\n      tick();\n\n      expect(ngModel.pristine)\n        .toBe(true, 'Expected the selection-list to be pristine by default.');\n\n      listOptions[1].toggle();\n      fixture.detectChanges();\n\n      tick();\n\n      expect(ngModel.pristine)\n        .toBe(false, 'Expected the selection-list to be dirty after state change.');\n    }));\n\n    it('should remove a selected option from the value on destroy', fakeAsync(() => {\n      listOptions[1].selected = true;\n      listOptions[2].selected = true;\n\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2', 'opt3']);\n\n      fixture.componentInstance.options.pop();\n      fixture.detectChanges();\n      tick();\n\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2']);\n    }));\n\n    it('should update the model if an option got selected via the model', fakeAsync(() => {\n      expect(fixture.componentInstance.selectedOptions).toEqual([]);\n\n      selectionListDebug.componentInstance.selectedOptions.select(listOptions[0]);\n      fixture.detectChanges();\n      tick();\n\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt1']);\n    }));\n\n    it('should not dispatch the model change event if nothing changed using selectAll', () => {\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\n\n      selectionListDebug.componentInstance.selectAll();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.modelChangeSpy).toHaveBeenCalledTimes(1);\n\n      selectionListDebug.componentInstance.selectAll();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.modelChangeSpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should not dispatch the model change event if nothing changed using selectAll', () => {\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\n\n      selectionListDebug.componentInstance.deselectAll();\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.modelChangeSpy).not.toHaveBeenCalled();\n    });\n\n    it('should be able to programmatically set an array with duplicate values', fakeAsync(() => {\n      fixture.componentInstance.options = ['one', 'two', 'two', 'two', 'three'];\n      fixture.detectChanges();\n      tick();\n\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n          .map(optionDebugEl => optionDebugEl.componentInstance);\n\n      fixture.componentInstance.selectedOptions = ['one', 'two', 'two'];\n      fixture.detectChanges();\n      tick();\n\n      expect(listOptions.map(option => option.selected)).toEqual([true, true, true, false, false]);\n    }));\n\n  });\n\n  describe('and formControl', () => {\n    let fixture: ComponentFixture<SelectionListWithFormControl>;\n    let listOptions: MatListOption[];\n    let selectionList: MatSelectionList;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(SelectionListWithFormControl);\n      fixture.detectChanges();\n\n      selectionList = fixture.debugElement.query(By.directive(MatSelectionList)).componentInstance;\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n        .map(optionDebugEl => optionDebugEl.componentInstance);\n    });\n\n    it('should be able to disable options from the control', () => {\n      expect(selectionList.disabled)\n        .toBe(false, 'Expected the selection list to be enabled.');\n      expect(listOptions.every(option => !option.disabled))\n        .toBe(true, 'Expected every list option to be enabled.');\n\n      fixture.componentInstance.formControl.disable();\n      fixture.detectChanges();\n\n      expect(selectionList.disabled)\n        .toBe(true, 'Expected the selection list to be disabled.');\n      expect(listOptions.every(option => option.disabled))\n        .toBe(true, 'Expected every list option to be disabled.');\n    });\n\n    it('should be able to update the disabled property after form control disabling', () => {\n      expect(listOptions.every(option => !option.disabled))\n        .toBe(true, 'Expected every list option to be enabled.');\n\n      fixture.componentInstance.formControl.disable();\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => option.disabled))\n        .toBe(true, 'Expected every list option to be disabled.');\n\n      // Previously the selection list has been disabled through FormControl#disable. Now we\n      // want to verify that we can still change the disabled state through updating the disabled\n      // property. Calling FormControl#disable should not lock the disabled property.\n      // See: https://github.com/angular/material2/issues/12107\n      selectionList.disabled = false;\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => !option.disabled))\n        .toBe(true, 'Expected every list option to be enabled.');\n    });\n\n    it('should be able to set the value through the form control', () => {\n      expect(listOptions.every(option => !option.selected))\n        .toBe(true, 'Expected every list option to be unselected.');\n\n      fixture.componentInstance.formControl.setValue(['opt2', 'opt3']);\n      fixture.detectChanges();\n\n      expect(listOptions[1].selected).toBe(true, 'Expected second option to be selected.');\n      expect(listOptions[2].selected).toBe(true, 'Expected third option to be selected.');\n\n      fixture.componentInstance.formControl.setValue(null);\n      fixture.detectChanges();\n\n      expect(listOptions.every(option => !option.selected))\n        .toBe(true, 'Expected every list option to be unselected.');\n    });\n\n    it('should deselect option whose value no longer matches', () => {\n      const option = listOptions[1];\n\n      fixture.componentInstance.formControl.setValue(['opt2']);\n      fixture.detectChanges();\n\n      expect(option.selected).toBe(true, 'Expected option to be selected.');\n\n      option.value = 'something-different';\n      fixture.detectChanges();\n\n      expect(option.selected).toBe(false, 'Expected option not to be selected.');\n      expect(fixture.componentInstance.formControl.value).toEqual([]);\n    });\n\n    it('should mark options as selected when the value is set before they are initialized', () => {\n      fixture.destroy();\n      fixture = TestBed.createComponent(SelectionListWithFormControl);\n\n      fixture.componentInstance.formControl.setValue(['opt2', 'opt3']);\n      fixture.detectChanges();\n\n      listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n        .map(optionDebugEl => optionDebugEl.componentInstance);\n\n      expect(listOptions[1].selected).toBe(true, 'Expected second option to be selected.');\n      expect(listOptions[2].selected).toBe(true, 'Expected third option to be selected.');\n    });\n  });\n\n  describe('preselected values', () => {\n    it('should add preselected options to the model value', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedOption);\n      const listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n          .map(optionDebugEl => optionDebugEl.componentInstance);\n\n      fixture.detectChanges();\n      tick();\n\n      expect(listOptions[1].selected).toBe(true);\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt2']);\n    }));\n\n    it('should handle preselected option both through the model and the view', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedOptionAndModel);\n      const listOptions = fixture.debugElement.queryAll(By.directive(MatListOption))\n          .map(optionDebugEl => optionDebugEl.componentInstance);\n\n      fixture.detectChanges();\n      tick();\n\n      expect(listOptions[0].selected).toBe(true);\n      expect(listOptions[1].selected).toBe(true);\n      expect(fixture.componentInstance.selectedOptions).toEqual(['opt1', 'opt2']);\n    }));\n\n    it('should show the item as selected when preselected inside OnPush parent', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SelectionListWithPreselectedFormControlOnPush);\n      fixture.detectChanges();\n\n      const option = fixture.debugElement.queryAll(By.directive(MatListOption))[1];\n\n      fixture.detectChanges();\n      flush();\n      fixture.detectChanges();\n\n      expect(option.componentInstance.selected).toBe(true);\n      expect(option.nativeElement.querySelector('.mat-pseudo-checkbox-checked')).toBeTruthy();\n    }));\n\n  });\n\n  describe('with custom compare function', () => {\n    it('should use a custom comparator to determine which options are selected', fakeAsync(() => {\n      const fixture = TestBed.createComponent(SelectionListWithCustomComparator);\n      const testComponent = fixture.componentInstance;\n\n      testComponent.compareWith = jasmine.createSpy('comparator', (o1: any, o2: any) => {\n        return o1 && o2 && o1.id === o2.id;\n      }).and.callThrough();\n\n      testComponent.selectedOptions = [{id: 2, label: 'Two'}];\n      fixture.detectChanges();\n      tick();\n\n      expect(testComponent.compareWith).toHaveBeenCalled();\n      expect(testComponent.optionInstances.toArray()[1].selected).toBe(true);\n    }));\n  });\n});\n\n\n@Component({template: `\n  <mat-selection-list id=\"selection-list-1\" (selectionChange)=\"onValueChange($event)\">\n    <mat-list-option checkboxPosition=\"before\" disabled=\"true\" value=\"inbox\">\n      Inbox (disabled selection-option)\n    </mat-list-option>\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"before\" class=\"test-native-focus\"\n                    value=\"starred\">\n      Starred\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"before\" value=\"sent-mail\">\n      Sent Mail\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"before\" value=\"drafts\" *ngIf=\"showLastOption\">\n      Drafts\n    </mat-list-option>\n  </mat-selection-list>`})\nclass SelectionListWithListOptions {\n  showLastOption: boolean = true;\n\n  onValueChange(_change: MatSelectionListChange) {}\n}\n\n@Component({template: `\n  <mat-selection-list id=\"selection-list-2\">\n    <mat-list-option checkboxPosition=\"after\">\n      Inbox (disabled selection-option)\n    </mat-list-option>\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"after\">\n      Starred\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"after\">\n      Sent Mail\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"after\">\n      Drafts\n    </mat-list-option>\n  </mat-selection-list>`})\nclass SelectionListWithCheckboxPositionAfter {\n}\n\n@Component({template: `\n  <mat-selection-list id=\"selection-list-3\" [disabled]=\"disabled\">\n    <mat-list-option checkboxPosition=\"after\">\n      Inbox (disabled selection-option)\n    </mat-list-option>\n    <mat-list-option id=\"testSelect\" checkboxPosition=\"after\">\n      Starred\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"after\">\n      Sent Mail\n    </mat-list-option>\n    <mat-list-option checkboxPosition=\"after\">\n      Drafts\n    </mat-list-option>\n  </mat-selection-list>`})\nclass SelectionListWithListDisabled {\n  disabled: boolean = true;\n}\n\n@Component({template: `\n  <mat-selection-list>\n    <mat-list-option [disabled]=\"disableItem\">Item</mat-list-option>\n  </mat-selection-list>\n  `})\nclass SelectionListWithDisabledOption {\n  disableItem: boolean = false;\n}\n\n@Component({template: `\n  <mat-selection-list>\n    <mat-list-option [selected]=\"true\">Item</mat-list-option>\n  </mat-selection-list>`})\nclass SelectionListWithSelectedOption {\n}\n\n@Component({template: `\n  <mat-selection-list id=\"selection-list-4\">\n    <mat-list-option checkboxPosition=\"after\" class=\"test-focus\" id=\"123\">\n      Inbox\n    </mat-list-option>\n  </mat-selection-list>`})\nclass SelectionListWithOnlyOneOption {\n}\n\n@Component({\n  template: `<mat-selection-list tabindex=\"5\"></mat-selection-list>`\n})\nclass SelectionListWithTabindexAttr {}\n\n@Component({\n  template: `<mat-selection-list [tabIndex]=\"tabIndex\" [disabled]=\"disabled\"></mat-selection-list>`\n})\nclass SelectionListWithTabindexBinding {\n  tabIndex: number;\n  disabled: boolean;\n}\n\n@Component({\n  template: `\n    <mat-selection-list [(ngModel)]=\"selectedOptions\" (ngModelChange)=\"modelChangeSpy()\">\n      <mat-list-option *ngFor=\"let option of options\" [value]=\"option\">{{option}}</mat-list-option>\n    </mat-selection-list>`\n})\nclass SelectionListWithModel {\n  modelChangeSpy = jasmine.createSpy('model change spy');\n  selectedOptions: string[] = [];\n  options = ['opt1', 'opt2', 'opt3'];\n}\n\n@Component({\n  template: `\n    <mat-selection-list [formControl]=\"formControl\">\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\n      <mat-list-option value=\"opt2\">Option 2</mat-list-option>\n      <mat-list-option value=\"opt3\">Option 3</mat-list-option>\n    </mat-selection-list>\n  `\n})\nclass SelectionListWithFormControl {\n  formControl = new FormControl();\n}\n\n\n@Component({\n  template: `\n    <mat-selection-list [(ngModel)]=\"selectedOptions\">\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\n      <mat-list-option value=\"opt2\" selected>Option 2</mat-list-option>\n    </mat-selection-list>`\n})\nclass SelectionListWithPreselectedOption {\n  selectedOptions: string[];\n}\n\n\n@Component({\n  template: `\n    <mat-selection-list [(ngModel)]=\"selectedOptions\">\n      <mat-list-option value=\"opt1\">Option 1</mat-list-option>\n      <mat-list-option value=\"opt2\" selected>Option 2</mat-list-option>\n    </mat-selection-list>`\n})\nclass SelectionListWithPreselectedOptionAndModel {\n  selectedOptions = ['opt1'];\n}\n\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <mat-selection-list [formControl]=\"formControl\">\n      <mat-list-option *ngFor=\"let opt of opts\" [value]=\"opt\">{{opt}}</mat-list-option>\n    </mat-selection-list>\n  `\n})\nclass SelectionListWithPreselectedFormControlOnPush {\n  opts = ['opt1', 'opt2', 'opt3'];\n  formControl = new FormControl(['opt2']);\n}\n\n\n@Component({\n  template: `\n    <mat-selection-list [(ngModel)]=\"selectedOptions\" [compareWith]=\"compareWith\">\n      <mat-list-option *ngFor=\"let option of options\" [value]=\"option\">\n        {{option.label}}\n      </mat-list-option>\n    </mat-selection-list>`\n})\nclass SelectionListWithCustomComparator {\n  @ViewChildren(MatListOption) optionInstances: QueryList<MatListOption>;\n  selectedOptions: {id: number, label: string}[] = [];\n  compareWith?: (o1: any, o2: any) => boolean;\n  options = [\n    {id: 1, label: 'One'},\n    {id: 2, label: 'Two'},\n    {id: 3, label: 'Three'}\n  ];\n}\n\n\n@Component({\n  template: `\n    <mat-selection-list>\n      <mat-list-option>\n        <div mat-list-avatar>I</div>\n        Inbox\n      </mat-list-option>\n    </mat-selection-list>\n  `\n})\nclass SelectionListWithAvatar {\n}\n\n@Component({\n  template: `\n    <mat-selection-list>\n      <mat-list-option>\n        <div mat-list-icon>I</div>\n        Inbox\n      </mat-list-option>\n    </mat-selection-list>\n  `\n})\nclass SelectionListWithIcon {\n}\n\n\n@Component({\n  // Note the blank `ngSwitch` which we need in order to hit the bug that we're testing.\n  template: `\n    <mat-selection-list>\n      <ng-container [ngSwitch]=\"true\">\n        <mat-list-option [value]=\"1\">One</mat-list-option>\n        <mat-list-option [value]=\"2\">Two</mat-list-option>\n      </ng-container>\n    </mat-selection-list>`\n})\nclass SelectionListWithIndirectChildOptions {\n  @ViewChildren(MatListOption) optionInstances: QueryList<MatListOption>;\n}\n"]}