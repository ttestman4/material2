{"version":3,"file":"button-toggle.spec.js","sourceRoot":"","sources":["../../../../src/lib/button-toggle/button-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {dispatchMouseEvent} from '@angular/cdk/testing';\nimport {Component, DebugElement, QueryList, ViewChild, ViewChildren} from '@angular/core';\nimport {ComponentFixture, fakeAsync, flush, TestBed, tick} from '@angular/core/testing';\nimport {FormControl, FormsModule, NgModel, ReactiveFormsModule} from '@angular/forms';\nimport {By} from '@angular/platform-browser';\nimport {\n  MatButtonToggle,\n  MatButtonToggleChange,\n  MatButtonToggleGroup,\n  MatButtonToggleGroupMultiple,\n  MatButtonToggleModule,\n} from './index';\n\ndescribe('MatButtonToggle with forms', () => {\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [MatButtonToggleModule, FormsModule, ReactiveFormsModule],\n      declarations: [\n        ButtonToggleGroupWithNgModel,\n        ButtonToggleGroupWithFormControl,\n      ],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('using FormControl', () => {\n    let fixture: ComponentFixture<ButtonToggleGroupWithFormControl>;\n    let groupDebugElement: DebugElement;\n    let groupInstance: MatButtonToggleGroup;\n    let testComponent: ButtonToggleGroupWithFormControl;\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(ButtonToggleGroupWithFormControl);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\n    }));\n\n    it('should toggle the disabled state', () => {\n      testComponent.control.disable();\n\n      expect(groupInstance.disabled).toBe(true);\n\n      testComponent.control.enable();\n\n      expect(groupInstance.disabled).toBe(false);\n    });\n\n    it('should set the value', () => {\n      testComponent.control.setValue('green');\n\n      expect(groupInstance.value).toBe('green');\n\n      testComponent.control.setValue('red');\n\n      expect(groupInstance.value).toBe('red');\n    });\n\n    it('should register the on change callback', () => {\n      let spy = jasmine.createSpy('onChange callback');\n\n      testComponent.control.registerOnChange(spy);\n      testComponent.control.setValue('blue');\n\n      expect(spy).toHaveBeenCalled();\n    });\n  });\n\n  describe('button toggle group with ngModel and change event', () => {\n    let fixture: ComponentFixture<ButtonToggleGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let groupInstance: MatButtonToggleGroup;\n    let buttonToggleInstances: MatButtonToggle[];\n    let testComponent: ButtonToggleGroupWithNgModel;\n    let groupNgModel: NgModel;\n    let innerButtons: HTMLElement[];\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(ButtonToggleGroupWithNgModel);\n      fixture.detectChanges();\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\n      groupNgModel = groupDebugElement.injector.get<NgModel>(NgModel);\n\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n      innerButtons = buttonToggleDebugElements.map(\n        debugEl => debugEl.query(By.css('button')).nativeElement);\n\n      fixture.detectChanges();\n    }));\n\n    it('should update the model before firing change event', fakeAsync(() => {\n      expect(testComponent.modelValue).toBeUndefined();\n      expect(testComponent.lastEvent).toBeUndefined();\n\n      innerButtons[0].click();\n      fixture.detectChanges();\n\n      tick();\n      expect(testComponent.modelValue).toBe('red');\n      expect(testComponent.lastEvent.value).toBe('red');\n    }));\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n\n      groupInstance.name = 'new name';\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should update the name of radio DOM elements if the name of the group changes', () => {\n       expect(innerButtons.every(button => button.getAttribute('name') === groupInstance.name))\n          .toBe(true, 'Expected all buttons to have the initial name.');\n\n       fixture.componentInstance.groupName = 'changed-name';\n      fixture.detectChanges();\n\n       expect(groupInstance.name).toBe('changed-name');\n      expect(innerButtons.every(button => button.getAttribute('name') === groupInstance.name))\n          .toBe(true, 'Expected all buttons to have the new name.');\n    });\n\n    it('should check the corresponding button toggle on a group value change', () => {\n      expect(groupInstance.value).toBeFalsy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.checked).toBeFalsy();\n      }\n\n      groupInstance.value = 'red';\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.checked).toBe(groupInstance.value === buttonToggle.value);\n      }\n\n      const selected = groupInstance.selected as MatButtonToggle;\n\n      expect(selected.value).toBe(groupInstance.value);\n    });\n\n    it('should have the correct FormControl state initially and after interaction',\n      fakeAsync(() => {\n        expect(groupNgModel.valid).toBe(true);\n        expect(groupNgModel.pristine).toBe(true);\n        expect(groupNgModel.touched).toBe(false);\n\n        buttonToggleInstances[1].checked = true;\n        fixture.detectChanges();\n        tick();\n\n        expect(groupNgModel.valid).toBe(true);\n        expect(groupNgModel.pristine).toBe(true);\n        expect(groupNgModel.touched).toBe(false);\n\n        innerButtons[2].click();\n        fixture.detectChanges();\n        tick();\n\n        expect(groupNgModel.valid).toBe(true);\n        expect(groupNgModel.pristine).toBe(false);\n        expect(groupNgModel.touched).toBe(true);\n      }));\n\n    it('should update the ngModel value when selecting a button toggle', fakeAsync(() => {\n      innerButtons[1].click();\n      fixture.detectChanges();\n\n      tick();\n\n      expect(testComponent.modelValue).toBe('green');\n    }));\n\n    it('should show a ripple on label click', () => {\n      const groupElement = groupDebugElement.nativeElement;\n\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\n\n      dispatchMouseEvent(innerButtons[0], 'mousedown');\n      dispatchMouseEvent(innerButtons[0], 'mouseup');\n\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(1);\n    });\n\n    it('should allow ripples to be disabled', () => {\n      const groupElement = groupDebugElement.nativeElement;\n\n      testComponent.disableRipple = true;\n      fixture.detectChanges();\n\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\n\n      dispatchMouseEvent(innerButtons[0], 'mousedown');\n      dispatchMouseEvent(innerButtons[0], 'mouseup');\n\n      expect(groupElement.querySelectorAll('.mat-ripple-element').length).toBe(0);\n    });\n  });\n});\n\ndescribe('MatButtonToggle without forms', () => {\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [MatButtonToggleModule],\n      declarations: [\n        ButtonTogglesInsideButtonToggleGroup,\n        ButtonTogglesInsideButtonToggleGroupMultiple,\n        FalsyButtonTogglesInsideButtonToggleGroupMultiple,\n        ButtonToggleGroupWithInitialValue,\n        StandaloneButtonToggle,\n        ButtonToggleWithAriaLabel,\n        ButtonToggleWithAriaLabelledby,\n        RepeatedButtonTogglesWithPreselectedValue,\n        ButtonToggleWithTabindex,\n      ],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  describe('inside of an exclusive selection group', () => {\n\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroup>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let buttonToggleLabelElements: HTMLLabelElement[];\n    let groupInstance: MatButtonToggleGroup;\n    let buttonToggleInstances: MatButtonToggle[];\n    let testComponent: ButtonTogglesInsideButtonToggleGroup;\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(ButtonTogglesInsideButtonToggleGroup);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\n      groupNativeElement = groupDebugElement.nativeElement;\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\n\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\n\n      buttonToggleNativeElements = buttonToggleDebugElements\n        .map(debugEl => debugEl.nativeElement);\n\n      buttonToggleLabelElements = fixture.debugElement.queryAll(By.css('button'))\n        .map(debugEl => debugEl.nativeElement);\n\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n    });\n\n    it('should set individual button toggle names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let buttonToggle of buttonToggleInstances) {\n        expect(buttonToggle.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should disable click interactions when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      buttonToggleNativeElements[0].click();\n      expect(buttonToggleInstances[0].checked).toBe(false);\n      expect(buttonToggleInstances[0].disabled).toBe(true);\n\n      testComponent.isGroupDisabled = false;\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].disabled).toBe(false);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should set aria-disabled based on whether the group is disabled', () => {\n      expect(groupNativeElement.getAttribute('aria-disabled')).toBe('false');\n\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      expect(groupNativeElement.getAttribute('aria-disabled')).toBe('true');\n    });\n\n    it('should disable the underlying button when the group is disabled', () => {\n      const buttons = buttonToggleNativeElements.map(toggle => toggle.querySelector('button')!);\n\n      expect(buttons.every(input => input.disabled)).toBe(false);\n\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      expect(buttons.every(input => input.disabled)).toBe(true);\n    });\n\n    it('should update the group value when one of the toggles changes', () => {\n      expect(groupInstance.value).toBeFalsy();\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n    });\n\n    it('should propagate the value change back up via a two-way binding', () => {\n      expect(groupInstance.value).toBeFalsy();\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(testComponent.groupValue).toBe('test1');\n    });\n\n    it('should update the group and toggles when one of the button toggles is clicked', () => {\n      expect(groupInstance.value).toBeFalsy();\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(buttonToggleInstances[1].checked).toBe(false);\n\n      buttonToggleLabelElements[1].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test2');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\n      expect(buttonToggleInstances[0].checked).toBe(false);\n      expect(buttonToggleInstances[1].checked).toBe(true);\n    });\n\n    it('should check a button toggle upon interaction with underlying native radio button', () => {\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(groupInstance.value);\n    });\n\n    it('should change the vertical state', () => {\n      expect(groupNativeElement.classList).not.toContain('mat-button-toggle-vertical');\n\n      groupInstance.vertical = true;\n      fixture.detectChanges();\n\n      expect(groupNativeElement.classList).toContain('mat-button-toggle-vertical');\n    });\n\n    it('should emit a change event from button toggles', fakeAsync(() => {\n      expect(buttonToggleInstances[0].checked).toBe(false);\n\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\n      buttonToggleInstances[0].change.subscribe(changeSpy);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(1);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n\n      // Always emit change event when button toggle is clicked\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should emit a change event from the button toggle group', fakeAsync(() => {\n      expect(groupInstance.value).toBeFalsy();\n\n      let changeSpy = jasmine.createSpy('button-toggle-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      buttonToggleLabelElements[1].click();\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should update the group and button toggles when updating the group value', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      testComponent.groupValue = 'test1';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(buttonToggleInstances[1].checked).toBe(false);\n\n      testComponent.groupValue = 'test2';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test2');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[1]);\n      expect(buttonToggleInstances[0].checked).toBe(false);\n      expect(buttonToggleInstances[1].checked).toBe(true);\n    });\n\n    it('should deselect all of the checkboxes when the group value is cleared', () => {\n      buttonToggleInstances[0].checked = true;\n\n      expect(groupInstance.value).toBeTruthy();\n\n      groupInstance.value = null;\n\n      expect(buttonToggleInstances.every(toggle => !toggle.checked)).toBe(true);\n    });\n\n    it('should update the model if a selected toggle is removed', fakeAsync(() => {\n      expect(groupInstance.value).toBeFalsy();\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('test1');\n      expect(groupInstance.selected).toBe(buttonToggleInstances[0]);\n\n      testComponent.renderFirstToggle = false;\n      fixture.detectChanges();\n      tick();\n\n      expect(groupInstance.value).toBeFalsy();\n      expect(groupInstance.selected).toBeFalsy();\n    }));\n\n  });\n\n  describe('with initial value and change event', () => {\n\n    it('should not fire an initial change event', () => {\n      let fixture = TestBed.createComponent(ButtonToggleGroupWithInitialValue);\n      let testComponent = fixture.debugElement.componentInstance;\n      let groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\n      let groupInstance: MatButtonToggleGroup = groupDebugElement.injector\n          .get<MatButtonToggleGroup>(MatButtonToggleGroup);\n\n      fixture.detectChanges();\n\n      // Note that we cast to a boolean, because the event has some circular references\n      // which will crash the runner when Jasmine attempts to stringify them.\n      expect(!!testComponent.lastEvent).toBe(false);\n      expect(groupInstance.value).toBe('red');\n\n      groupInstance.value = 'green';\n      fixture.detectChanges();\n\n      expect(!!testComponent.lastEvent).toBe(false);\n      expect(groupInstance.value).toBe('green');\n    });\n\n  });\n\n  describe('inside of a multiple selection group', () => {\n    let fixture: ComponentFixture<ButtonTogglesInsideButtonToggleGroupMultiple>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let buttonToggleDebugElements: DebugElement[];\n    let buttonToggleNativeElements: HTMLElement[];\n    let buttonToggleLabelElements: HTMLLabelElement[];\n    let groupInstance: MatButtonToggleGroup;\n    let buttonToggleInstances: MatButtonToggle[];\n    let testComponent: ButtonTogglesInsideButtonToggleGroupMultiple;\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(ButtonTogglesInsideButtonToggleGroupMultiple);\n      fixture.detectChanges();\n\n      testComponent = fixture.debugElement.componentInstance;\n\n      groupDebugElement = fixture.debugElement.query(By.directive(MatButtonToggleGroup));\n      groupNativeElement = groupDebugElement.nativeElement;\n      groupInstance = groupDebugElement.injector.get<MatButtonToggleGroup>(MatButtonToggleGroup);\n\n      buttonToggleDebugElements = fixture.debugElement.queryAll(By.directive(MatButtonToggle));\n      buttonToggleNativeElements = buttonToggleDebugElements\n        .map(debugEl => debugEl.nativeElement);\n      buttonToggleLabelElements = fixture.debugElement.queryAll(By.css('button'))\n        .map(debugEl => debugEl.nativeElement);\n      buttonToggleInstances = buttonToggleDebugElements.map(debugEl => debugEl.componentInstance);\n    }));\n\n    it('should disable click interactions when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      buttonToggleNativeElements[0].click();\n      expect(buttonToggleInstances[0].checked).toBe(false);\n    });\n\n    it('should check a button toggle when clicked', () => {\n      expect(buttonToggleInstances.every(buttonToggle => !buttonToggle.checked)).toBe(true);\n\n      let nativeCheckboxLabel = buttonToggleDebugElements[0].query(By.css('button')).nativeElement;\n\n      nativeCheckboxLabel.click();\n\n      expect(groupInstance.value).toEqual(['eggs']);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should allow for multiple toggles to be selected', () => {\n      buttonToggleInstances[0].checked = true;\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toEqual(['eggs']);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n\n      buttonToggleInstances[1].checked = true;\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toEqual(['eggs', 'flour']);\n      expect(buttonToggleInstances[1].checked).toBe(true);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should check a button toggle upon interaction with underlying native checkbox', () => {\n      let nativeCheckboxButton = buttonToggleDebugElements[0].query(By.css('button')).nativeElement;\n\n      nativeCheckboxButton.click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toEqual(['eggs']);\n      expect(buttonToggleInstances[0].checked).toBe(true);\n    });\n\n    it('should change the vertical state', () => {\n      expect(groupNativeElement.classList).not.toContain('mat-button-toggle-vertical');\n\n      groupInstance.vertical = true;\n      fixture.detectChanges();\n\n      expect(groupNativeElement.classList).toContain('mat-button-toggle-vertical');\n    });\n\n    it('should deselect a button toggle when selected twice', fakeAsync(() => {\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n\n      expect(buttonToggleInstances[0].checked).toBe(true);\n      expect(groupInstance.value).toEqual(['eggs']);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n\n      expect(groupInstance.value).toEqual([]);\n      expect(buttonToggleInstances[0].checked).toBe(false);\n    }));\n\n    it('should emit a change event for state changes', fakeAsync(() => {\n      expect(buttonToggleInstances[0].checked).toBe(false);\n\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\n      buttonToggleInstances[0].change.subscribe(changeSpy);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n      expect(groupInstance.value).toEqual(['eggs']);\n\n      buttonToggleLabelElements[0].click();\n      fixture.detectChanges();\n      tick();\n      expect(groupInstance.value).toEqual([]);\n\n      // The default browser behavior is to emit an event, when the value was set\n      // to false. That's because the current input type is set to `checkbox` when\n      // using the multiple mode.\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should throw when attempting to assign a non-array value', () => {\n      expect(() => {\n        groupInstance.value = 'not-an-array';\n      }).toThrowError(/Value must be an array/);\n    });\n\n    it('should be able to query for the deprecated `MatButtonToggleGroupMultiple`', () => {\n      expect(fixture.debugElement.query(By.directive(MatButtonToggleGroupMultiple))).toBeTruthy();\n    });\n\n  });\n\n  describe('as standalone', () => {\n    let fixture: ComponentFixture<StandaloneButtonToggle>;\n    let buttonToggleDebugElement: DebugElement;\n    let buttonToggleNativeElement: HTMLElement;\n    let buttonToggleLabelElement: HTMLLabelElement;\n    let buttonToggleInstance: MatButtonToggle;\n    let buttonToggleButtonElement: HTMLButtonElement;\n\n    beforeEach(fakeAsync(() => {\n      fixture = TestBed.createComponent(StandaloneButtonToggle);\n      fixture.detectChanges();\n\n      buttonToggleDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\n      buttonToggleNativeElement = buttonToggleDebugElement.nativeElement;\n      buttonToggleLabelElement = fixture.debugElement\n          .query(By.css('.mat-button-toggle-label-content')).nativeElement;\n      buttonToggleInstance = buttonToggleDebugElement.componentInstance;\n      buttonToggleButtonElement =\n          buttonToggleNativeElement.querySelector('button')! as HTMLButtonElement;\n    }));\n\n    it('should toggle when clicked', fakeAsync(() => {\n      buttonToggleLabelElement.click();\n      fixture.detectChanges();\n      flush();\n\n      expect(buttonToggleInstance.checked).toBe(true);\n\n      buttonToggleLabelElement.click();\n      fixture.detectChanges();\n      flush();\n\n      expect(buttonToggleInstance.checked).toBe(false);\n    }));\n\n    it('should emit a change event for state changes', fakeAsync(() => {\n\n      expect(buttonToggleInstance.checked).toBe(false);\n\n      let changeSpy = jasmine.createSpy('button-toggle change listener');\n      buttonToggleInstance.change.subscribe(changeSpy);\n\n      buttonToggleLabelElement.click();\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      buttonToggleLabelElement.click();\n      fixture.detectChanges();\n      tick();\n\n      // The default browser behavior is to emit an event, when the value was set\n      // to false. That's because the current input type is set to `checkbox`.\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should focus on underlying input element when focus() is called', () => {\n      let nativeButton = buttonToggleDebugElement.query(By.css('button')).nativeElement;\n      expect(document.activeElement).not.toBe(nativeButton);\n\n      buttonToggleInstance.focus();\n      fixture.detectChanges();\n\n      expect(document.activeElement).toBe(nativeButton);\n    });\n\n    it('should not assign a name to the underlying input if one is not passed in', () => {\n      expect(buttonToggleButtonElement.getAttribute('name')).toBeFalsy();\n    });\n\n    it('should have correct aria-pressed attribute', () => {\n      expect(buttonToggleButtonElement.getAttribute('aria-pressed'))\n          .toBe('false');\n\n      buttonToggleLabelElement.click();\n\n      fixture.detectChanges();\n\n      expect(buttonToggleButtonElement.getAttribute('aria-pressed'))\n        .toBe('true');\n    });\n  });\n\n  describe('aria-label handling ', () => {\n    it('should not set the aria-label attribute if none is provided', () => {\n      let fixture = TestBed.createComponent(StandaloneButtonToggle);\n      let checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\n      let checkboxNativeElement = checkboxDebugElement.nativeElement;\n      let buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\n\n      fixture.detectChanges();\n      expect(buttonElement.hasAttribute('aria-label')).toBe(false);\n    });\n\n    it('should use the provided aria-label', () => {\n      let fixture = TestBed.createComponent(ButtonToggleWithAriaLabel);\n      let checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\n      let checkboxNativeElement = checkboxDebugElement.nativeElement;\n      let buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\n\n      fixture.detectChanges();\n      expect(buttonElement.getAttribute('aria-label')).toBe('Super effective');\n    });\n  });\n\n  describe('with provided aria-labelledby ', () => {\n    let checkboxDebugElement: DebugElement;\n    let checkboxNativeElement: HTMLElement;\n    let buttonElement: HTMLButtonElement;\n\n    it('should use the provided aria-labelledby', () => {\n      let fixture = TestBed.createComponent(ButtonToggleWithAriaLabelledby);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\n\n      fixture.detectChanges();\n      expect(buttonElement.getAttribute('aria-labelledby')).toBe('some-id');\n    });\n\n    it('should not assign aria-labelledby if none is provided', () => {\n      let fixture = TestBed.createComponent(StandaloneButtonToggle);\n      checkboxDebugElement = fixture.debugElement.query(By.directive(MatButtonToggle));\n      checkboxNativeElement = checkboxDebugElement.nativeElement;\n      buttonElement = checkboxNativeElement.querySelector('button') as HTMLButtonElement;\n\n      fixture.detectChanges();\n      expect(buttonElement.getAttribute('aria-labelledby')).toBe(null);\n    });\n  });\n\n  describe('with tabindex ', () => {\n    it('should forward the tabindex to the underlying button', () => {\n      const fixture = TestBed.createComponent(ButtonToggleWithTabindex);\n      fixture.detectChanges();\n\n      const button = fixture.nativeElement.querySelector('.mat-button-toggle button');\n\n      expect(button.getAttribute('tabindex')).toBe('3');\n    });\n\n    it('should clear the tabindex from the host element', () => {\n      const fixture = TestBed.createComponent(ButtonToggleWithTabindex);\n      fixture.detectChanges();\n\n      const host = fixture.nativeElement.querySelector('.mat-button-toggle');\n\n      expect(host.getAttribute('tabindex')).toBe('-1');\n    });\n\n    it('should forward focus to the underlying button when the host is focused', () => {\n      const fixture = TestBed.createComponent(ButtonToggleWithTabindex);\n      fixture.detectChanges();\n\n      const host = fixture.nativeElement.querySelector('.mat-button-toggle');\n      const button = host.querySelector('button');\n\n      expect(document.activeElement).not.toBe(button);\n\n      host.focus();\n\n      expect(document.activeElement).toBe(button);\n    });\n  });\n\n  it('should not throw on init when toggles are repeated and there is an initial value', () => {\n    const fixture = TestBed.createComponent(RepeatedButtonTogglesWithPreselectedValue);\n\n    expect(() => fixture.detectChanges()).not.toThrow();\n    expect(fixture.componentInstance.toggleGroup.value).toBe('Two');\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(true);\n  });\n\n  it('should maintain the selected state when the value and toggles are swapped out at ' +\n    'the same time', () => {\n      const fixture = TestBed.createComponent(RepeatedButtonTogglesWithPreselectedValue);\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.toggleGroup.value).toBe('Two');\n      expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(true);\n\n      fixture.componentInstance.possibleValues = ['Five', 'Six', 'Seven'];\n      fixture.componentInstance.value = 'Seven';\n      fixture.detectChanges();\n\n      expect(fixture.componentInstance.toggleGroup.value).toBe('Seven');\n      expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(true);\n    });\n\n  it('should select falsy button toggle value in multiple selection', () => {\n    const fixture = TestBed.createComponent(FalsyButtonTogglesInsideButtonToggleGroupMultiple);\n    fixture.detectChanges();\n\n    expect(fixture.componentInstance.toggles.toArray()[0].checked).toBe(true);\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(false);\n    expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(false);\n\n    fixture.componentInstance.value = [0, false];\n    fixture.detectChanges();\n\n    expect(fixture.componentInstance.toggles.toArray()[0].checked).toBe(true);\n    expect(fixture.componentInstance.toggles.toArray()[1].checked).toBe(false);\n    expect(fixture.componentInstance.toggles.toArray()[2].checked).toBe(true);\n  });\n});\n\n@Component({\n  template: `\n  <mat-button-toggle-group [disabled]=\"isGroupDisabled\"\n                           [vertical]=\"isVertical\"\n                           [(value)]=\"groupValue\">\n    <mat-button-toggle value=\"test1\" *ngIf=\"renderFirstToggle\">Test1</mat-button-toggle>\n    <mat-button-toggle value=\"test2\">Test2</mat-button-toggle>\n    <mat-button-toggle value=\"test3\">Test3</mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass ButtonTogglesInsideButtonToggleGroup {\n  isGroupDisabled: boolean = false;\n  isVertical: boolean = false;\n  groupValue: string;\n  renderFirstToggle = true;\n}\n\n@Component({\n  template: `\n  <mat-button-toggle-group\n    [name]=\"groupName\"\n    [(ngModel)]=\"modelValue\"\n    (change)=\"lastEvent = $event\">\n    <mat-button-toggle *ngFor=\"let option of options\" [value]=\"option.value\"\n                       [disableRipple]=\"disableRipple\">\n      {{option.label}}\n    </mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass ButtonToggleGroupWithNgModel {\n  groupName = 'group-name';\n  modelValue: string;\n  options = [\n    {label: 'Red', value: 'red'},\n    {label: 'Green', value: 'green'},\n    {label: 'Blue', value: 'blue'},\n  ];\n  lastEvent: MatButtonToggleChange;\n  disableRipple = false;\n}\n\n@Component({\n  template: `\n  <mat-button-toggle-group [disabled]=\"isGroupDisabled\" [vertical]=\"isVertical\" multiple>\n    <mat-button-toggle value=\"eggs\">Eggs</mat-button-toggle>\n    <mat-button-toggle value=\"flour\">Flour</mat-button-toggle>\n    <mat-button-toggle value=\"sugar\">Sugar</mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass ButtonTogglesInsideButtonToggleGroupMultiple {\n  isGroupDisabled: boolean = false;\n  isVertical: boolean = false;\n}\n\n@Component({\n  template: `\n  <mat-button-toggle-group multiple [value]=\"value\">\n    <mat-button-toggle [value]=\"0\">Eggs</mat-button-toggle>\n    <mat-button-toggle [value]=\"null\">Flour</mat-button-toggle>\n    <mat-button-toggle [value]=\"false\">Sugar</mat-button-toggle>\n    <mat-button-toggle>Sugar</mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass FalsyButtonTogglesInsideButtonToggleGroupMultiple {\n  value: ('' | number | null | undefined | boolean)[] = [0];\n  @ViewChildren(MatButtonToggle) toggles: QueryList<MatButtonToggle>;\n}\n\n@Component({\n  template: `\n  <mat-button-toggle>Yes</mat-button-toggle>\n  `\n})\nclass StandaloneButtonToggle { }\n\n@Component({\n  template: `\n  <mat-button-toggle-group (change)=\"lastEvent = $event\" value=\"red\">\n    <mat-button-toggle value=\"red\">Value Red</mat-button-toggle>\n    <mat-button-toggle value=\"green\">Value Green</mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass ButtonToggleGroupWithInitialValue {\n  lastEvent: MatButtonToggleChange;\n}\n\n@Component({\n  template: `\n  <mat-button-toggle-group [formControl]=\"control\">\n    <mat-button-toggle value=\"red\">Value Red</mat-button-toggle>\n    <mat-button-toggle value=\"green\">Value Green</mat-button-toggle>\n    <mat-button-toggle value=\"blue\">Value Blue</mat-button-toggle>\n  </mat-button-toggle-group>\n  `\n})\nclass ButtonToggleGroupWithFormControl {\n  control = new FormControl();\n}\n\n/** Simple test component with an aria-label set. */\n@Component({\n  template: `<mat-button-toggle aria-label=\"Super effective\"></mat-button-toggle>`\n})\nclass ButtonToggleWithAriaLabel { }\n\n/** Simple test component with an aria-label set. */\n@Component({\n  template: `<mat-button-toggle aria-labelledby=\"some-id\"></mat-button-toggle>`\n})\nclass ButtonToggleWithAriaLabelledby {}\n\n\n@Component({\n  template: `\n    <mat-button-toggle-group [(value)]=\"value\">\n      <mat-button-toggle *ngFor=\"let toggle of possibleValues\" [value]=\"toggle\">\n        {{toggle}}\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  `\n})\nclass RepeatedButtonTogglesWithPreselectedValue {\n  @ViewChild(MatButtonToggleGroup) toggleGroup: MatButtonToggleGroup;\n  @ViewChildren(MatButtonToggle) toggles: QueryList<MatButtonToggle>;\n\n  possibleValues = ['One', 'Two', 'Three'];\n  value = 'Two';\n}\n\n\n@Component({\n  template: `<mat-button-toggle tabindex=\"3\"></mat-button-toggle>`\n})\nclass ButtonToggleWithTabindex {}\n\n"]}