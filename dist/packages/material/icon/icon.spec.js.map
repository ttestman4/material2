{"version":3,"file":"icon.spec.js","sourceRoot":"","sources":["../../../../src/lib/icon/icon.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, async, fakeAsync, tick, TestBed} from '@angular/core/testing';\nimport {SafeResourceUrl, DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\nimport {Component} from '@angular/core';\nimport {MatIconModule, MAT_ICON_LOCATION} from './index';\nimport {MatIconRegistry, getMatIconNoHttpProviderError} from './icon-registry';\nimport {FAKE_SVGS} from './fake-svgs';\nimport {wrappedErrorMessage} from '@angular/cdk/testing';\n\n\n/** Returns the CSS classes assigned to an element as a sorted array. */\nfunction sortedClassNames(element: Element): string[] {\n  return element.className.split(' ').sort();\n}\n\n/**\n * Verifies that an element contains a single `<svg>` child element, and returns that child.\n */\nfunction verifyAndGetSingleSvgChild(element: SVGElement): SVGElement {\n  expect(element.id).toBeFalsy();\n  expect(element.childNodes.length).toBe(1);\n  const svgChild = element.childNodes[0] as SVGElement;\n  expect(svgChild.tagName.toLowerCase()).toBe('svg');\n  return svgChild;\n}\n\n/**\n * Verifies that an element contains a single `<path>` child element whose \"id\" attribute has\n * the specified value.\n */\nfunction verifyPathChildElement(element: Element, attributeValue: string): void {\n  expect(element.childNodes.length).toBe(1);\n  const pathElement = element.childNodes[0] as SVGPathElement;\n  expect(pathElement.tagName.toLowerCase()).toBe('path');\n\n  // The testing data SVGs have the name attribute set for verification.\n  expect(pathElement.getAttribute('name')).toBe(attributeValue);\n}\n\n\ndescribe('MatIcon', () => {\n  let fakePath: string;\n\n  beforeEach(async(() => {\n    fakePath = '/fake-path';\n\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, MatIconModule],\n      declarations: [\n        IconWithColor,\n        IconWithLigature,\n        IconWithCustomFontCss,\n        IconFromSvgName,\n        IconWithAriaHiddenFalse,\n        IconWithBindingAndNgIf,\n        InlineIcon,\n        SvgIconWithUserContent,\n      ],\n      providers: [{\n        provide: MAT_ICON_LOCATION,\n        useValue: {getPathname: () => fakePath}\n      }]\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  let iconRegistry: MatIconRegistry;\n  let http: HttpTestingController;\n  let sanitizer: DomSanitizer;\n\n  beforeEach(inject([MatIconRegistry, HttpTestingController, DomSanitizer],\n    (mir: MatIconRegistry, h: HttpTestingController, ds: DomSanitizer) => {\n      iconRegistry = mir;\n      http = h;\n      sanitizer = ds;\n    }));\n\n  it('should apply class based on color attribute', () => {\n    let fixture = TestBed.createComponent(IconWithColor);\n\n    const testComponent = fixture.componentInstance;\n    const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n    testComponent.iconName = 'home';\n    testComponent.iconColor = 'primary';\n    fixture.detectChanges();\n    expect(sortedClassNames(matIconElement)).toEqual(['mat-icon', 'mat-primary', 'material-icons']);\n  });\n\n  it('should apply a class if there is no color', () => {\n    let fixture = TestBed.createComponent(IconWithColor);\n\n    const testComponent = fixture.componentInstance;\n    const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n    testComponent.iconName = 'home';\n    testComponent.iconColor = '';\n    fixture.detectChanges();\n\n    expect(sortedClassNames(matIconElement))\n        .toEqual(['mat-icon', 'mat-icon-no-color', 'material-icons']);\n  });\n\n  it('should mark mat-icon as aria-hidden by default', () => {\n    const fixture = TestBed.createComponent(IconWithLigature);\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n    expect(iconElement.getAttribute('aria-hidden'))\n      .toBe('true', 'Expected the mat-icon element has aria-hidden=\"true\" by default');\n  });\n\n  it('should not override a user-provided aria-hidden attribute', () => {\n    const fixture = TestBed.createComponent(IconWithAriaHiddenFalse);\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n    expect(iconElement.getAttribute('aria-hidden'))\n      .toBe('false', 'Expected the mat-icon element has the user-provided aria-hidden value');\n  });\n\n  it('should apply inline styling', () => {\n    const fixture = TestBed.createComponent(InlineIcon);\n    const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n    expect(iconElement.classList.contains('mat-icon-inline'))\n      .toBeFalsy('Expected the mat-icon element to not include the inline styling class');\n\n    fixture.debugElement.componentInstance.inline = true;\n    fixture.detectChanges();\n    expect(iconElement.classList.contains('mat-icon-inline'))\n      .toBeTruthy('Expected the mat-icon element to include the inline styling class');\n  });\n\n  describe('Ligature icons', () => {\n    it('should add material-icons class by default', () => {\n      let fixture = TestBed.createComponent(IconWithLigature);\n\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      testComponent.iconName = 'home';\n      fixture.detectChanges();\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['mat-icon', 'mat-icon-no-color', 'material-icons']);\n    });\n\n    it('should use alternate icon font if set', () => {\n      iconRegistry.setDefaultFontSetClass('myfont');\n\n      let fixture = TestBed.createComponent(IconWithLigature);\n\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      testComponent.iconName = 'home';\n      fixture.detectChanges();\n      expect(sortedClassNames(matIconElement)).toEqual(['mat-icon', 'mat-icon-no-color', 'myfont']);\n    });\n  });\n\n  describe('Icons from URLs', () => {\n    it('should register icon URLs by name', fakeAsync(() => {\n      iconRegistry.addSvgIcon('fluffy', trustUrl('cat.svg'));\n      iconRegistry.addSvgIcon('fido', trustUrl('dog.svg'));\n\n      let fixture = TestBed.createComponent(IconFromSvgName);\n      let svgElement: SVGElement;\n      const testComponent = fixture.componentInstance;\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.iconName = 'fido';\n      fixture.detectChanges();\n      http.expectOne('dog.svg').flush(FAKE_SVGS.dog);\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\n      verifyPathChildElement(svgElement, 'woof');\n\n      // Change the icon, and the SVG element should be replaced.\n      testComponent.iconName = 'fluffy';\n      fixture.detectChanges();\n      http.expectOne('cat.svg').flush(FAKE_SVGS.cat);\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\n      verifyPathChildElement(svgElement, 'meow');\n\n      // Using an icon from a previously loaded URL should not cause another HTTP request.\n      testComponent.iconName = 'fido';\n      fixture.detectChanges();\n      http.expectNone('dog.svg');\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\n      verifyPathChildElement(svgElement, 'woof');\n\n      // Assert that a registered icon can be looked-up by url.\n      iconRegistry.getSvgIconFromUrl(trustUrl('cat.svg')).subscribe(element => {\n        verifyPathChildElement(element, 'meow');\n      });\n\n      tick();\n    }));\n\n    it('should throw an error when using an untrusted icon url', () => {\n      iconRegistry.addSvgIcon('fluffy', 'farm-set-1.svg');\n\n      expect(() => {\n        let fixture = TestBed.createComponent(IconFromSvgName);\n        fixture.componentInstance.iconName = 'fluffy';\n        fixture.detectChanges();\n      }).toThrowError(/unsafe value used in a resource URL context/);\n    });\n\n    it('should throw an error when using an untrusted icon set url', () => {\n      iconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\n\n      expect(() => {\n        let fixture = TestBed.createComponent(IconFromSvgName);\n        fixture.componentInstance.iconName = 'farm:pig';\n        fixture.detectChanges();\n      }).toThrowError(/unsafe value used in a resource URL context/);\n    });\n\n    it('should extract icon from SVG icon set', () => {\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n      let svgChild: any;\n\n      testComponent.iconName = 'farm:pig';\n      fixture.detectChanges();\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\n\n      expect(matIconElement.childNodes.length).toBe(1);\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      expect(svgElement.childNodes.length).toBe(1);\n      svgChild = svgElement.childNodes[0];\n      // The first <svg> child should be the <g id=\"pig\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('pig');\n      verifyPathChildElement(svgChild, 'oink');\n\n      // Change the icon, and the SVG element should be replaced.\n      testComponent.iconName = 'farm:cow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      svgChild = svgElement.childNodes[0];\n      // The first <svg> child should be the <g id=\"cow\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('cow');\n      verifyPathChildElement(svgChild, 'moo');\n    });\n\n    it('should never parse the same icon set multiple times', () => {\n      // Normally we avoid spying on private methods like this, but the parsing is a private\n      // implementation detail that should not be exposed to the public API. This test, though,\n      // is important enough to warrant the brittle-ness that results.\n      spyOn(iconRegistry, '_svgElementFromString' as any).and.callThrough();\n\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\n\n      // Requests for icons must be subscribed to in order for requests to be made.\n      iconRegistry.getNamedSvgIcon('pig', 'farm').subscribe(() => {});\n      iconRegistry.getNamedSvgIcon('cow', 'farm').subscribe(() => {});\n\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\n\n      // _svgElementFromString is called once for each icon to create an empty SVG element\n      // and once to parse the full icon set.\n      expect((iconRegistry as any)._svgElementFromString).toHaveBeenCalledTimes(3);\n    });\n\n    it('should allow multiple icon sets in a namespace', () => {\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-2.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n      let svgChild: any;\n\n      testComponent.iconName = 'farm:pig';\n      fixture.detectChanges();\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\n      http.expectOne('farm-set-2.svg').flush(FAKE_SVGS.farmSet2);\n\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      expect(svgElement.childNodes.length).toBe(1);\n      svgChild = svgElement.childNodes[0];\n      // The <svg> child should be the <g id=\"pig\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('pig');\n      expect(svgChild.getAttribute('id')).toBeFalsy();\n      expect(svgChild.childNodes.length).toBe(1);\n      verifyPathChildElement(svgChild, 'oink');\n\n      // Change the icon name to one that appears in both icon sets. The icon from the set that\n      // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\n      // and no additional HTTP request should be made.\n      testComponent.iconName = 'farm:cow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      svgChild = svgElement.childNodes[0];\n      // The first <svg> child should be the <g id=\"cow\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('cow');\n      expect(svgChild.childNodes.length).toBe(1);\n      verifyPathChildElement(svgChild, 'moo moo');\n    });\n\n    it('should clear the id attribute from the svg node', () => {\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-1.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n\n      fixture.componentInstance.iconName = 'farm:pig';\n      fixture.detectChanges();\n      http.expectOne('farm-set-1.svg').flush(FAKE_SVGS.farmSet1);\n\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      const svgElement = verifyAndGetSingleSvgChild(matIconElement);\n\n      expect(svgElement.hasAttribute('id')).toBe(false);\n    });\n\n    it('should unwrap <symbol> nodes', () => {\n      iconRegistry.addSvgIconSetInNamespace('farm', trustUrl('farm-set-3.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.iconName = 'farm:duck';\n      fixture.detectChanges();\n      http.expectOne('farm-set-3.svg').flush(FAKE_SVGS.farmSet3);\n\n      const svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      const firstChild = svgElement.childNodes[0];\n\n      expect(svgElement.querySelector('symbol')).toBeFalsy();\n      expect(svgElement.childNodes.length).toBe(1);\n      expect(firstChild.nodeName.toLowerCase()).toBe('path');\n      expect((firstChild as HTMLElement).getAttribute('name')).toBe('quack');\n    });\n\n    it('should not wrap <svg> elements in icon sets in another svg tag', () => {\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\n\n      // arrow-set.svg stores its icons as nested <svg> elements, so they should be used\n      // directly and not wrapped in an outer <svg> tag like the <g> elements in other sets.\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'left');\n    });\n\n    it('should return unmodified copies of icons from icon sets', () => {\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'left');\n      // Modify the SVG element by setting a viewBox attribute.\n      svgElement.setAttribute('viewBox', '0 0 100 100');\n\n      // Switch to a different icon.\n      testComponent.iconName = 'right-arrow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'right');\n\n      // Switch back to the first icon. The viewBox attribute should not be present.\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'left');\n      expect(svgElement.getAttribute('viewBox')).toBeFalsy();\n    });\n\n    it('should not throw when toggling an icon that has a binding in IE11', () => {\n      iconRegistry.addSvgIcon('fluffy', trustUrl('cat.svg'));\n\n      const fixture = TestBed.createComponent(IconWithBindingAndNgIf);\n\n      fixture.detectChanges();\n      http.expectOne('cat.svg').flush(FAKE_SVGS.cat);\n\n      expect(() => {\n        fixture.componentInstance.showIcon = false;\n        fixture.detectChanges();\n\n        fixture.componentInstance.showIcon = true;\n        fixture.detectChanges();\n      }).not.toThrow();\n    });\n\n    it('should remove the SVG element from the DOM when the binding is cleared', () => {\n      iconRegistry.addSvgIconSet(trustUrl('arrow-set.svg'));\n\n      let fixture = TestBed.createComponent(IconFromSvgName);\n\n      const testComponent = fixture.componentInstance;\n      const icon = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      http.expectOne('arrow-set.svg').flush(FAKE_SVGS.arrows);\n\n      expect(icon.querySelector('svg')).toBeTruthy();\n\n      testComponent.iconName = undefined;\n      fixture.detectChanges();\n\n      expect(icon.querySelector('svg')).toBeFalsy();\n    });\n\n    it('should keep non-SVG user content inside the icon element', fakeAsync(() => {\n      iconRegistry.addSvgIcon('fido', trustUrl('dog.svg'));\n\n      const fixture = TestBed.createComponent(SvgIconWithUserContent);\n      const testComponent = fixture.componentInstance;\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.iconName = 'fido';\n      fixture.detectChanges();\n      http.expectOne('dog.svg').flush(FAKE_SVGS.dog);\n\n      const userDiv = iconElement.querySelector('div');\n\n      expect(userDiv).toBeTruthy();\n      expect(iconElement.textContent.trim()).toContain('Hello');\n\n      tick();\n    }));\n\n  });\n\n  describe('Icons from HTML string', () => {\n    it('should register icon HTML strings by name', fakeAsync(() => {\n      iconRegistry.addSvgIconLiteral('fluffy', trustHtml(FAKE_SVGS.cat));\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(FAKE_SVGS.dog));\n\n      let fixture = TestBed.createComponent(IconFromSvgName);\n      let svgElement: SVGElement;\n      const testComponent = fixture.componentInstance;\n      const iconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.iconName = 'fido';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\n      verifyPathChildElement(svgElement, 'woof');\n\n      testComponent.iconName = 'fluffy';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(iconElement);\n      verifyPathChildElement(svgElement, 'meow');\n\n      // Assert that a registered icon can be looked-up by name.\n      iconRegistry.getNamedSvgIcon('fluffy').subscribe(element => {\n        verifyPathChildElement(element, 'meow');\n      });\n\n      tick();\n    }));\n\n    it('should throw an error when using untrusted HTML', () => {\n      // Stub out console.warn so we don't pollute our logs with Angular's warnings.\n      // Jasmine will tear the spy down at the end of the test.\n      spyOn(console, 'warn');\n\n      expect(() => {\n        iconRegistry.addSvgIconLiteral('circle', '<svg><circle></svg>');\n      }).toThrowError(/was not trusted as safe HTML/);\n    });\n\n    it('should extract an icon from SVG icon set', () => {\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet1));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n      let svgChild: any;\n\n      testComponent.iconName = 'farm:pig';\n      fixture.detectChanges();\n\n      expect(matIconElement.childNodes.length).toBe(1);\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      expect(svgElement.childNodes.length).toBe(1);\n      svgChild = svgElement.childNodes[0];\n\n      // The first <svg> child should be the <g id=\"pig\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('pig');\n      verifyPathChildElement(svgChild, 'oink');\n\n      // Change the icon, and the SVG element should be replaced.\n      testComponent.iconName = 'farm:cow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      svgChild = svgElement.childNodes[0];\n\n      // The first <svg> child should be the <g id=\"cow\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('cow');\n      verifyPathChildElement(svgChild, 'moo');\n    });\n\n    it('should allow multiple icon sets in a namespace', () => {\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet1));\n      iconRegistry.addSvgIconSetLiteralInNamespace('farm', trustHtml(FAKE_SVGS.farmSet2));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n      let svgChild: any;\n\n      testComponent.iconName = 'farm:pig';\n      fixture.detectChanges();\n\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      expect(svgElement.childNodes.length).toBe(1);\n      svgChild = svgElement.childNodes[0];\n\n      // The <svg> child should be the <g id=\"pig\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('pig');\n      expect(svgChild.getAttribute('id')).toBeFalsy();\n      expect(svgChild.childNodes.length).toBe(1);\n      verifyPathChildElement(svgChild, 'oink');\n\n      // Change the icon name to one that appears in both icon sets. The icon from the set that\n      // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\n      // and no additional HTTP request should be made.\n      testComponent.iconName = 'farm:cow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      svgChild = svgElement.childNodes[0];\n\n      // The first <svg> child should be the <g id=\"cow\"> element.\n      expect(svgChild.tagName.toLowerCase()).toBe('g');\n      expect(svgChild.getAttribute('name')).toBe('cow');\n      expect(svgChild.childNodes.length).toBe(1);\n      verifyPathChildElement(svgChild, 'moo moo');\n    });\n\n    it('should return unmodified copies of icons from icon sets', () => {\n      iconRegistry.addSvgIconSetLiteral(trustHtml(FAKE_SVGS.arrows));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n      let svgElement: any;\n\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'left');\n\n      // Modify the SVG element by setting a viewBox attribute.\n      svgElement.setAttribute('viewBox', '0 0 100 100');\n\n      // Switch to a different icon.\n      testComponent.iconName = 'right-arrow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'right');\n\n      // Switch back to the first icon. The viewBox attribute should not be present.\n      testComponent.iconName = 'left-arrow';\n      fixture.detectChanges();\n      svgElement = verifyAndGetSingleSvgChild(matIconElement);\n      verifyPathChildElement(svgElement, 'left');\n      expect(svgElement.getAttribute('viewBox')).toBeFalsy();\n    });\n\n    it('should add an extra string to the end of `style` tags inside SVG', fakeAsync(() => {\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(`\n        <svg>\n          <style>#woof {color: blue;}</style>\n          <path id=\"woof\" name=\"woof\"></path>\n        </svg>\n      `));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n      const styleTag = fixture.nativeElement.querySelector('mat-icon svg style');\n\n      // Note the extra whitespace at the end which is what we're testing for. This is a\n      // workaround for IE and Edge ignoring `style` tags in dynamically-created SVGs.\n      expect(styleTag.textContent).toBe('#woof {color: blue;} ');\n\n      tick();\n    }));\n\n    it('should prepend the current path to attributes with `url()` references', fakeAsync(() => {\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(`\n        <svg>\n          <filter id=\"blur\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n          </filter>\n\n          <circle cx=\"170\" cy=\"60\" r=\"50\" fill=\"green\" filter=\"url('#blur')\" />\n        </svg>\n      `));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n      const circle = fixture.nativeElement.querySelector('mat-icon svg circle');\n\n      // We use a regex to match here, rather than the exact value, because different browsers\n      // return different quotes through `getAttribute`, while some even omit the quotes altogether.\n      expect(circle.getAttribute('filter')).toMatch(/^url\\(['\"]?\\/fake-path#blur['\"]?\\)$/);\n\n      tick();\n    }));\n\n    it('should use latest path when prefixing the `url()` references', fakeAsync(() => {\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(`\n        <svg>\n          <filter id=\"blur\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n          </filter>\n\n          <circle cx=\"170\" cy=\"60\" r=\"50\" fill=\"green\" filter=\"url('#blur')\" />\n        </svg>\n      `));\n\n      let fixture = TestBed.createComponent(IconFromSvgName);\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n      let circle = fixture.nativeElement.querySelector('mat-icon svg circle');\n\n      expect(circle.getAttribute('filter')).toMatch(/^url\\(['\"]?\\/fake-path#blur['\"]?\\)$/);\n      tick();\n      fixture.destroy();\n\n      fakePath = '/another-fake-path';\n      fixture = TestBed.createComponent(IconFromSvgName);\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n      circle = fixture.nativeElement.querySelector('mat-icon svg circle');\n\n      expect(circle.getAttribute('filter')).toMatch(/^url\\(['\"]?\\/another-fake-path#blur['\"]?\\)$/);\n      tick();\n    }));\n\n    it('should update the `url()` references when the path changes', fakeAsync(() => {\n      iconRegistry.addSvgIconLiteral('fido', trustHtml(`\n        <svg>\n          <filter id=\"blur\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n          </filter>\n\n          <circle cx=\"170\" cy=\"60\" r=\"50\" fill=\"green\" filter=\"url('#blur')\" />\n        </svg>\n      `));\n\n      const fixture = TestBed.createComponent(IconFromSvgName);\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n      const circle = fixture.nativeElement.querySelector('mat-icon svg circle');\n\n      // We use a regex to match here, rather than the exact value, because different browsers\n      // return different quotes through `getAttribute`, while some even omit the quotes altogether.\n      expect(circle.getAttribute('filter')).toMatch(/^url\\(['\"]?\\/fake-path#blur['\"]?\\)$/);\n      tick();\n\n      fakePath = '/different-path';\n      fixture.detectChanges();\n\n      expect(circle.getAttribute('filter')).toMatch(/^url\\(['\"]?\\/different-path#blur['\"]?\\)$/);\n    }));\n\n  });\n\n  describe('custom fonts', () => {\n    it('should apply CSS classes for custom font and icon', () => {\n      iconRegistry.registerFontClassAlias('f1', 'font1');\n      iconRegistry.registerFontClassAlias('f2');\n\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\n      const testComponent = fixture.componentInstance;\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      testComponent.fontSet = 'f1';\n      testComponent.fontIcon = 'house';\n      fixture.detectChanges();\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['font1', 'house', 'mat-icon', 'mat-icon-no-color']);\n\n      testComponent.fontSet = 'f2';\n      testComponent.fontIcon = 'igloo';\n      fixture.detectChanges();\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['f2', 'igloo', 'mat-icon', 'mat-icon-no-color']);\n\n      testComponent.fontSet = 'f3';\n      testComponent.fontIcon = 'tent';\n      fixture.detectChanges();\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['f3', 'mat-icon', 'mat-icon-no-color', 'tent']);\n    });\n\n    it('should handle values with extraneous spaces being passed in to `fontSet`', () => {\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      expect(() => {\n        fixture.componentInstance.fontSet = 'font set';\n        fixture.detectChanges();\n      }).not.toThrow();\n\n      expect(sortedClassNames(matIconElement)).toEqual(['font', 'mat-icon', 'mat-icon-no-color']);\n\n      expect(() => {\n        fixture.componentInstance.fontSet = ' changed';\n        fixture.detectChanges();\n      }).not.toThrow();\n\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['changed', 'mat-icon', 'mat-icon-no-color']);\n    });\n\n    it('should handle values with extraneous spaces being passed in to `fontIcon`', () => {\n      const fixture = TestBed.createComponent(IconWithCustomFontCss);\n      const matIconElement = fixture.debugElement.nativeElement.querySelector('mat-icon');\n\n      expect(() => {\n        fixture.componentInstance.fontIcon = 'font icon';\n        fixture.detectChanges();\n      }).not.toThrow();\n\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['font', 'mat-icon', 'mat-icon-no-color', 'material-icons']);\n\n      expect(() => {\n        fixture.componentInstance.fontIcon = ' changed';\n        fixture.detectChanges();\n      }).not.toThrow();\n\n      expect(sortedClassNames(matIconElement))\n          .toEqual(['changed', 'mat-icon', 'mat-icon-no-color', 'material-icons']);\n    });\n\n  });\n\n  /** Marks an SVG icon url as explicitly trusted. */\n  function trustUrl(iconUrl: string): SafeResourceUrl {\n    return sanitizer.bypassSecurityTrustResourceUrl(iconUrl);\n  }\n\n  /** Marks an SVG icon string as explicitly trusted. */\n  function trustHtml(iconHtml: string): SafeHtml {\n    return sanitizer.bypassSecurityTrustHtml(iconHtml);\n  }\n});\n\n\ndescribe('MatIcon without HttpClientModule', () => {\n  let iconRegistry: MatIconRegistry;\n  let sanitizer: DomSanitizer;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatIconModule],\n      declarations: [IconFromSvgName],\n    });\n\n    TestBed.compileComponents();\n  }));\n\n  beforeEach(inject([MatIconRegistry, DomSanitizer], (mir: MatIconRegistry, ds: DomSanitizer) => {\n    iconRegistry = mir;\n    sanitizer = ds;\n  }));\n\n  it('should throw an error when trying to load a remote icon', async() => {\n    const expectedError = wrappedErrorMessage(getMatIconNoHttpProviderError());\n\n    expect(() => {\n      iconRegistry.addSvgIcon('fido', sanitizer.bypassSecurityTrustResourceUrl('dog.svg'));\n\n      let fixture = TestBed.createComponent(IconFromSvgName);\n\n      fixture.componentInstance.iconName = 'fido';\n      fixture.detectChanges();\n    }).toThrowError(expectedError);\n  });\n});\n\n\n@Component({template: `<mat-icon>{{iconName}}</mat-icon>`})\nclass IconWithLigature {\n  iconName = '';\n}\n\n@Component({template: `<mat-icon [color]=\"iconColor\">{{iconName}}</mat-icon>`})\nclass IconWithColor {\n  iconName = '';\n  iconColor = 'primary';\n}\n\n@Component({template: `<mat-icon [fontSet]=\"fontSet\" [fontIcon]=\"fontIcon\"></mat-icon>`})\nclass IconWithCustomFontCss {\n  fontSet = '';\n  fontIcon = '';\n}\n\n@Component({template: `<mat-icon [svgIcon]=\"iconName\"></mat-icon>`})\nclass IconFromSvgName {\n  iconName: string | undefined = '';\n}\n\n@Component({template: '<mat-icon aria-hidden=\"false\">face</mat-icon>'})\nclass IconWithAriaHiddenFalse {}\n\n@Component({template: `<mat-icon [svgIcon]=\"iconName\" *ngIf=\"showIcon\">{{iconName}}</mat-icon>`})\nclass IconWithBindingAndNgIf {\n  iconName = 'fluffy';\n  showIcon = true;\n}\n\n@Component({template: `<mat-icon [inline]=\"inline\">{{iconName}}</mat-icon>`})\nclass InlineIcon {\n  inline = false;\n}\n\n@Component({template: `<mat-icon [svgIcon]=\"iconName\"><div>Hello</div></mat-icon>`})\nclass SvgIconWithUserContent {\n  iconName: string | undefined = '';\n}\n"]}