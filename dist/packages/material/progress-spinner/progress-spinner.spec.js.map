{"version":3,"file":"progress-spinner.spec.js","sourceRoot":"","sources":["../../../../src/lib/progress-spinner/progress-spinner.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {TestBed, async} from '@angular/core/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {\n  MatProgressSpinnerModule,\n  MatProgressSpinner,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n} from './index';\n\n\ndescribe('MatProgressSpinner', () => {\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [MatProgressSpinnerModule],\n      declarations: [\n        BasicProgressSpinner,\n        IndeterminateProgressSpinner,\n        ProgressSpinnerWithValueAndBoundMode,\n        ProgressSpinnerWithColor,\n        ProgressSpinnerCustomStrokeWidth,\n        ProgressSpinnerCustomDiameter,\n        SpinnerWithColor,\n        ProgressSpinnerWithStringValues,\n      ],\n    }).compileComponents();\n  }));\n\n  it('should apply a mode of \"determinate\" if no mode is provided.', () => {\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    expect(progressElement.componentInstance.mode).toBe('determinate');\n  });\n\n  it('should not modify the mode if a valid mode is provided.', () => {\n    let fixture = TestBed.createComponent(IndeterminateProgressSpinner);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    expect(progressElement.componentInstance.mode).toBe('indeterminate');\n  });\n\n  it('should define a default value of zero for the value attribute', () => {\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    expect(progressElement.componentInstance.value).toBe(0);\n  });\n\n  it('should set the value to 0 when the mode is set to indeterminate', () => {\n    let fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    fixture.componentInstance.mode = 'determinate';\n    fixture.detectChanges();\n\n    expect(progressElement.componentInstance.value).toBe(50);\n    fixture.componentInstance.mode = 'indeterminate';\n    fixture.detectChanges();\n    expect(progressElement.componentInstance.value).toBe(0);\n  });\n\n  it('should retain the value if it updates while indeterminate', () => {\n    let fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n\n    fixture.componentInstance.mode = 'determinate';\n    fixture.detectChanges();\n    expect(progressElement.componentInstance.value).toBe(50);\n\n    fixture.componentInstance.mode = 'indeterminate';\n    fixture.detectChanges();\n    expect(progressElement.componentInstance.value).toBe(0);\n\n    fixture.componentInstance.value = 75;\n    fixture.detectChanges();\n    expect(progressElement.componentInstance.value).toBe(0);\n\n    fixture.componentInstance.mode = 'determinate';\n    fixture.detectChanges();\n    expect(progressElement.componentInstance.value).toBe(75);\n  });\n\n  it('should use different `circle` elements depending on the mode', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerWithValueAndBoundMode);\n\n    fixture.componentInstance.mode = 'determinate';\n    fixture.detectChanges();\n\n    const determinateCircle = fixture.nativeElement.querySelector('circle');\n\n    fixture.componentInstance.mode = 'indeterminate';\n    fixture.detectChanges();\n\n    const indeterminateCircle = fixture.nativeElement.querySelector('circle');\n\n    expect(determinateCircle).toBeTruthy();\n    expect(indeterminateCircle).toBeTruthy();\n    expect(determinateCircle).not.toBe(indeterminateCircle);\n  });\n\n  it('should clamp the value of the progress between 0 and 100', () => {\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    let progressComponent = progressElement.componentInstance;\n\n    progressComponent.value = 50;\n    expect(progressComponent.value).toBe(50);\n\n    progressComponent.value = 0;\n    expect(progressComponent.value).toBe(0);\n\n    progressComponent.value = 100;\n    expect(progressComponent.value).toBe(100);\n\n    progressComponent.value = 999;\n    expect(progressComponent.value).toBe(100);\n\n    progressComponent.value = -10;\n    expect(progressComponent.value).toBe(0);\n  });\n\n  it('should default to a stroke width that is 10% of the diameter', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomDiameter);\n    const spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\n\n    fixture.componentInstance.diameter = 67;\n    fixture.detectChanges();\n\n    expect(spinner.componentInstance.strokeWidth).toBe(6.7);\n  });\n\n  it('should allow a custom diameter', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomDiameter);\n    const spinner = fixture.debugElement.query(By.css('mat-progress-spinner')).nativeElement;\n    const svgElement = fixture.nativeElement.querySelector('svg');\n\n    fixture.componentInstance.diameter = 32;\n    fixture.detectChanges();\n\n    expect(parseInt(spinner.style.width))\n        .toBe(32, 'Expected the custom diameter to be applied to the host element width.');\n    expect(parseInt(spinner.style.height))\n        .toBe(32, 'Expected the custom diameter to be applied to the host element height.');\n    expect(parseInt(svgElement.style.width))\n        .toBe(32, 'Expected the custom diameter to be applied to the svg element width.');\n    expect(parseInt(svgElement.style.height))\n        .toBe(32, 'Expected the custom diameter to be applied to the svg element height.');\n    expect(svgElement.getAttribute('viewBox'))\n        .toBe('0 0 25.2 25.2', 'Expected the custom diameter to be applied to the svg viewBox.');\n  });\n\n  it('should allow a custom stroke width', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\n\n    fixture.componentInstance.strokeWidth = 40;\n    fixture.detectChanges();\n\n    const circleElement = fixture.nativeElement.querySelector('circle');\n    const svgElement = fixture.nativeElement.querySelector('svg');\n\n    expect(parseInt(circleElement.style.strokeWidth)).toBe(40, 'Expected the custom stroke ' +\n      'width to be applied to the circle element as a percentage of the element size.');\n    expect(svgElement.getAttribute('viewBox'))\n      .toBe('0 0 130 130', 'Expected the viewBox to be adjusted based on the stroke width.');\n  });\n\n  it('should expand the host element if the stroke width is greater than the default', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\n    const element = fixture.debugElement.nativeElement.querySelector('.mat-progress-spinner');\n\n    fixture.componentInstance.strokeWidth = 40;\n    fixture.detectChanges();\n\n    expect(element.style.width).toBe('100px');\n    expect(element.style.height).toBe('100px');\n  });\n\n  it('should not collapse the host element if the stroke width is less than the default', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerCustomStrokeWidth);\n    const element = fixture.debugElement.nativeElement.querySelector('.mat-progress-spinner');\n\n    fixture.componentInstance.strokeWidth = 5;\n    fixture.detectChanges();\n\n    expect(element.style.width).toBe('100px');\n    expect(element.style.height).toBe('100px');\n  });\n\n  it('should set the color class on the mat-spinner', () => {\n    let fixture = TestBed.createComponent(SpinnerWithColor);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-spinner'));\n\n    expect(progressElement.nativeElement.classList).toContain('mat-primary');\n\n    fixture.componentInstance.color = 'accent';\n    fixture.detectChanges();\n\n    expect(progressElement.nativeElement.classList).toContain('mat-accent');\n    expect(progressElement.nativeElement.classList).not.toContain('mat-primary');\n  });\n\n  it('should set the color class on the mat-progress-spinner', () => {\n    let fixture = TestBed.createComponent(ProgressSpinnerWithColor);\n    fixture.detectChanges();\n\n    let progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n\n    expect(progressElement.nativeElement.classList).toContain('mat-primary');\n\n    fixture.componentInstance.color = 'accent';\n    fixture.detectChanges();\n\n    expect(progressElement.nativeElement.classList).toContain('mat-accent');\n    expect(progressElement.nativeElement.classList).not.toContain('mat-primary');\n  });\n\n  it('should remove the underlying SVG element from the tab order explicitly', () => {\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\n\n    fixture.detectChanges();\n\n    expect(fixture.nativeElement.querySelector('svg').getAttribute('focusable')).toBe('false');\n  });\n\n  it('should handle the number inputs being passed in as strings', () => {\n    const fixture = TestBed.createComponent(ProgressSpinnerWithStringValues);\n    const spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\n    const svgElement = spinner.nativeElement.querySelector('svg');\n\n    fixture.detectChanges();\n\n    expect(spinner.componentInstance.diameter).toBe(37);\n    expect(spinner.componentInstance.strokeWidth).toBe(11);\n    expect(spinner.componentInstance.value).toBe(25);\n\n    expect(spinner.nativeElement.style.width).toBe('37px');\n    expect(spinner.nativeElement.style.height).toBe('37px');\n    expect(svgElement.style.width).toBe('37px');\n    expect(svgElement.style.height).toBe('37px');\n    expect(svgElement.getAttribute('viewBox')).toBe('0 0 38 38');\n  });\n\n  it('should update the element size when changed dynamically', () => {\n    let fixture = TestBed.createComponent(BasicProgressSpinner);\n    let spinner = fixture.debugElement.query(By.directive(MatProgressSpinner));\n    spinner.componentInstance.diameter = 32;\n    fixture.detectChanges();\n    expect(spinner.nativeElement.style.width).toBe('32px');\n    expect(spinner.nativeElement.style.height).toBe('32px');\n  });\n\n  it('should be able to set a default diameter', () => {\n    TestBed\n      .resetTestingModule()\n      .configureTestingModule({\n        imports: [MatProgressSpinnerModule],\n        declarations: [BasicProgressSpinner],\n        providers: [{\n          provide: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n          useValue: {diameter: 23}\n        }]\n      })\n      .compileComponents();\n\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\n    fixture.detectChanges();\n\n    const progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    expect(progressElement.componentInstance.diameter).toBe(23);\n  });\n\n  it('should be able to set a default stroke width', () => {\n    TestBed\n      .resetTestingModule()\n      .configureTestingModule({\n        imports: [MatProgressSpinnerModule],\n        declarations: [BasicProgressSpinner],\n        providers: [{\n          provide: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n          useValue: {strokeWidth: 7}\n        }]\n      })\n      .compileComponents();\n\n    const fixture = TestBed.createComponent(BasicProgressSpinner);\n    fixture.detectChanges();\n\n    const progressElement = fixture.debugElement.query(By.css('mat-progress-spinner'));\n    expect(progressElement.componentInstance.strokeWidth).toBe(7);\n  });\n\n});\n\n\n@Component({template: '<mat-progress-spinner></mat-progress-spinner>'})\nclass BasicProgressSpinner {}\n\n@Component({template: '<mat-progress-spinner [strokeWidth]=\"strokeWidth\"></mat-progress-spinner>'})\nclass ProgressSpinnerCustomStrokeWidth {\n  strokeWidth: number;\n}\n\n@Component({template: '<mat-progress-spinner [diameter]=\"diameter\"></mat-progress-spinner>'})\nclass ProgressSpinnerCustomDiameter {\n  diameter: number;\n}\n\n@Component({template: '<mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>'})\nclass IndeterminateProgressSpinner { }\n\n@Component({\n  template: '<mat-progress-spinner [value]=\"value\" [mode]=\"mode\"></mat-progress-spinner>'\n})\nclass ProgressSpinnerWithValueAndBoundMode {\n  mode = 'indeterminate';\n  value = 50;\n}\n\n@Component({template: `<mat-spinner [color]=\"color\"></mat-spinner>`})\nclass SpinnerWithColor { color: string = 'primary'; }\n\n@Component({template: `<mat-progress-spinner value=\"50\" [color]=\"color\"></mat-progress-spinner>`})\nclass ProgressSpinnerWithColor { color: string = 'primary'; }\n\n@Component({\n  template: `\n    <mat-progress-spinner value=\"25\" diameter=\"37\" strokeWidth=\"11\"></mat-progress-spinner>\n  `\n})\nclass ProgressSpinnerWithStringValues { }\n"]}