{"version":3,"file":"divider.js","sourceRoot":"","sources":["../../../../src/lib/divider/divider.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAC,MAAM,eAAe,CAAC;AAC3F,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAkB5D,MAAM,OAAO,UAAU;IAhBvB;QAqBU,cAAS,GAAY,KAAK,CAAC;QAM3B,WAAM,GAAY,KAAK,CAAC;IAClC,CAAC;;;;;IAVC,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;;;;IAClD,IAAI,QAAQ,CAAC,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;;;IAI/E,IACI,KAAK,KAAc,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;IAC5C,IAAI,KAAK,CAAC,KAAc,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;YA1B1E,SAAS,SAAC;gBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,QAAQ,EAAE,aAAa;gBACvB,IAAI,EAAE;oBACJ,MAAM,EAAE,WAAW;oBACnB,yBAAyB,EAAE,sCAAsC;oBACjE,8BAA8B,EAAE,UAAU;oBAC1C,gCAAgC,EAAE,WAAW;oBAC7C,2BAA2B,EAAE,OAAO;oBACpC,OAAO,EAAE,aAAa;iBACvB;gBACD,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,CAAC,aAAa,CAAC;gBAC1B,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;uBAGE,KAAK;oBAML,KAAK;;;;;;;IAHN,+BAAmC;;;;;IAMnC,4BAAgC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n"]}