{"version":3,"file":"divider.spec.js","sourceRoot":"","sources":["../../../../src/lib/divider/divider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {fakeAsync, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MatDividerModule} from './divider-module';\n\n\ndescribe('MatDivider', () => {\n\n  let fixture: ComponentFixture<MatDividerTestComponent>;\n\n  beforeEach(fakeAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [MatDividerModule],\n      declarations: [MatDividerTestComponent],\n    });\n\n    TestBed.compileComponents();\n    fixture = TestBed.createComponent(MatDividerTestComponent);\n  }));\n\n  it('should apply vertical class to vertical divider', () => {\n    fixture.componentInstance.vertical = true;\n    fixture.detectChanges();\n\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\n    expect(divider.nativeElement.classList).toContain('mat-divider');\n    expect(divider.nativeElement.classList).toContain('mat-divider-vertical');\n  });\n\n  it('should apply horizontal class to horizontal divider', () => {\n    fixture.componentInstance.vertical = false;\n    fixture.detectChanges();\n\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\n    expect(divider.nativeElement.classList).toContain('mat-divider');\n    expect(divider.nativeElement.classList).not.toContain('mat-divider-vertical');\n    expect(divider.nativeElement.classList).toContain('mat-divider-horizontal');\n  });\n\n  it('should apply inset class to inset divider', () => {\n    fixture.componentInstance.inset = true;\n    fixture.detectChanges();\n\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\n    expect(divider.nativeElement.classList).toContain('mat-divider');\n    expect(divider.nativeElement.classList).toContain('mat-divider-inset');\n  });\n\n  it('should apply inset and vertical classes to vertical inset divider', () => {\n    fixture.componentInstance.vertical = true;\n    fixture.componentInstance.inset = true;\n    fixture.detectChanges();\n\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\n    expect(divider.nativeElement.classList).toContain('mat-divider');\n    expect(divider.nativeElement.classList).toContain('mat-divider-inset');\n    expect(divider.nativeElement.classList).toContain('mat-divider-vertical');\n  });\n\n  it('should add aria roles properly', () => {\n    fixture.detectChanges();\n\n    const divider = fixture.debugElement.query(By.css('mat-divider'));\n    expect(divider.nativeElement.getAttribute('role')).toBe('separator');\n  });\n});\n\n@Component({\n  template: `<mat-divider [vertical]=\"vertical\" [inset]=\"inset\"></mat-divider>`\n})\nclass MatDividerTestComponent {\n  vertical: boolean;\n  inset: boolean;\n}\n"]}