{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/dialog/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  TemplateRef,\n  SkipSelf,\n  Optional,\n  Injectable,\n  Injector,\n  Inject,\n  ComponentRef,\n  OnDestroy,\n  Type\n} from '@angular/core';\nimport {ComponentPortal, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\nimport {DialogRef} from './dialog-ref';\nimport {Location} from '@angular/common';\nimport {DialogConfig} from './dialog-config';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDialogContainer} from './dialog-container';\nimport {\n  ComponentType,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {startWith} from 'rxjs/operators';\n\nimport {\n  DIALOG_SCROLL_STRATEGY,\n  DIALOG_DATA,\n  DIALOG_REF,\n  DIALOG_CONTAINER,\n  DIALOG_CONFIG,\n} from './dialog-injectors';\n\n\n/**\n * Service to open modal dialogs.\n */\n@Injectable()\nexport class Dialog implements OnDestroy {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Stream that emits when all dialogs are closed. */\n  get _afterAllClosed(): Observable<void> {\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase;\n  }\n  _afterAllClosedBase = new Subject<void>();\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith<void>(undefined)));\n\n  /** Stream that emits when a dialog is opened. */\n  get afterOpened(): Subject<DialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened;\n  }\n  _afterOpened: Subject<DialogRef<any>> = new Subject();\n\n  /** Stream that emits when a dialog is opened. */\n  get openDialogs(): DialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs;\n  }\n  _openDialogs: DialogRef<any>[] = [];\n\n  constructor(\n      private overlay: Overlay,\n      private injector: Injector,\n      @Inject(DIALOG_REF) private dialogRefConstructor: Type<DialogRef<any>>,\n      // TODO(crisbeto): the `any` here can be replaced\n      // with the proper type once we start using Ivy.\n      @Inject(DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: Dialog,\n      @Optional() location: Location) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /** Gets an open dialog by id. */\n  getById(id: string): DialogRef<any> | undefined {\n    return this._openDialogs.find(ref  => ref.id === id);\n  }\n\n  /** Closes all open dialogs. */\n  closeAll(): void {\n    this.openDialogs.forEach(ref => ref.close());\n  }\n\n  /** Opens a dialog from a component. */\n  openFromComponent<T>(component: ComponentType<T>, config?: DialogConfig): DialogRef<any> {\n    config = this._applyConfigDefaults(config);\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\n      overlayRef, config);\n\n    this.registerDialogRef(dialogRef);\n    return dialogRef;\n  }\n\n  /** Opens a dialog from a template. */\n  openFromTemplate<T>(template: TemplateRef<T>, config?: DialogConfig): DialogRef<any> {\n    config = this._applyConfigDefaults(config);\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\n      overlayRef, config);\n\n    this.registerDialogRef(dialogRef);\n    return dialogRef;\n  }\n\n  ngOnDestroy() {\n    // Only close all the dialogs at this level.\n    this._openDialogs.forEach(ref => ref.close());\n  }\n\n  /**\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\n   */\n  private registerDialogRef(dialogRef: DialogRef<any>): void {\n    this.openDialogs.push(dialogRef);\n\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\n      this.afterOpened.next(dialogRef);\n      dialogOpenSub.unsubscribe();\n    });\n\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\n      let dialogIndex = this._openDialogs.indexOf(dialogRef);\n\n      if (dialogIndex > -1) {\n        this._openDialogs.splice(dialogIndex, 1);\n      }\n\n      if (!this._openDialogs.length) {\n        this._afterAllClosedBase.next();\n        dialogCloseSub.unsubscribe();\n      }\n    });\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  protected _createOverlay(config: DialogConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this.overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n    return this.overlay.create(overlayConfig);\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  protected _attachDialogContainer(overlay: OverlayRef, config: DialogConfig): CdkDialogContainer {\n    const container = config.containerComponent || this.injector.get(DIALOG_CONTAINER);\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\n      [DialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<CdkDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForComponent<T>(\n      componentOrTemplateRef: ComponentType<T>,\n      dialogContainer: CdkDialogContainer,\n      overlayRef: OverlayRef,\n      config: DialogConfig): DialogRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n    const contentRef = dialogContainer.attachComponentPortal(\n        new ComponentPortal(componentOrTemplateRef, undefined, injector));\n\n    dialogRef.componentInstance = contentRef.instance;\n    dialogRef.disableClose = config.disableClose;\n\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForTemplate<T>(\n      componentOrTemplateRef: TemplateRef<T>,\n      dialogContainer: CdkDialogContainer,\n      overlayRef: OverlayRef,\n      config: DialogConfig): DialogRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n    dialogContainer.attachTemplatePortal(\n      new TemplatePortal<T>(componentOrTemplateRef, null!,\n        <any>{$implicit: config.data, dialogRef}));\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: DialogConfig,\n      dialogRef: DialogRef<T>,\n      dialogContainer: CdkDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [this.injector.get(DIALOG_REF), dialogRef],\n      [this.injector.get(DIALOG_CONTAINER), dialogContainer],\n      [DIALOG_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this.injector, injectionTokens);\n  }\n\n  /**\n   * Expands the provided configuration object to include the default values for properties which\n   * are undefined.\n   */\n  private _applyConfigDefaults(config?: DialogConfig): DialogConfig {\n    const dialogConfig = this.injector.get(DIALOG_CONFIG) as typeof DialogConfig;\n    return {...new dialogConfig(), ...config};\n  }\n}\n"]}