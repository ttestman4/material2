{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/dialog/dialog-ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy, OverlaySizeConfig} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs';\nimport {map, filter} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {CdkDialogContainer} from './dialog-container';\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nexport class DialogRef<T, R = any> {\n  /** The instance of the component in the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined;\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    public _overlayRef: OverlayRef,\n    protected _containerInstance: CdkDialogContainer,\n    readonly id: string = `dialog-${uniqueId++}`) {\n\n    // If the dialog has a backdrop, handle clicks from the backdrop.\n    if (_containerInstance._config.hasBackdrop) {\n      _overlayRef.backdropClick().subscribe(() => {\n        if (!this.disableClose) {\n          this.close();\n        }\n      });\n    }\n\n    this.beforeClosed().subscribe(() => {\n      this._overlayRef.detachBackdrop();\n    });\n\n    this.afterClosed().subscribe(() => {\n      this._overlayRef.detach();\n      this._overlayRef.dispose();\n      this.componentInstance = null!;\n    });\n\n    // Close when escape keydown event occurs\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n    this._containerInstance._startExiting();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's width and height, defined, min and max.\n   * @param size New size for the overlay.\n   */\n  updateSize(size: OverlaySizeConfig): this {\n    if (size.width) {\n      this._getPositionStrategy().width(size.width.toString());\n    }\n    if (size.height) {\n      this._getPositionStrategy().height(size.height.toString());\n    }\n    this._overlayRef.updateSize(size);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n\n  /** Gets an observable that emits when dialog begins opening. */\n  beforeOpened(): Observable<void> {\n    return this._containerInstance._beforeEnter.asObservable();\n  }\n\n  /** Gets an observable that emits when dialog is finished opening. */\n  afterOpened(): Observable<void> {\n    return this._containerInstance._afterEnter.asObservable();\n  }\n\n  /** Gets an observable that emits when dialog begins closing. */\n  beforeClosed(): Observable<R | undefined> {\n    return this._containerInstance._beforeExit.pipe(map(() => this._result));\n  }\n\n  /** Gets an observable that emits when dialog is finished closing. */\n  afterClosed(): Observable<R | undefined> {\n    return this._containerInstance._afterExit.pipe(map(() => this._result));\n  }\n}\n"]}