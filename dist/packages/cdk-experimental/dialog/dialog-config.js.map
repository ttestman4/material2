{"version":3,"file":"dialog-config.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/dialog/dialog-config.ts"],"names":[],"mappings":";;AAuBA;IAAA;QAeE,mCAAmC;QACnC,SAAI,GAAgB,QAAQ,CAAC;QAE7B,8CAA8C;QAC9C,eAAU,GAAuB,EAAE,CAAC;QAEpC,2CAA2C;QAC3C,gBAAW,GAAa,IAAI,CAAC;QAE7B,yCAAyC;QACzC,kBAAa,GAAwB,EAAE,CAAC;QAExC,4DAA4D;QAC5D,iBAAY,GAAa,KAAK,CAAC;QAE/B,+BAA+B;QAC/B,UAAK,GAAY,EAAE,CAAC;QAEpB,gCAAgC;QAChC,WAAM,GAAY,EAAE,CAAC;QAErB,uCAAuC;QACvC,aAAQ,GAAqB,EAAE,CAAC;QAEhC,wCAAwC;QACxC,cAAS,GAAqB,EAAE,CAAC;QAEjC,uCAAuC;QACvC,aAAQ,GAAqB,MAAM,CAAC;QAEpC,wCAAwC;QACxC,cAAS,GAAqB,EAAE,CAAC;QAKjC,mDAAmD;QACnD,SAAI,GAAc,IAAI,CAAC;QAKvB,mDAAmD;QACnD,oBAAe,GAAmB,IAAI,CAAC;QAEvC,iDAAiD;QACjD,cAAS,GAAmB,IAAI,CAAC;QAEjC,2EAA2E;QAC3E,cAAS,GAAa,IAAI,CAAC;QAE3B,iFAAiF;QACjF,2BAAsB,GAAY,OAAO,CAAC;QAE1C,+EAA+E;QAC/E,0BAAqB,GAAY,OAAO,CAAC;IAC3C,CAAC;IAAD,mBAAC;AAAD,CAAC,AAvED,IAuEC;AAvEY,oCAAY","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ComponentType} from '@angular/cdk/overlay';\nimport {CdkDialogContainer} from './dialog-container';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n\nexport class DialogConfig<D = any> {\n  /** Component to use as the container for the dialog. */\n  containerComponent?: ComponentType<CdkDialogContainer>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The id of the dialog. */\n  id?: string;\n\n  /** The ARIA role of the dialog. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class(es) for the overlay panel. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a background. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class(es) for the backdrop. */\n  backdropClass?: string | undefined = '';\n\n  /** Whether the dialog can be closed by user interaction. */\n  disableClose?: boolean = false;\n\n  /** The width of the dialog. */\n  width?: string = '';\n\n  /** The height of the dialog. */\n  height?: string = '';\n\n  /** The minimum width of the dialog. */\n  minWidth?: string | number = '';\n\n  /** The minimum height of the dialog. */\n  minHeight?: string | number = '';\n\n  /** The maximum width of the dialog. */\n  maxWidth?: string | number = '80vw';\n\n  /** The maximum height of the dialog. */\n  maxHeight?: string | number = '';\n\n  /** The position of the dialog. */\n  position?: DialogPosition;\n\n  /** Data to be injected into the dialog content. */\n  data?: D | null = null;\n\n  /** The layout direction for the dialog content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n  enterAnimationDuration?: string = '225ms';\n\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n  exitAnimationDuration?: string = '225ms';\n}\n"]}