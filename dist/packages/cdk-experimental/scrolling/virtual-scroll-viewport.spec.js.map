{"version":3,"file":"virtual-scroll-viewport.spec.js","sourceRoot":"","sources":["../../../../src/cdk-experimental/scrolling/virtual-scroll-viewport.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {CdkVirtualScrollViewport, ScrollingModule} from '@angular/cdk/scrolling';\nimport {Component, Input, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {async, ComponentFixture, fakeAsync, flush, TestBed} from '@angular/core/testing';\nimport {ScrollingModule as ExperimentalScrollingModule} from './scrolling-module';\n\n\ndescribe('CdkVirtualScrollViewport', () => {\n  describe ('with AutoSizeVirtualScrollStrategy', () => {\n    let fixture: ComponentFixture<AutoSizeVirtualScroll>;\n    let testComponent: AutoSizeVirtualScroll;\n    let viewport: CdkVirtualScrollViewport;\n\n    beforeEach(async(() => {\n      TestBed.configureTestingModule({\n        imports: [ScrollingModule, ExperimentalScrollingModule],\n        declarations: [AutoSizeVirtualScroll],\n      }).compileComponents();\n    }));\n\n    beforeEach(() => {\n      fixture = TestBed.createComponent(AutoSizeVirtualScroll);\n      testComponent = fixture.componentInstance;\n      viewport = testComponent.viewport;\n    });\n\n    it('should render initial state for uniform items', fakeAsync(() => {\n      finishInit(fixture);\n\n      const contentWrapper =\n          viewport.elementRef.nativeElement.querySelector('.cdk-virtual-scroll-content-wrapper')!;\n      expect(contentWrapper.children.length)\n          .toBe(4, 'should render 4 50px items to fill 200px space');\n    }));\n\n    it('should render extra content if first item is smaller than average', fakeAsync(() => {\n      testComponent.items = [50, 200, 200, 200, 200, 200];\n      finishInit(fixture);\n\n      const contentWrapper =\n          viewport.elementRef.nativeElement.querySelector('.cdk-virtual-scroll-content-wrapper')!;\n      expect(contentWrapper.children.length).toBe(4,\n          'should render 4 items to fill 200px space based on 50px estimate from first item');\n    }));\n\n    it('should throw if maxBufferPx is less than minBufferPx', fakeAsync(() => {\n      testComponent.minBufferPx = 100;\n      testComponent.maxBufferPx = 99;\n      expect(() => finishInit(fixture)).toThrow();\n    }));\n\n    // TODO(mmalerba): Add test that it corrects the initial render if it didn't render enough,\n    // once it actually does that.\n  });\n});\n\n\n/** Finish initializing the virtual scroll component at the beginning of a test. */\nfunction finishInit(fixture: ComponentFixture<any>) {\n  // On the first cycle we render and measure the viewport.\n  fixture.detectChanges();\n  flush();\n\n  // On the second cycle we render the items.\n  fixture.detectChanges();\n  flush();\n}\n\n\n@Component({\n  template: `\n    <cdk-virtual-scroll-viewport\n        autosize [minBufferPx]=\"minBufferPx\" [maxBufferPx]=\"maxBufferPx\"\n        [orientation]=\"orientation\" [style.height.px]=\"viewportHeight\"\n        [style.width.px]=\"viewportWidth\">\n      <div class=\"item\" *cdkVirtualFor=\"let size of items; let i = index\" [style.height.px]=\"size\"\n           [style.width.px]=\"size\">\n        {{i}} - {{size}}\n      </div>\n    </cdk-virtual-scroll-viewport>\n  `,\n  styles: [`\n    .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper {\n      flex-direction: row;\n    }\n  `],\n  encapsulation: ViewEncapsulation.None,\n})\nclass AutoSizeVirtualScroll {\n  @ViewChild(CdkVirtualScrollViewport) viewport: CdkVirtualScrollViewport;\n\n  @Input() orientation = 'vertical';\n  @Input() viewportSize = 200;\n  @Input() viewportCrossSize = 100;\n  @Input() minBufferPx = 0;\n  @Input() maxBufferPx = 0;\n  @Input() items = Array(10).fill(50);\n\n  get viewportWidth() {\n    return this.orientation == 'horizontal' ? this.viewportSize : this.viewportCrossSize;\n  }\n\n  get viewportHeight() {\n    return this.orientation == 'horizontal' ? this.viewportCrossSize : this.viewportSize;\n  }\n}\n"]}